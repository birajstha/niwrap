{
  "name": "FNIRT",
  "command-line": "FNIRT [AFFINE_FILE] [CONFIG_FILE] [FIELD_FILE] [FIELDCOEFF_FILE] [IN_FILE] [JACOBIAN_FILE] [MODULATEDREF_FILE] [REF_FILE] [REFMASK_FILE]",
  "author": "Nipype (interface)",
  "description": "FNIRT, as implemented in Nipype (module: nipype.interfaces.fsl, interface: FNIRT).\nFSL FNIRT wrapper for non-linear registration\nFor complete details, see the `FNIRT Documentation. <https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FNIRT>`_",
  "inputs": [
    {
      "id": "affine_file",
      "name": "Affine file",
      "type": "File",
      "value-key": "[AFFINE_FILE]",
      "command-line-flag": "--aff",
      "command-line-flag-separator": "=",
      "description": "A pathlike object or string representing an existing file. Name of file containing affine transform.",
      "optional": true
    },
    {
      "id": "config_file",
      "name": "Config file",
      "type": "String",
      "value-key": "[CONFIG_FILE]",
      "command-line-flag": "--config",
      "command-line-flag-separator": "=",
      "description": "'t1_2_mni152_2mm' or 'fa_2_fmrib58_1mm' or a pathlike object or string representing an existing file. Name of config file specifying command line arguments.",
      "optional": true,
      "value-choices": ["T1_2_MNI152_2mm", "FA_2_FMRIB58_1mm"]
    },
    {
      "id": "field_file",
      "name": "Field file",
      "type": "Flag",
      "value-key": "[FIELD_FILE]",
      "command-line-flag": "--fout",
      "command-line-flag-separator": "=",
      "description": "A boolean or a pathlike object or string representing a file. Name of output file with field or true.",
      "optional": true
    },
    {
      "id": "fieldcoeff_file",
      "name": "Fieldcoeff file",
      "type": "Flag",
      "value-key": "[FIELDCOEFF_FILE]",
      "command-line-flag": "--cout",
      "command-line-flag-separator": "=",
      "description": "A boolean or a pathlike object or string representing a file. Name of output file with field coefficients or true.",
      "optional": true
    },
    {
      "id": "in_file",
      "name": "In file",
      "type": "File",
      "value-key": "[IN_FILE]",
      "command-line-flag": "--in",
      "command-line-flag-separator": "=",
      "description": "A pathlike object or string representing an existing file. Name of input image.",
      "optional": false
    },
    {
      "id": "jacobian_file",
      "name": "Jacobian file",
      "type": "Flag",
      "value-key": "[JACOBIAN_FILE]",
      "command-line-flag": "--jout",
      "command-line-flag-separator": "=",
      "description": "A boolean or a pathlike object or string representing a file. Name of file for writing out the jacobian of the field (for diagnostic or vbm purposes).",
      "optional": true
    },
    {
      "id": "modulatedref_file",
      "name": "Modulatedref file",
      "type": "Flag",
      "value-key": "[MODULATEDREF_FILE]",
      "command-line-flag": "--refout",
      "command-line-flag-separator": "=",
      "description": "A boolean or a pathlike object or string representing a file. Name of file for writing out intensity modulated --ref (for diagnostic purposes).",
      "optional": true
    },
    {
      "id": "ref_file",
      "name": "Ref file",
      "type": "File",
      "value-key": "[REF_FILE]",
      "command-line-flag": "--ref",
      "command-line-flag-separator": "=",
      "description": "A pathlike object or string representing an existing file. Name of reference image.",
      "optional": false
    },
    {
      "id": "refmask_file",
      "name": "Refmask file",
      "type": "File",
      "value-key": "[REFMASK_FILE]",
      "command-line-flag": "--refmask",
      "command-line-flag-separator": "=",
      "description": "A pathlike object or string representing an existing file. Name of file with mask in reference space.",
      "optional": true
    }
  ],
  "output-files": [
    {
      "name": "Field file",
      "id": "field_file_outfile",
      "path-template": "[FIELD_FILE]",
      "optional": true,
      "description": "A pathlike object or string representing a file. File with warp field."
    },
    {
      "name": "Fieldcoeff file",
      "id": "fieldcoeff_file_outfile",
      "path-template": "[FIELDCOEFF_FILE]",
      "optional": true,
      "description": "A pathlike object or string representing an existing file. File with field coefficients."
    },
    {
      "name": "Jacobian file",
      "id": "jacobian_file_outfile",
      "path-template": "[JACOBIAN_FILE]",
      "optional": true,
      "description": "A pathlike object or string representing a file. File containing jacobian of the field."
    },
    {
      "name": "Log file",
      "id": "log_file_outfile",
      "path-template": "[LOG_FILE]",
      "optional": true,
      "description": "A pathlike object or string representing a file. Name of log-file."
    },
    {
      "name": "Modulatedref file",
      "id": "modulatedref_file_outfile",
      "path-template": "[MODULATEDREF_FILE]",
      "optional": true,
      "description": "A pathlike object or string representing a file. File containing intensity modulated --ref."
    },
    {
      "name": "Out intensitymap file",
      "id": "out_intensitymap_file_outfile",
      "path-template": "[OUT_INTENSITYMAP_FILE]",
      "optional": true,
      "description": "A list of from 2 to 2 items which are a pathlike object or string representing a file. Files containing info pertaining to intensity mapping.",
      "list": true
    },
    {
      "name": "Warped file",
      "id": "warped_file_outfile",
      "path-template": "[WARPED_FILE]",
      "optional": true,
      "description": "A pathlike object or string representing an existing file. Warped image."
    }
  ],
  "tool-version": "1.0.0",
  "schema-version": "0.5",
  "container-image": {
    "image": "container/image",
    "type": "docker"
  },
  "tags": {
    "domain": "neuroinformatics",
    "source": "nipype-interface"
  }
}
