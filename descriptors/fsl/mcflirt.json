{
  "name": "MCFLIRT",
  "command-line": "MCFLIRT [IN_FILE] [ARGS] [BINS] [COST] [DOF] [ENVIRON] [INIT] [INTERPOLATION] [MEAN_VOL] [OUT_FILE] [OUTPUT_TYPE] [REF_FILE] [REF_VOL] [ROTATION] [SAVE_MATS] [SAVE_PLOTS] [SAVE_RMS] [SCALING] [SMOOTH] [STAGES] [STATS_IMGS] [USE_CONTOUR] [USE_GRADIENT]",
  "author": "Nipype (interface)",
  "description": "MCFLIRT, as implemented in Nipype (module: nipype.interfaces.fsl, interface: MCFLIRT).\n\nFSL MCFLIRT wrapper for within-modality motion correction\n\n    For complete details, see the `MCFLIRT Documentation.\n    <https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/MCFLIRT>`_\n\n    Examples\n    --------\n    >>> from nipype.interfaces import fsl\n    >>> mcflt = fsl.MCFLIRT()\n    >>> mcflt.inputs.in_file = 'functional.nii'\n    >>> mcflt.inputs.cost = 'mutualinfo'\n    >>> mcflt.inputs.out_file = 'moco.nii'\n    >>> mcflt.cmdline\n    'mcflirt -in functional.nii -cost mutualinfo -out moco.nii'\n    >>> res = mcflt.run()  # doctest: +SKIP\n\n    ",
  "inputs": [
    {
      "id": "args",
      "name": "Args",
      "type": "String",
      "value-key": "[ARGS]",
      "description": "A string. Additional parameters to the command.",
      "optional": true
    },
    {
      "id": "bins",
      "name": "Bins",
      "type": "Number",
      "integer": true,
      "value-key": "[BINS]",
      "command-line-flag": "-bins",
      "description": "An integer. Number of histogram bins.",
      "optional": true
    },
    {
      "id": "cost",
      "name": "Cost",
      "type": "String",
      "value-key": "[COST]",
      "command-line-flag": "-cost",
      "description": "'mutualinfo' or 'woods' or 'corratio' or 'normcorr' or 'normmi' or 'leastsquares'. Cost function to optimize.",
      "optional": true,
      "value-choices": [
        "mutualinfo",
        "woods",
        "corratio",
        "normcorr",
        "normmi",
        "leastsquares"
      ]
    },
    {
      "id": "dof",
      "name": "Dof",
      "type": "Number",
      "integer": true,
      "value-key": "[DOF]",
      "command-line-flag": "-dof",
      "description": "An integer. Degrees of freedom for the transformation.",
      "optional": true
    },
    {
      "id": "environ",
      "name": "Environ",
      "type": "String",
      "value-key": "[ENVIRON]",
      "description": "A dictionary with keys which are a bytes or none or a value of class 'str' and with values which are a bytes or none or a value of class 'str'. Environment variables.",
      "optional": true,
      "default-value": {}
    },
    {
      "id": "in_file",
      "name": "In file",
      "type": "File",
      "value-key": "[IN_FILE]",
      "command-line-flag": "-in",
      "description": "A pathlike object or string representing an existing file. Timeseries to motion-correct.",
      "optional": false
    },
    {
      "id": "init",
      "name": "Init",
      "type": "File",
      "value-key": "[INIT]",
      "command-line-flag": "-init",
      "description": "A pathlike object or string representing an existing file. Initial transformation matrix.",
      "optional": true
    },
    {
      "id": "interpolation",
      "name": "Interpolation",
      "type": "String",
      "value-key": "[INTERPOLATION]",
      "command-line-flag": "-",
      "description": "'spline' or 'nn' or 'sinc'. Interpolation method for transformation.",
      "optional": true,
      "value-choices": ["spline", "nn", "sinc"]
    },
    {
      "id": "mean_vol",
      "name": "Mean vol",
      "type": "Flag",
      "value-key": "[MEAN_VOL]",
      "command-line-flag": "-meanvol",
      "description": "A boolean. Register to mean volume.",
      "optional": true
    },
    {
      "id": "out_file",
      "name": "Out file",
      "type": "File",
      "value-key": "[OUT_FILE]",
      "command-line-flag": "-out",
      "description": "A pathlike object or string representing a file. File to write.",
      "optional": true
    },
    {
      "id": "output_type",
      "name": "Output type",
      "type": "String",
      "value-key": "[OUTPUT_TYPE]",
      "description": "'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'. Fsl output type.",
      "optional": true,
      "value-choices": ["NIFTI", "NIFTI_PAIR", "NIFTI_GZ", "NIFTI_PAIR_GZ"]
    },
    {
      "id": "ref_file",
      "name": "Ref file",
      "type": "File",
      "value-key": "[REF_FILE]",
      "command-line-flag": "-reffile",
      "description": "A pathlike object or string representing an existing file. Target image for motion correction.",
      "optional": true
    },
    {
      "id": "ref_vol",
      "name": "Ref vol",
      "type": "Number",
      "integer": true,
      "value-key": "[REF_VOL]",
      "command-line-flag": "-refvol",
      "description": "An integer. Volume to align frames to.",
      "optional": true
    },
    {
      "id": "rotation",
      "name": "Rotation",
      "type": "Number",
      "integer": true,
      "value-key": "[ROTATION]",
      "command-line-flag": "-rotation",
      "description": "An integer. Scaling factor for rotation tolerances.",
      "optional": true
    },
    {
      "id": "save_mats",
      "name": "Save mats",
      "type": "Flag",
      "value-key": "[SAVE_MATS]",
      "command-line-flag": "-mats",
      "description": "A boolean. Save transformation matrices.",
      "optional": true
    },
    {
      "id": "save_plots",
      "name": "Save plots",
      "type": "Flag",
      "value-key": "[SAVE_PLOTS]",
      "command-line-flag": "-plots",
      "description": "A boolean. Save transformation parameters.",
      "optional": true
    },
    {
      "id": "save_rms",
      "name": "Save rms",
      "type": "Flag",
      "value-key": "[SAVE_RMS]",
      "command-line-flag": "-rmsabs -rmsrel",
      "description": "A boolean. Save rms displacement parameters.",
      "optional": true
    },
    {
      "id": "scaling",
      "name": "Scaling",
      "type": "Number",
      "value-key": "[SCALING]",
      "command-line-flag": "-scaling",
      "description": "A float. Scaling factor to use.",
      "optional": true
    },
    {
      "id": "smooth",
      "name": "Smooth",
      "type": "Number",
      "value-key": "[SMOOTH]",
      "command-line-flag": "-smooth",
      "description": "A float. Smoothing factor for the cost function.",
      "optional": true
    },
    {
      "id": "stages",
      "name": "Stages",
      "type": "Number",
      "integer": true,
      "value-key": "[STAGES]",
      "command-line-flag": "-stages",
      "description": "An integer. Stages (if 4, perform final search with sinc interpolation.",
      "optional": true
    },
    {
      "id": "stats_imgs",
      "name": "Stats imgs",
      "type": "Flag",
      "value-key": "[STATS_IMGS]",
      "command-line-flag": "-stats",
      "description": "A boolean. Produce variance and std. dev. images.",
      "optional": true
    },
    {
      "id": "use_contour",
      "name": "Use contour",
      "type": "Flag",
      "value-key": "[USE_CONTOUR]",
      "command-line-flag": "-edge",
      "description": "A boolean. Run search on contour images.",
      "optional": true
    },
    {
      "id": "use_gradient",
      "name": "Use gradient",
      "type": "Flag",
      "value-key": "[USE_GRADIENT]",
      "command-line-flag": "-gdt",
      "description": "A boolean. Run search on gradient images.",
      "optional": true
    }
  ],
  "output-files": [
    {
      "name": "Mat file",
      "id": "mat_file",
      "path-template": "mat_file",
      "optional": true,
      "description": "A list of items which are a pathlike object or string representing an existing file. Transformation matrices.",
      "list": true
    },
    {
      "name": "Mean img",
      "id": "mean_img",
      "path-template": "mean_img",
      "optional": true,
      "description": "A pathlike object or string representing an existing file. Mean timeseries image (if mean_vol=true)."
    },
    {
      "name": "Out file",
      "id": "out_file_outfile",
      "path-template": "[OUT_FILE]",
      "optional": true,
      "description": "A pathlike object or string representing an existing file. Motion-corrected timeseries."
    },
    {
      "name": "Par file",
      "id": "par_file",
      "path-template": "par_file",
      "optional": true,
      "description": "A pathlike object or string representing an existing file. Text-file with motion parameters."
    },
    {
      "name": "Rms files",
      "id": "rms_files",
      "path-template": "rms_files",
      "optional": true,
      "description": "A list of items which are a pathlike object or string representing an existing file. Absolute and relative displacement parameters.",
      "list": true
    },
    {
      "name": "Std img",
      "id": "std_img",
      "path-template": "std_img",
      "optional": true,
      "description": "A pathlike object or string representing an existing file. Standard deviation image."
    },
    {
      "name": "Variance img",
      "id": "variance_img",
      "path-template": "variance_img",
      "optional": true,
      "description": "A pathlike object or string representing an existing file. Variance image."
    }
  ],
  "tool-version": "1.0.0",
  "schema-version": "0.5",
  "container-image": {
    "image": "container/image",
    "type": "docker"
  },
  "tags": {
    "domain": "neuroinformatics",
    "source": "nipype-interface"
  }
}
