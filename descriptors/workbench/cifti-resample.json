{
  "tool-version": "1.5.0 2e663bdff57597d5d1fb251dc4740d14d9cf11dd",
  "name": "cifti-resample",
  "author": "Washington University School of Medicin",
  "command-line": "wb_command -cifti-resample [CIFTI_IN] [DIRECTION] [CIFTI_TEMPLATE] [TEMPLATE_DIRECTION] [SURFACE_METHOD] [VOLUME_METHOD] [CIFTI_OUT] [OPT_SURFACE_LARGEST] [VOLUME_PREDILATE] [SURFACE_POSTDILATE] [AFFINE] [WARPFIELD] [LEFT_SPHERES] [RIGHT_SPHERES] [CEREBELLUM_SPHERES]",
  "container-image": {
    "image": "fcpindi/c-pac:latest",
    "type": "docker"
  },
  "description": "Resample a cifti file to a new cifti space.\n\nResample cifti data to a different brainordinate space.  Use COLUMN for the direction to resample dscalar, dlabel, or dtseries.  Resampling both dimensions of a dconn requires running this command twice, once with COLUMN and once with ROW.  If you are resampling a dconn and your machine has a large amount of memory, you might consider using -cifti-resample-dconn-memory to avoid writing and rereading an intermediate file.  The <template-direction> argument should usually be COLUMN, as dtseries, dscalar, and dlabel all have brainordinates on that direction.  If spheres are not specified for a surface structure which exists in the cifti files, its data is copied without resampling or dilation.  Dilation is done with the 'nearest' method, and is done on <new-sphere> for surface data.  Volume components are padded before dilation so that dilation doesn't run into the edge of the component bounding box.  If neither -affine nor -warpfield are specified, the identity transform is assumed for the volume data.\n\nThe recommended resampling methods are ADAP_BARY_AREA and CUBIC (cubic spline), except for label data which should use ADAP_BARY_AREA and ENCLOSING_VOXEL.  Using ADAP_BARY_AREA requires specifying an area option to each used -*-spheres option.\n\nThe <volume-method> argument must be one of the following:\n\nCUBIC\nENCLOSING_VOXEL\nTRILINEAR\n\nThe <surface-method> argument must be one of the following:\n\nADAP_BARY_AREA\nBARYCENTRIC\n",
  "schema-version": "0.5",
  "tags": {},
  "inputs": [
    {
      "id": "cifti_in",
      "name": "cifti_in",
      "description": "the cifti file to resample",
      "optional": false,
      "value-key": "[CIFTI_IN]",
      "type": "File"
    },
    {
      "id": "direction",
      "name": "direction",
      "description": "the direction of the input that should be resampled, ROW or COLUMN",
      "optional": false,
      "value-key": "[DIRECTION]",
      "type": "String"
    },
    {
      "id": "cifti_template",
      "name": "cifti_template",
      "description": "a cifti file containing the cifti space to resample to",
      "optional": false,
      "value-key": "[CIFTI_TEMPLATE]",
      "type": "File"
    },
    {
      "id": "template_direction",
      "name": "template_direction",
      "description": "the direction of the template to use as the resampling space, ROW or COLUMN",
      "optional": false,
      "value-key": "[TEMPLATE_DIRECTION]",
      "type": "String"
    },
    {
      "id": "surface_method",
      "name": "surface_method",
      "description": "specify a surface resampling method",
      "optional": false,
      "value-key": "[SURFACE_METHOD]",
      "type": "String"
    },
    {
      "id": "volume_method",
      "name": "volume_method",
      "description": "specify a volume interpolation method",
      "optional": false,
      "value-key": "[VOLUME_METHOD]",
      "type": "String"
    },
    {
      "id": "cifti_out",
      "name": "cifti_out",
      "description": "the output cifti file",
      "optional": false,
      "value-key": "[CIFTI_OUT]",
      "type": "File"
    },
    {
      "id": "opt_surface_largest",
      "name": "opt_surface_largest",
      "command-line-flag": "-surface-largest",
      "description": "use largest weight instead of weighted average or popularity when doing surface resampling",
      "type": "Flag",
      "optional": true,
      "value-key": "[OPT_SURFACE_LARGEST]"
    },
    {
      "id": "volume_predilate",
      "name": "volume_predilate",
      "description": "dilate the volume components before resampling",
      "command-line-flag": "-volume-predilate",
      "type": {
        "id": "volume_predilate",
        "name": "volume_predilate",
        "description": "dilate the volume components before resampling",
        "command-line": " [OPT_NEAREST] [WEIGHTED]",
        "inputs": [
          {
            "id": "opt_nearest",
            "name": "opt_nearest",
            "command-line-flag": "-nearest",
            "description": "use nearest value dilation",
            "type": "Flag",
            "optional": true,
            "value-key": "[OPT_NEAREST]"
          },
          {
            "id": "weighted",
            "name": "weighted",
            "description": "use weighted dilation (default)",
            "command-line-flag": "-weighted",
            "type": {
              "id": "weighted",
              "name": "weighted",
              "description": "use weighted dilation (default)",
              "command-line": " [OPT_EXPONENT_EXPONENT] [OPT_LEGACY_CUTOFF]",
              "inputs": [
                {
                  "id": "opt_exponent_exponent",
                  "name": "opt_exponent_exponent",
                  "command-line-flag": "-exponent",
                  "description": "specify exponent in weighting function: exponent 'n' to use in (1 / (distance ^ n)) as the weighting function (default 7)",
                  "optional": true,
                  "value-key": "[OPT_EXPONENT_EXPONENT]",
                  "type": "Number",
                  "integer": false
                },
                {
                  "id": "opt_legacy_cutoff",
                  "name": "opt_legacy_cutoff",
                  "command-line-flag": "-legacy-cutoff",
                  "description": "use v1.3.2 logic for the kernel cutoff",
                  "type": "Flag",
                  "optional": true,
                  "value-key": "[OPT_LEGACY_CUTOFF]"
                }
              ]
            },
            "optional": true,
            "value-key": "[WEIGHTED]",
            "list": false
          }
        ]
      },
      "optional": true,
      "value-key": "[VOLUME_PREDILATE]",
      "list": false
    },
    {
      "id": "surface_postdilate",
      "name": "surface_postdilate",
      "description": "dilate the surface components after resampling",
      "command-line-flag": "-surface-postdilate",
      "type": {
        "id": "surface_postdilate",
        "name": "surface_postdilate",
        "description": "dilate the surface components after resampling",
        "command-line": " [OPT_NEAREST] [OPT_LINEAR] [WEIGHTED]",
        "inputs": [
          {
            "id": "opt_nearest",
            "name": "opt_nearest",
            "command-line-flag": "-nearest",
            "description": "use nearest value dilation",
            "type": "Flag",
            "optional": true,
            "value-key": "[OPT_NEAREST]"
          },
          {
            "id": "opt_linear",
            "name": "opt_linear",
            "command-line-flag": "-linear",
            "description": "use linear dilation",
            "type": "Flag",
            "optional": true,
            "value-key": "[OPT_LINEAR]"
          },
          {
            "id": "weighted",
            "name": "weighted",
            "description": "use weighted dilation (default for non-label data)",
            "command-line-flag": "-weighted",
            "type": {
              "id": "weighted",
              "name": "weighted",
              "description": "use weighted dilation (default for non-label data)",
              "command-line": " [OPT_EXPONENT_EXPONENT] [OPT_LEGACY_CUTOFF]",
              "inputs": [
                {
                  "id": "opt_exponent_exponent",
                  "name": "opt_exponent_exponent",
                  "command-line-flag": "-exponent",
                  "description": "specify exponent in weighting function: exponent 'n' to use in (area / (distance ^ n)) as the weighting function (default 6)",
                  "optional": true,
                  "value-key": "[OPT_EXPONENT_EXPONENT]",
                  "type": "Number",
                  "integer": false
                },
                {
                  "id": "opt_legacy_cutoff",
                  "name": "opt_legacy_cutoff",
                  "command-line-flag": "-legacy-cutoff",
                  "description": "use v1.3.2 logic for the kernel cutoff",
                  "type": "Flag",
                  "optional": true,
                  "value-key": "[OPT_LEGACY_CUTOFF]"
                }
              ]
            },
            "optional": true,
            "value-key": "[WEIGHTED]",
            "list": false
          }
        ]
      },
      "optional": true,
      "value-key": "[SURFACE_POSTDILATE]",
      "list": false
    },
    {
      "id": "affine",
      "name": "affine",
      "description": "use an affine transformation on the volume components",
      "command-line-flag": "-affine",
      "type": {
        "id": "affine",
        "name": "affine",
        "description": "use an affine transformation on the volume components",
        "command-line": " [FLIRT]",
        "inputs": [
          {
            "id": "flirt",
            "name": "flirt",
            "description": "MUST be used if affine is a flirt affine",
            "command-line-flag": "-flirt",
            "type": {
              "id": "flirt",
              "name": "flirt",
              "description": "MUST be used if affine is a flirt affine",
              "command-line": ""
            },
            "optional": true,
            "value-key": "[FLIRT]",
            "list": false
          }
        ]
      },
      "optional": true,
      "value-key": "[AFFINE]",
      "list": false
    },
    {
      "id": "warpfield",
      "name": "warpfield",
      "description": "use a warpfield on the volume components",
      "command-line-flag": "-warpfield",
      "type": {
        "id": "warpfield",
        "name": "warpfield",
        "description": "use a warpfield on the volume components",
        "command-line": " [OPT_FNIRT_SOURCE_VOLUME]",
        "inputs": [
          {
            "id": "opt_fnirt_source_volume",
            "name": "opt_fnirt_source_volume",
            "command-line-flag": "-fnirt",
            "description": "MUST be used if using a fnirt warpfield: the source volume used when generating the warpfield",
            "optional": true,
            "value-key": "[OPT_FNIRT_SOURCE_VOLUME]",
            "type": "String"
          }
        ]
      },
      "optional": true,
      "value-key": "[WARPFIELD]",
      "list": false
    },
    {
      "id": "left_spheres",
      "name": "left_spheres",
      "description": "specify spheres for left surface resampling",
      "command-line-flag": "-left-spheres",
      "type": {
        "id": "left_spheres",
        "name": "left_spheres",
        "description": "specify spheres for left surface resampling",
        "command-line": " [LEFT_AREA_SURFS] [LEFT_AREA_METRICS]",
        "inputs": [
          {
            "id": "left_area_surfs",
            "name": "left_area_surfs",
            "description": "specify left surfaces to do vertex area correction based on",
            "command-line-flag": "-left-area-surfs",
            "type": {
              "id": "left_area_surfs",
              "name": "left_area_surfs",
              "description": "specify left surfaces to do vertex area correction based on",
              "command-line": ""
            },
            "optional": true,
            "value-key": "[LEFT_AREA_SURFS]",
            "list": false
          },
          {
            "id": "left_area_metrics",
            "name": "left_area_metrics",
            "description": "specify left vertex area metrics to do area correction based on",
            "command-line-flag": "-left-area-metrics",
            "type": {
              "id": "left_area_metrics",
              "name": "left_area_metrics",
              "description": "specify left vertex area metrics to do area correction based on",
              "command-line": ""
            },
            "optional": true,
            "value-key": "[LEFT_AREA_METRICS]",
            "list": false
          }
        ]
      },
      "optional": true,
      "value-key": "[LEFT_SPHERES]",
      "list": false
    },
    {
      "id": "right_spheres",
      "name": "right_spheres",
      "description": "specify spheres for right surface resampling",
      "command-line-flag": "-right-spheres",
      "type": {
        "id": "right_spheres",
        "name": "right_spheres",
        "description": "specify spheres for right surface resampling",
        "command-line": " [RIGHT_AREA_SURFS] [RIGHT_AREA_METRICS]",
        "inputs": [
          {
            "id": "right_area_surfs",
            "name": "right_area_surfs",
            "description": "specify right surfaces to do vertex area correction based on",
            "command-line-flag": "-right-area-surfs",
            "type": {
              "id": "right_area_surfs",
              "name": "right_area_surfs",
              "description": "specify right surfaces to do vertex area correction based on",
              "command-line": ""
            },
            "optional": true,
            "value-key": "[RIGHT_AREA_SURFS]",
            "list": false
          },
          {
            "id": "right_area_metrics",
            "name": "right_area_metrics",
            "description": "specify right vertex area metrics to do area correction based on",
            "command-line-flag": "-right-area-metrics",
            "type": {
              "id": "right_area_metrics",
              "name": "right_area_metrics",
              "description": "specify right vertex area metrics to do area correction based on",
              "command-line": ""
            },
            "optional": true,
            "value-key": "[RIGHT_AREA_METRICS]",
            "list": false
          }
        ]
      },
      "optional": true,
      "value-key": "[RIGHT_SPHERES]",
      "list": false
    },
    {
      "id": "cerebellum_spheres",
      "name": "cerebellum_spheres",
      "description": "specify spheres for cerebellum surface resampling",
      "command-line-flag": "-cerebellum-spheres",
      "type": {
        "id": "cerebellum_spheres",
        "name": "cerebellum_spheres",
        "description": "specify spheres for cerebellum surface resampling",
        "command-line": " [CEREBELLUM_AREA_SURFS] [CEREBELLUM_AREA_METRICS]",
        "inputs": [
          {
            "id": "cerebellum_area_surfs",
            "name": "cerebellum_area_surfs",
            "description": "specify cerebellum surfaces to do vertex area correction based on",
            "command-line-flag": "-cerebellum-area-surfs",
            "type": {
              "id": "cerebellum_area_surfs",
              "name": "cerebellum_area_surfs",
              "description": "specify cerebellum surfaces to do vertex area correction based on",
              "command-line": ""
            },
            "optional": true,
            "value-key": "[CEREBELLUM_AREA_SURFS]",
            "list": false
          },
          {
            "id": "cerebellum_area_metrics",
            "name": "cerebellum_area_metrics",
            "description": "specify cerebellum vertex area metrics to do area correction based on",
            "command-line-flag": "-cerebellum-area-metrics",
            "type": {
              "id": "cerebellum_area_metrics",
              "name": "cerebellum_area_metrics",
              "description": "specify cerebellum vertex area metrics to do area correction based on",
              "command-line": ""
            },
            "optional": true,
            "value-key": "[CEREBELLUM_AREA_METRICS]",
            "list": false
          }
        ]
      },
      "optional": true,
      "value-key": "[CEREBELLUM_SPHERES]",
      "list": false
    }
  ],
  "output-files": [
    {
      "id": "cifti_out",
      "name": "cifti_out",
      "path-template": "[CIFTI_OUT]",
      "description": "the output cifti file",
      "optional": false
    }
  ]
}
