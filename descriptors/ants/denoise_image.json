{
    "name": "DenoiseImage",
    "command-line": "DenoiseImage [ARGS] [DIMENSION] [ENVIRON] [INPUT_IMAGE] [NOISE_IMAGE] [NOISE_MODEL] [NUM_THREADS] [OUTPUT_IMAGE] [SAVE_NOISE] [SHRINK_FACTOR] [VERBOSE]",
    "author": "Nipype (interface)",
    "description": "DenoiseImage, as implemented in Nipype (module: nipype.interfaces.ants, interface: DenoiseImage).\n\n\n    Examples\n    --------\n    >>> import copy\n    >>> from nipype.interfaces.ants import DenoiseImage\n    >>> denoise = DenoiseImage()\n    >>> denoise.inputs.dimension = 3\n    >>> denoise.inputs.input_image = 'im1.nii'\n    >>> denoise.cmdline\n    'DenoiseImage -d 3 -i im1.nii -n Gaussian -o im1_noise_corrected.nii -s 1'\n\n    >>> denoise_2 = copy.deepcopy(denoise)\n    >>> denoise_2.inputs.output_image = 'output_corrected_image.nii.gz'\n    >>> denoise_2.inputs.noise_model = 'Rician'\n    >>> denoise_2.inputs.shrink_factor = 2\n    >>> denoise_2.cmdline\n    'DenoiseImage -d 3 -i im1.nii -n Rician -o output_corrected_image.nii.gz -s 2'\n\n    >>> denoise_3 = DenoiseImage()\n    >>> denoise_3.inputs.input_image = 'im1.nii'\n    >>> denoise_3.inputs.save_noise = True\n    >>> denoise_3.cmdline\n    'DenoiseImage -i im1.nii -n Gaussian -o [ im1_noise_corrected.nii, im1_noise.nii ] -s 1'\n\n    ",
    "inputs": [
        {
            "id": "args",
            "name": "Args",
            "type": "String",
            "value-key": "[ARGS]",
            "description": "A string. Additional parameters to the command.",
            "optional": true
        },
        {
            "id": "dimension",
            "name": "Dimension",
            "type": "Number",
            "value-key": "[DIMENSION]",
            "command-line-flag": "-d",
            "description": "2 or 3 or 4. This option forces the image to be treated as a specified-dimensional image. if not specified, the program tries to infer the dimensionality from the input image.",
            "optional": true,
            "integer": true,
            "value-choices": [
                2,
                3,
                4
            ]
        },
        {
            "id": "environ",
            "name": "Environ",
            "type": "String",
            "value-key": "[ENVIRON]",
            "description": "A dictionary with keys which are a bytes or none or a value of class 'str' and with values which are a bytes or none or a value of class 'str'. Environment variables.",
            "optional": true,
            "default-value": {}
        },
        {
            "id": "input_image",
            "name": "Input image",
            "type": "File",
            "value-key": "[INPUT_IMAGE]",
            "command-line-flag": "-i",
            "description": "A pathlike object or string representing an existing file. A scalar image is expected as input for noise correction.",
            "optional": false
        },
        {
            "id": "noise_model",
            "name": "Noise model",
            "type": "String",
            "value-key": "[NOISE_MODEL]",
            "command-line-flag": "-n",
            "description": "'gaussian' or 'rician'. Employ a rician or gaussian noise model.",
            "optional": true,
            "default-value": "Gaussian",
            "value-choices": [
                "Gaussian",
                "Rician"
            ]
        },
        {
            "id": "num_threads",
            "name": "Num threads",
            "type": "Number",
            "integer": true,
            "value-key": "[NUM_THREADS]",
            "description": "An integer. Number of itk threads to use.",
            "optional": true,
            "default-value": 1
        },
        {
            "id": "save_noise",
            "name": "Save noise",
            "type": "Flag",
            "value-key": "[SAVE_NOISE]",
            "command-line-flag": "--save_noise",
            "description": "A boolean. True if the estimated noise should be saved to file.",
            "optional": false,
            "default-value": false
        },
        {
            "id": "shrink_factor",
            "name": "Shrink factor",
            "type": "Number",
            "integer": true,
            "value-key": "[SHRINK_FACTOR]",
            "command-line-flag": "-s",
            "description": "An integer. Running noise correction on large images can be time consuming. to lessen computation time, the input image can be resampled. the shrink factor, specified as a single integer, describes this resampling. shrink factor = 1 is the default.",
            "optional": true,
            "default-value": 1
        },
        {
            "id": "verbose",
            "name": "Verbose",
            "type": "Flag",
            "value-key": "[VERBOSE]",
            "command-line-flag": "-v",
            "description": "A boolean. Verbose output.",
            "optional": true
        }
    ],
    "output-files": [
        {
            "name": "Noise image",
            "id": "noise_image",
            "optional": true,
            "description": "A pathlike object or string representing a file. Filename for the estimated noise.",
            "path-template": "[INPUT_IMAGE]_noise",
            "value-key": "[NOISE_IMAGE]"
        },
        {
            "name": "Output image",
            "id": "output_image",
            "optional": true,
            "description": "A pathlike object or string representing a file. The output consists of the noise corrected version of the input image.",
            "path-template": "[INPUT_IMAGE]_noise_corrected",
            "value-key": "[OUTPUT_IMAGE]",
            "command-line-flag": "-o"
        },
        {
            "name": "Noise image",
            "id": "noise_image",
            "path-template": "noise_image",
            "optional": true,
            "description": "A pathlike object or string representing a file. No description provided."
        },
        {
            "name": "Output image",
            "id": "output_image",
            "path-template": "output_image",
            "optional": true,
            "description": "A pathlike object or string representing an existing file. No description provided."
        }
    ],
    "groups": [
        {
            "id": "mutex_group",
            "name": "Mutex group",
            "members": [
                "noise_image",
                "save_noise"
            ],
            "mutually-exclusive": true
        }
    ],
    "tool-version": "1.0.0",
    "schema-version": "0.5",
    "container-image": {
        "image": "container/image",
        "type": "docker"
    },
    "tags": {
        "domain": "neuroinformatics",
        "source": "nipype-interface"
    }
}