# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

LABEL_PROBABILITY_METADATA = Metadata(
    id="25d79bf1b049f288a3d90b70022b5bc194d1a107",
    name="label-probability",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class LabelProbabilityOutputs(typing.NamedTuple):
    """
    Output object returned when calling `label_probability(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    probability_metric_out: OutputPathType
    """the relative frequencies of each label at each vertex"""


def label_probability(
    label_maps: InputPathType,
    probability_metric_out: InputPathType,
    opt_exclude_unlabeled: bool = False,
    runner: Runner = None,
) -> LabelProbabilityOutputs:
    """
    label-probability by Washington University School of Medicin.
    
    Find frequency of surface labels.
    
    This command outputs a set of soft ROIs, one for each label in the input,
    where the value is how many of the input maps had that label at that vertex,
    divided by the number of input maps.
    
    Args:
        label_maps: label file containing individual label maps from many\
            subjects.
        probability_metric_out: the relative frequencies of each label at each\
            vertex.
        opt_exclude_unlabeled: don't make a probability map of the unlabeled\
            key.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LabelProbabilityOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LABEL_PROBABILITY_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-label-probability")
    cargs.append(execution.input_file(label_maps))
    cargs.append(execution.input_file(probability_metric_out))
    if opt_exclude_unlabeled:
        cargs.append("-exclude-unlabeled")
    ret = LabelProbabilityOutputs(
        root=execution.output_file("."),
        probability_metric_out=execution.output_file(f"{pathlib.Path(probability_metric_out).name}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "LABEL_PROBABILITY_METADATA",
    "LabelProbabilityOutputs",
    "label_probability",
]
