# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


CIFTI_RESAMPLE_METADATA = Metadata(
    id="c859abd646abd6e203a54204abf7f50a14e1566b",
    name="cifti-resample",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class WeightedOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Weighted.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Weighted:
    """
    use weighted dilation (default)
    """
    opt_exponent_exponent: float | int | None = None
    """specify exponent in weighting function: exponent 'n' to use in (1 /
    (distance ^ n)) as the weighting function (default 7)"""
    opt_legacy_cutoff: bool = False
    """use v1.3.2 logic for the kernel cutoff"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_exponent_exponent is not None:
            cargs.extend(["-exponent", str(self.opt_exponent_exponent)])
        if self.opt_legacy_cutoff:
            cargs.append("-legacy-cutoff")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> WeightedOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `WeightedOutputs`).
        """
        ret = WeightedOutputs(
            root=execution.output_file("."),
        )
        return ret


class VolumePredilateOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumePredilate.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.weighted: WeightedOutputs
    """Subcommand outputs"""


@dataclasses.dataclass
class VolumePredilate:
    """
    dilate the volume components before resampling
    """
    opt_nearest: bool = False
    """use nearest value dilation"""
    weighted: Weighted | None = None
    """use weighted dilation (default)"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_nearest:
            cargs.append("-nearest")
        if self.weighted is not None:
            cargs.extend(["-weighted", *self.weighted.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumePredilateOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumePredilateOutputs`).
        """
        ret = VolumePredilateOutputs(
            root=execution.output_file("."),
            self.weighted=self.weighted.outputs(execution),
        )
        return ret


class WeightedOutputs_(typing.NamedTuple):
    """
    Output object returned when calling `Weighted_.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Weighted_:
    """
    use weighted dilation (default for non-label data)
    """
    opt_exponent_exponent: float | int | None = None
    """specify exponent in weighting function: exponent 'n' to use in (area /
    (distance ^ n)) as the weighting function (default 6)"""
    opt_legacy_cutoff: bool = False
    """use v1.3.2 logic for the kernel cutoff"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_exponent_exponent is not None:
            cargs.extend(["-exponent", str(self.opt_exponent_exponent)])
        if self.opt_legacy_cutoff:
            cargs.append("-legacy-cutoff")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> WeightedOutputs_:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `WeightedOutputs_`).
        """
        ret = WeightedOutputs_(
            root=execution.output_file("."),
        )
        return ret


class SurfacePostdilateOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SurfacePostdilate.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.weighted: WeightedOutputs_
    """Subcommand outputs"""


@dataclasses.dataclass
class SurfacePostdilate:
    """
    dilate the surface components after resampling
    """
    opt_nearest: bool = False
    """use nearest value dilation"""
    opt_linear: bool = False
    """use linear dilation"""
    weighted: Weighted_ | None = None
    """use weighted dilation (default for non-label data)"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_nearest:
            cargs.append("-nearest")
        if self.opt_linear:
            cargs.append("-linear")
        if self.weighted is not None:
            cargs.extend(["-weighted", *self.weighted.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> SurfacePostdilateOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `SurfacePostdilateOutputs`).
        """
        ret = SurfacePostdilateOutputs(
            root=execution.output_file("."),
            self.weighted=self.weighted.outputs(execution),
        )
        return ret


class FlirtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Flirt.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Flirt:
    """
    MUST be used if affine is a flirt affine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> FlirtOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `FlirtOutputs`).
        """
        ret = FlirtOutputs(
            root=execution.output_file("."),
        )
        return ret


class AffineOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Affine.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.flirt: FlirtOutputs
    """Subcommand outputs"""


@dataclasses.dataclass
class Affine:
    """
    use an affine transformation on the volume components
    """
    flirt: Flirt | None = None
    """MUST be used if affine is a flirt affine"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.flirt is not None:
            cargs.extend(["-flirt", *self.flirt.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> AffineOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `AffineOutputs`).
        """
        ret = AffineOutputs(
            root=execution.output_file("."),
            self.flirt=self.flirt.outputs(execution),
        )
        return ret


class WarpfieldOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Warpfield.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Warpfield:
    """
    use a warpfield on the volume components
    """
    opt_fnirt_source_volume: str | None = None
    """MUST be used if using a fnirt warpfield: the source volume used when
    generating the warpfield"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_fnirt_source_volume is not None:
            cargs.extend(["-fnirt", self.opt_fnirt_source_volume])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> WarpfieldOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `WarpfieldOutputs`).
        """
        ret = WarpfieldOutputs(
            root=execution.output_file("."),
        )
        return ret


class LeftAreaSurfsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LeftAreaSurfs.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class LeftAreaSurfs:
    """
    specify left surfaces to do vertex area correction based on
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LeftAreaSurfsOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LeftAreaSurfsOutputs`).
        """
        ret = LeftAreaSurfsOutputs(
            root=execution.output_file("."),
        )
        return ret


class LeftAreaMetricsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LeftAreaMetrics.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class LeftAreaMetrics:
    """
    specify left vertex area metrics to do area correction based on
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LeftAreaMetricsOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LeftAreaMetricsOutputs`).
        """
        ret = LeftAreaMetricsOutputs(
            root=execution.output_file("."),
        )
        return ret


class LeftSpheresOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LeftSpheres.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.left_area_surfs: LeftAreaSurfsOutputs
    """Subcommand outputs"""
    self.left_area_metrics: LeftAreaMetricsOutputs
    """Subcommand outputs"""


@dataclasses.dataclass
class LeftSpheres:
    """
    specify spheres for left surface resampling
    """
    left_area_surfs: LeftAreaSurfs | None = None
    """specify left surfaces to do vertex area correction based on"""
    left_area_metrics: LeftAreaMetrics | None = None
    """specify left vertex area metrics to do area correction based on"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.left_area_surfs is not None:
            cargs.extend(["-left-area-surfs", *self.left_area_surfs.run(execution)])
        if self.left_area_metrics is not None:
            cargs.extend(["-left-area-metrics", *self.left_area_metrics.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LeftSpheresOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LeftSpheresOutputs`).
        """
        ret = LeftSpheresOutputs(
            root=execution.output_file("."),
            self.left_area_surfs=self.left_area_surfs.outputs(execution),
            self.left_area_metrics=self.left_area_metrics.outputs(execution),
        )
        return ret


class RightAreaSurfsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RightAreaSurfs.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class RightAreaSurfs:
    """
    specify right surfaces to do vertex area correction based on
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> RightAreaSurfsOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `RightAreaSurfsOutputs`).
        """
        ret = RightAreaSurfsOutputs(
            root=execution.output_file("."),
        )
        return ret


class RightAreaMetricsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RightAreaMetrics.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class RightAreaMetrics:
    """
    specify right vertex area metrics to do area correction based on
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> RightAreaMetricsOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `RightAreaMetricsOutputs`).
        """
        ret = RightAreaMetricsOutputs(
            root=execution.output_file("."),
        )
        return ret


class RightSpheresOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RightSpheres.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.right_area_surfs: RightAreaSurfsOutputs
    """Subcommand outputs"""
    self.right_area_metrics: RightAreaMetricsOutputs
    """Subcommand outputs"""


@dataclasses.dataclass
class RightSpheres:
    """
    specify spheres for right surface resampling
    """
    right_area_surfs: RightAreaSurfs | None = None
    """specify right surfaces to do vertex area correction based on"""
    right_area_metrics: RightAreaMetrics | None = None
    """specify right vertex area metrics to do area correction based on"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.right_area_surfs is not None:
            cargs.extend(["-right-area-surfs", *self.right_area_surfs.run(execution)])
        if self.right_area_metrics is not None:
            cargs.extend(["-right-area-metrics", *self.right_area_metrics.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> RightSpheresOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `RightSpheresOutputs`).
        """
        ret = RightSpheresOutputs(
            root=execution.output_file("."),
            self.right_area_surfs=self.right_area_surfs.outputs(execution),
            self.right_area_metrics=self.right_area_metrics.outputs(execution),
        )
        return ret


class CerebellumAreaSurfsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CerebellumAreaSurfs.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CerebellumAreaSurfs:
    """
    specify cerebellum surfaces to do vertex area correction based on
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CerebellumAreaSurfsOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CerebellumAreaSurfsOutputs`).
        """
        ret = CerebellumAreaSurfsOutputs(
            root=execution.output_file("."),
        )
        return ret


class CerebellumAreaMetricsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CerebellumAreaMetrics.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CerebellumAreaMetrics:
    """
    specify cerebellum vertex area metrics to do area correction based on
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CerebellumAreaMetricsOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CerebellumAreaMetricsOutputs`).
        """
        ret = CerebellumAreaMetricsOutputs(
            root=execution.output_file("."),
        )
        return ret


class CerebellumSpheresOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CerebellumSpheres.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.cerebellum_area_surfs: CerebellumAreaSurfsOutputs
    """Subcommand outputs"""
    self.cerebellum_area_metrics: CerebellumAreaMetricsOutputs
    """Subcommand outputs"""


@dataclasses.dataclass
class CerebellumSpheres:
    """
    specify spheres for cerebellum surface resampling
    """
    cerebellum_area_surfs: CerebellumAreaSurfs | None = None
    """specify cerebellum surfaces to do vertex area correction based on"""
    cerebellum_area_metrics: CerebellumAreaMetrics | None = None
    """specify cerebellum vertex area metrics to do area correction based on"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.cerebellum_area_surfs is not None:
            cargs.extend(["-cerebellum-area-surfs", *self.cerebellum_area_surfs.run(execution)])
        if self.cerebellum_area_metrics is not None:
            cargs.extend(["-cerebellum-area-metrics", *self.cerebellum_area_metrics.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CerebellumSpheresOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CerebellumSpheresOutputs`).
        """
        ret = CerebellumSpheresOutputs(
            root=execution.output_file("."),
            self.cerebellum_area_surfs=self.cerebellum_area_surfs.outputs(execution),
            self.cerebellum_area_metrics=self.cerebellum_area_metrics.outputs(execution),
        )
        return ret


class CiftiResampleOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_resample(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    cifti_out: OutputPathType
    """the output cifti file"""
    volume_predilate: VolumePredilateOutputs
    """Subcommand outputs"""
    surface_postdilate: SurfacePostdilateOutputs
    """Subcommand outputs"""
    affine: AffineOutputs
    """Subcommand outputs"""
    warpfield: WarpfieldOutputs
    """Subcommand outputs"""
    left_spheres: LeftSpheresOutputs
    """Subcommand outputs"""
    right_spheres: RightSpheresOutputs
    """Subcommand outputs"""
    cerebellum_spheres: CerebellumSpheresOutputs
    """Subcommand outputs"""


def cifti_resample(
    cifti_in: InputPathType,
    direction: str,
    cifti_template: InputPathType,
    template_direction: str,
    surface_method: str,
    volume_method: str,
    cifti_out: InputPathType,
    opt_surface_largest: bool = False,
    volume_predilate: VolumePredilate | None = None,
    surface_postdilate: SurfacePostdilate | None = None,
    affine: Affine | None = None,
    warpfield: Warpfield | None = None,
    left_spheres: LeftSpheres | None = None,
    right_spheres: RightSpheres | None = None,
    cerebellum_spheres: CerebellumSpheres | None = None,
    runner: Runner = None,
) -> CiftiResampleOutputs:
    """
    cifti-resample by Washington University School of Medicin.
    
    Resample a cifti file to a new cifti space.
    
    Resample cifti data to a different brainordinate space. Use COLUMN for the
    direction to resample dscalar, dlabel, or dtseries. Resampling both
    dimensions of a dconn requires running this command twice, once with COLUMN
    and once with ROW. If you are resampling a dconn and your machine has a
    large amount of memory, you might consider using
    -cifti-resample-dconn-memory to avoid writing and rereading an intermediate
    file. The <template-direction> argument should usually be COLUMN, as
    dtseries, dscalar, and dlabel all have brainordinates on that direction. If
    spheres are not specified for a surface structure which exists in the cifti
    files, its data is copied without resampling or dilation. Dilation is done
    with the 'nearest' method, and is done on <new-sphere> for surface data.
    Volume components are padded before dilation so that dilation doesn't run
    into the edge of the component bounding box. If neither -affine nor
    -warpfield are specified, the identity transform is assumed for the volume
    data.
    
    The recommended resampling methods are ADAP_BARY_AREA and CUBIC (cubic
    spline), except for label data which should use ADAP_BARY_AREA and
    ENCLOSING_VOXEL. Using ADAP_BARY_AREA requires specifying an area option to
    each used -*-spheres option.
    
    The <volume-method> argument must be one of the following:
    
    CUBIC
    ENCLOSING_VOXEL
    TRILINEAR
    
    The <surface-method> argument must be one of the following:
    
    ADAP_BARY_AREA
    BARYCENTRIC
    .
    
    Args:
        cifti_in: the cifti file to resample
        direction: the direction of the input that should be resampled, ROW or
            COLUMN
        cifti_template: a cifti file containing the cifti space to resample to
        template_direction: the direction of the template to use as the
            resampling space, ROW or COLUMN
        surface_method: specify a surface resampling method
        volume_method: specify a volume interpolation method
        cifti_out: the output cifti file
        opt_surface_largest: use largest weight instead of weighted average or
            popularity when doing surface resampling
        volume_predilate: dilate the volume components before resampling
        surface_postdilate: dilate the surface components after resampling
        affine: use an affine transformation on the volume components
        warpfield: use a warpfield on the volume components
        left_spheres: specify spheres for left surface resampling
        right_spheres: specify spheres for right surface resampling
        cerebellum_spheres: specify spheres for cerebellum surface resampling
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `CiftiResampleOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CIFTI_RESAMPLE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-resample")
    cargs.append(execution.input_file(cifti_in))
    cargs.append(direction)
    cargs.append(execution.input_file(cifti_template))
    cargs.append(template_direction)
    cargs.append(surface_method)
    cargs.append(volume_method)
    cargs.append(execution.input_file(cifti_out))
    if opt_surface_largest:
        cargs.append("-surface-largest")
    if volume_predilate is not None:
        cargs.extend(["-volume-predilate", *volume_predilate.run(execution)])
    if surface_postdilate is not None:
        cargs.extend(["-surface-postdilate", *surface_postdilate.run(execution)])
    if affine is not None:
        cargs.extend(["-affine", *affine.run(execution)])
    if warpfield is not None:
        cargs.extend(["-warpfield", *warpfield.run(execution)])
    if left_spheres is not None:
        cargs.extend(["-left-spheres", *left_spheres.run(execution)])
    if right_spheres is not None:
        cargs.extend(["-right-spheres", *right_spheres.run(execution)])
    if cerebellum_spheres is not None:
        cargs.extend(["-cerebellum-spheres", *cerebellum_spheres.run(execution)])
    ret = CiftiResampleOutputs(
        root=execution.output_file("."),
        cifti_out=execution.output_file(f"{pathlib.Path(cifti_out).name}"),
        volume_predilate=volume_predilate.outputs(execution),
        surface_postdilate=surface_postdilate.outputs(execution),
        affine=affine.outputs(execution),
        warpfield=warpfield.outputs(execution),
        left_spheres=left_spheres.outputs(execution),
        right_spheres=right_spheres.outputs(execution),
        cerebellum_spheres=cerebellum_spheres.outputs(execution),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "Affine",
    "AffineOutputs",
    "CIFTI_RESAMPLE_METADATA",
    "CerebellumAreaMetrics",
    "CerebellumAreaMetricsOutputs",
    "CerebellumAreaSurfs",
    "CerebellumAreaSurfsOutputs",
    "CerebellumSpheres",
    "CerebellumSpheresOutputs",
    "CiftiResampleOutputs",
    "Flirt",
    "FlirtOutputs",
    "LeftAreaMetrics",
    "LeftAreaMetricsOutputs",
    "LeftAreaSurfs",
    "LeftAreaSurfsOutputs",
    "LeftSpheres",
    "LeftSpheresOutputs",
    "RightAreaMetrics",
    "RightAreaMetricsOutputs",
    "RightAreaSurfs",
    "RightAreaSurfsOutputs",
    "RightSpheres",
    "RightSpheresOutputs",
    "SurfacePostdilate",
    "SurfacePostdilateOutputs",
    "VolumePredilate",
    "VolumePredilateOutputs",
    "Warpfield",
    "WarpfieldOutputs",
    "Weighted",
    "WeightedOutputs",
    "WeightedOutputs_",
    "Weighted_",
    "cifti_resample",
]
