# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


CIFTI_CREATE_DENSE_TIMESERIES_METADATA = Metadata(
    id="fdcd4af92a8b4033fa8f554d4c309af7bf6c959b",
    name="cifti-create-dense-timeseries",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class VolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Volume.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Volume:
    """
    volume component
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeOutputs`).
        """
        ret = VolumeOutputs(
            root=execution.output_file("."),
        )
        return ret


class LeftMetricOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LeftMetric.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class LeftMetric:
    """
    metric for left surface
    """
    opt_roi_left_roi_metric: InputPathType | None = None
    """roi of vertices to use from left surface: the ROI as a metric file"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_roi_left_roi_metric is not None:
            cargs.extend(["-roi-left", execution.input_file(self.opt_roi_left_roi_metric)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LeftMetricOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LeftMetricOutputs`).
        """
        ret = LeftMetricOutputs(
            root=execution.output_file("."),
        )
        return ret


class RightMetricOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RightMetric.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class RightMetric:
    """
    metric for left surface
    """
    opt_roi_right_roi_metric: InputPathType | None = None
    """roi of vertices to use from right surface: the ROI as a metric file"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_roi_right_roi_metric is not None:
            cargs.extend(["-roi-right", execution.input_file(self.opt_roi_right_roi_metric)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> RightMetricOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `RightMetricOutputs`).
        """
        ret = RightMetricOutputs(
            root=execution.output_file("."),
        )
        return ret


class CerebellumMetricOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CerebellumMetric.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CerebellumMetric:
    """
    metric for the cerebellum
    """
    opt_roi_cerebellum_roi_metric: InputPathType | None = None
    """roi of vertices to use from right surface: the ROI as a metric file"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_roi_cerebellum_roi_metric is not None:
            cargs.extend(["-roi-cerebellum", execution.input_file(self.opt_roi_cerebellum_roi_metric)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CerebellumMetricOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CerebellumMetricOutputs`).
        """
        ret = CerebellumMetricOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiCreateDenseTimeseriesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_create_dense_timeseries(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    cifti_out: OutputPathType
    """the output cifti file"""
    volume: VolumeOutputs
    """Subcommand outputs"""
    left_metric: LeftMetricOutputs
    """Subcommand outputs"""
    right_metric: RightMetricOutputs
    """Subcommand outputs"""
    cerebellum_metric: CerebellumMetricOutputs
    """Subcommand outputs"""


def cifti_create_dense_timeseries(
    cifti_out: InputPathType,
    volume: Volume | None = None,
    left_metric: LeftMetric | None = None,
    right_metric: RightMetric | None = None,
    cerebellum_metric: CerebellumMetric | None = None,
    opt_timestep_interval: float | int | None = None,
    opt_timestart_start: float | int | None = None,
    opt_unit_unit: str | None = None,
    runner: Runner = None,
) -> CiftiCreateDenseTimeseriesOutputs:
    """
    cifti-create-dense-timeseries by Washington University School of Medicin.
    
    Create a cifti dense timeseries.
    
    All input files must have the same number of columns/subvolumes. Only the
    specified components will be in the output cifti. At least one component
    must be specified.
    
    See -volume-label-import and -volume-help for format details of label volume
    files. The structure-label-volume should have some of the label names from
    this list, all other label names will be ignored:
    
    CORTEX_LEFT
    CORTEX_RIGHT
    CEREBELLUM
    ACCUMBENS_LEFT
    ACCUMBENS_RIGHT
    ALL_GREY_MATTER
    ALL_WHITE_MATTER
    AMYGDALA_LEFT
    AMYGDALA_RIGHT
    BRAIN_STEM
    CAUDATE_LEFT
    CAUDATE_RIGHT
    CEREBELLAR_WHITE_MATTER_LEFT
    CEREBELLAR_WHITE_MATTER_RIGHT
    CEREBELLUM_LEFT
    CEREBELLUM_RIGHT
    CEREBRAL_WHITE_MATTER_LEFT
    CEREBRAL_WHITE_MATTER_RIGHT
    CORTEX
    DIENCEPHALON_VENTRAL_LEFT
    DIENCEPHALON_VENTRAL_RIGHT
    HIPPOCAMPUS_LEFT
    HIPPOCAMPUS_RIGHT
    INVALID
    OTHER
    OTHER_GREY_MATTER
    OTHER_WHITE_MATTER
    PALLIDUM_LEFT
    PALLIDUM_RIGHT
    PUTAMEN_LEFT
    PUTAMEN_RIGHT
    THALAMUS_LEFT
    THALAMUS_RIGHT
    
    The -unit option accepts these values:
    
    SECOND
    HERTZ
    METER
    RADIAN.
    
    Args:
        cifti_out: the output cifti file
        volume: volume component
        left_metric: metric for left surface
        right_metric: metric for left surface
        cerebellum_metric: metric for the cerebellum
        opt_timestep_interval: set the timestep: the timestep, in seconds
            (default 1.0)
        opt_timestart_start: set the start time: the time at the first frame, in
            seconds (default 0.0)
        opt_unit_unit: use a unit other than time: unit identifier (default
            SECOND)
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `CiftiCreateDenseTimeseriesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CIFTI_CREATE_DENSE_TIMESERIES_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-create-dense-timeseries")
    cargs.append(execution.input_file(cifti_out))
    if volume is not None:
        cargs.extend(["-volume", *volume.run(execution)])
    if left_metric is not None:
        cargs.extend(["-left-metric", *left_metric.run(execution)])
    if right_metric is not None:
        cargs.extend(["-right-metric", *right_metric.run(execution)])
    if cerebellum_metric is not None:
        cargs.extend(["-cerebellum-metric", *cerebellum_metric.run(execution)])
    if opt_timestep_interval is not None:
        cargs.extend(["-timestep", str(opt_timestep_interval)])
    if opt_timestart_start is not None:
        cargs.extend(["-timestart", str(opt_timestart_start)])
    if opt_unit_unit is not None:
        cargs.extend(["-unit", opt_unit_unit])
    ret = CiftiCreateDenseTimeseriesOutputs(
        root=execution.output_file("."),
        cifti_out=execution.output_file(f"{pathlib.Path(cifti_out).name}"),
        volume=volume.outputs(execution),
        left_metric=left_metric.outputs(execution),
        right_metric=right_metric.outputs(execution),
        cerebellum_metric=cerebellum_metric.outputs(execution),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CIFTI_CREATE_DENSE_TIMESERIES_METADATA",
    "CerebellumMetric",
    "CerebellumMetricOutputs",
    "CiftiCreateDenseTimeseriesOutputs",
    "LeftMetric",
    "LeftMetricOutputs",
    "RightMetric",
    "RightMetricOutputs",
    "Volume",
    "VolumeOutputs",
    "cifti_create_dense_timeseries",
]
