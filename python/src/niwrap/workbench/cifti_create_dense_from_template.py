# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


CIFTI_CREATE_DENSE_FROM_TEMPLATE_METADATA = Metadata(
    id="6c14ed8c08946c85dda51430bffdb1f4e2cfa097",
    name="cifti-create-dense-from-template",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class SeriesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Series.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Series:
    """
    make a dtseries file instead of a dscalar
    """
    opt_unit_unit: str | None = None
    """select unit for series (default SECOND): unit identifier"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_unit_unit is not None:
            cargs.extend(["-unit", self.opt_unit_unit])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> SeriesOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `SeriesOutputs`).
        """
        ret = SeriesOutputs(
            root=execution.output_file("."),
        )
        return ret


class VolumeAllOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeAll.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class VolumeAll:
    """
    specify an input volume file for all voxel data
    """
    opt_from_cropped: bool = False
    """the input is cropped to the size of the voxel data in the template
    file"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_from_cropped:
            cargs.append("-from-cropped")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeAllOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeAllOutputs`).
        """
        ret = VolumeAllOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Cifti.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Cifti:
    """
    use input data from a cifti file
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiOutputs`).
        """
        ret = CiftiOutputs(
            root=execution.output_file("."),
        )
        return ret


class MetricOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Metric.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Metric:
    """
    use input data from a metric file
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MetricOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MetricOutputs`).
        """
        ret = MetricOutputs(
            root=execution.output_file("."),
        )
        return ret


class LabelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Label.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Label:
    """
    use input data from surface label files
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LabelOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LabelOutputs`).
        """
        ret = LabelOutputs(
            root=execution.output_file("."),
        )
        return ret


class VolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Volume.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Volume:
    """
    use a volume file for a single volume structure's data
    """
    opt_from_cropped: bool = False
    """the input is cropped to the size of the volume structure"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_from_cropped:
            cargs.append("-from-cropped")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeOutputs`).
        """
        ret = VolumeOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiCreateDenseFromTemplateOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_create_dense_from_template(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    cifti_out: OutputPathType
    """the output cifti file"""
    series: SeriesOutputs
    """Subcommand outputs"""
    volume_all: VolumeAllOutputs
    """Subcommand outputs"""
    cifti: CiftiOutputs
    """Subcommand outputs"""
    metric: MetricOutputs
    """Subcommand outputs"""
    label: LabelOutputs
    """Subcommand outputs"""
    volume: VolumeOutputs
    """Subcommand outputs"""


def cifti_create_dense_from_template(
    template_cifti: InputPathType,
    cifti_out: InputPathType,
    series: Series | None = None,
    volume_all: VolumeAll | None = None,
    opt_label_collision_action: str | None = None,
    cifti: list[Cifti] = None,
    metric: list[Metric] = None,
    label: list[Label] = None,
    volume: list[Volume] = None,
    runner: Runner = None,
) -> CiftiCreateDenseFromTemplateOutputs:
    """
    cifti-create-dense-from-template by Washington University School of Medicin.
    
    Create cifti with matching dense map.
    
    This command helps you make a new dscalar, dtseries, or dlabel cifti file
    that matches the brainordinate space used in another cifti file. The
    template file must have the desired brainordinate space in the mapping along
    the column direction (for dtseries, dscalar, dlabel, and symmetric dconn
    this is always the case). All input cifti files must have a brain models
    mapping along column and use the same volume space and/or surface vertex
    count as the template for structures that they contain. If any input files
    contain label data, then input files with non-label data are not allowed,
    and the -series option may not be used.
    
    Any structure that isn't covered by an input is filled with zeros or the
    unlabeled key.
    
    The <structure> argument of -metric, -label or -volume must be one of the
    following:
    
    CORTEX_LEFT
    CORTEX_RIGHT
    CEREBELLUM
    ACCUMBENS_LEFT
    ACCUMBENS_RIGHT
    ALL_GREY_MATTER
    ALL_WHITE_MATTER
    AMYGDALA_LEFT
    AMYGDALA_RIGHT
    BRAIN_STEM
    CAUDATE_LEFT
    CAUDATE_RIGHT
    CEREBELLAR_WHITE_MATTER_LEFT
    CEREBELLAR_WHITE_MATTER_RIGHT
    CEREBELLUM_LEFT
    CEREBELLUM_RIGHT
    CEREBRAL_WHITE_MATTER_LEFT
    CEREBRAL_WHITE_MATTER_RIGHT
    CORTEX
    DIENCEPHALON_VENTRAL_LEFT
    DIENCEPHALON_VENTRAL_RIGHT
    HIPPOCAMPUS_LEFT
    HIPPOCAMPUS_RIGHT
    INVALID
    OTHER
    OTHER_GREY_MATTER
    OTHER_WHITE_MATTER
    PALLIDUM_LEFT
    PALLIDUM_RIGHT
    PUTAMEN_LEFT
    PUTAMEN_RIGHT
    THALAMUS_LEFT
    THALAMUS_RIGHT
    
    The argument to -unit must be one of the following:
    
    SECOND
    HERTZ
    METER
    RADIAN.
    
    Args:
        template_cifti: file to match brainordinates of
        cifti_out: the output cifti file
        series: make a dtseries file instead of a dscalar
        volume_all: specify an input volume file for all voxel data
        opt_label_collision_action: how to handle conflicts between label keys:
            'ERROR', 'SURFACES_FIRST', or 'LEGACY', default 'ERROR', use 'LEGACY' to
            match v1.4.2 and earlier
        cifti: use input data from a cifti file
        metric: use input data from a metric file
        label: use input data from surface label files
        volume: use a volume file for a single volume structure's data
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `CiftiCreateDenseFromTemplateOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CIFTI_CREATE_DENSE_FROM_TEMPLATE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-create-dense-from-template")
    cargs.append(execution.input_file(template_cifti))
    cargs.append(execution.input_file(cifti_out))
    if series is not None:
        cargs.extend(["-series", *series.run(execution)])
    if volume_all is not None:
        cargs.extend(["-volume-all", *volume_all.run(execution)])
    if opt_label_collision_action is not None:
        cargs.extend(["-label-collision", opt_label_collision_action])
    if cifti is not None:
        cargs.extend(["-cifti", *[a for c in [s.run(execution) for s in cifti] for a in c]])
    if metric is not None:
        cargs.extend(["-metric", *[a for c in [s.run(execution) for s in metric] for a in c]])
    if label is not None:
        cargs.extend(["-label", *[a for c in [s.run(execution) for s in label] for a in c]])
    if volume is not None:
        cargs.extend(["-volume", *[a for c in [s.run(execution) for s in volume] for a in c]])
    ret = CiftiCreateDenseFromTemplateOutputs(
        root=execution.output_file("."),
        cifti_out=execution.output_file(f"{pathlib.Path(cifti_out).name}"),
        series=series.outputs(execution),
        volume_all=volume_all.outputs(execution),
        cifti=[cifti.outputs(execution) for cifti in cifti],
        metric=[metric.outputs(execution) for metric in metric],
        label=[label.outputs(execution) for label in label],
        volume=[volume.outputs(execution) for volume in volume],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CIFTI_CREATE_DENSE_FROM_TEMPLATE_METADATA",
    "Cifti",
    "CiftiCreateDenseFromTemplateOutputs",
    "CiftiOutputs",
    "Label",
    "LabelOutputs",
    "Metric",
    "MetricOutputs",
    "Series",
    "SeriesOutputs",
    "Volume",
    "VolumeAll",
    "VolumeAllOutputs",
    "VolumeOutputs",
    "cifti_create_dense_from_template",
]
