# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

SURFACE_CURVATURE_METADATA = Metadata(
    id="cce0bb8c8fcf20cbfd8e49e5616bebb29a0477e9",
    name="surface-curvature",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class SurfaceCurvatureOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surface_curvature(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    mean_out: OutputPathType
    """mean curvature metric"""
    gauss_out: OutputPathType
    """gaussian curvature metric"""


def surface_curvature(
    surface: InputPathType,
    mean_out: InputPathType,
    gauss_out: InputPathType,
    opt_mean: bool = False,
    opt_gauss: bool = False,
    runner: Runner = None,
) -> SurfaceCurvatureOutputs:
    """
    surface-curvature by Washington University School of Medicin.
    
    Calculate curvature of surface.
    
    Compute the curvature of the surface, using the method from:
    Interactive Texture Mapping by J. Maillot, Yahia, and Verroust, 1993.
    ACM-0-98791-601-8/93/008.
    
    Args:
        surface: the surface to compute the curvature of
        mean_out: mean curvature metric
        gauss_out: gaussian curvature metric
        opt_mean: output mean curvature
        opt_gauss: output gaussian curvature
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `SurfaceCurvatureOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURFACE_CURVATURE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-surface-curvature")
    cargs.append(execution.input_file(surface))
    if opt_mean:
        cargs.append("-mean")
    cargs.append(execution.input_file(mean_out))
    if opt_gauss:
        cargs.append("-gauss")
    cargs.append(execution.input_file(gauss_out))
    ret = SurfaceCurvatureOutputs(
        root=execution.output_file("."),
        mean_out=execution.output_file(f"{pathlib.Path(mean_out).name}"),
        gauss_out=execution.output_file(f"{pathlib.Path(gauss_out).name}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SURFACE_CURVATURE_METADATA",
    "SurfaceCurvatureOutputs",
    "surface_curvature",
]
