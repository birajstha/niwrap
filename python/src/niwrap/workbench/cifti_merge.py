# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


CIFTI_MERGE_METADATA = Metadata(
    id="0da69f9e8121dbd36d067a3055f920605cef6ff8",
    name="cifti-merge",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class CiftiMergeUpToOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CiftiMergeUpTo.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CiftiMergeUpTo:
    """
    use an inclusive range of indices
    """
    opt_reverse: bool = False
    """use the range in reverse order"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_reverse:
            cargs.append("-reverse")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiMergeUpToOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiMergeUpToOutputs`).
        """
        ret = CiftiMergeUpToOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiMergeIndexOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CiftiMergeIndex.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.up_to: CiftiMergeUpToOutputs
    """Subcommand outputs"""


@dataclasses.dataclass
class CiftiMergeIndex:
    """
    select a single index to use
    """
    up_to: CiftiMergeUpTo | None = None
    """use an inclusive range of indices"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.up_to is not None:
            cargs.extend(["-up-to", *self.up_to.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiMergeIndexOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiMergeIndexOutputs`).
        """
        ret = CiftiMergeIndexOutputs(
            root=execution.output_file("."),
            self.up_to=self.up_to.outputs(execution),
        )
        return ret


class CiftiMergeCiftiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CiftiMergeCifti.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.index: typing.List[CiftiMergeIndexOutputs]
    """Subcommand outputs"""


@dataclasses.dataclass
class CiftiMergeCifti:
    """
    specify an input cifti file
    """
    index: list[CiftiMergeIndex] = None
    """select a single index to use"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.index is not None:
            cargs.extend(["-index", *[a for c in [s.run(execution) for s in self.index] for a in c]])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiMergeCiftiOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiMergeCiftiOutputs`).
        """
        ret = CiftiMergeCiftiOutputs(
            root=execution.output_file("."),
            self.index=[self.index.outputs(execution) for self.index in self.index],
        )
        return ret


class CiftiMergeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_merge(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    cifti_out: OutputPathType
    """output cifti file"""
    cifti: typing.List[CiftiMergeCiftiOutputs]
    """Subcommand outputs"""


def cifti_merge(
    cifti_out: InputPathType,
    opt_direction_direction: str | None = None,
    opt_mem_limit_limit_gb: float | int | None = None,
    cifti: list[CiftiMergeCifti] = None,
    runner: Runner = None,
) -> CiftiMergeOutputs:
    """
    cifti-merge by Washington University School of Medicin.
    
    Merge or split on series, scalar, or label dimensions.
    
    Given input CIFTI files for which mappings along the selected direction are
    the same type, all either series, scalars, or labels, and the other
    dimensions are index-compatible, this command concatenates the data in the
    specified indices/ranges along the selected direction (by default, on
    typical 2D cifti, concatenate horizontally, so rows become longer). The
    direction can be either an integer starting from 1, or the strings 'ROW' or
    'COLUMN'.
    
    Example: wb_command -cifti-merge out.dtseries.nii -cifti first.dtseries.nii
    -index 1 -cifti second.dtseries.nii
    
    This example would take the first column from first.dtseries.nii, followed
    by all columns from second.dtseries.nii, and write these columns to
    out.dtseries.nii. .
    
    Args:
        cifti_out: output cifti file
        opt_direction_direction: merge in a direction other than along rows: the
            dimension to split/concatenate along, default ROW
        opt_mem_limit_limit_gb: restrict memory used for file reading
            efficiency: memory limit in gigabytes
        cifti: specify an input cifti file
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `CiftiMergeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CIFTI_MERGE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-merge")
    cargs.append(execution.input_file(cifti_out))
    if opt_direction_direction is not None:
        cargs.extend(["-direction", opt_direction_direction])
    if opt_mem_limit_limit_gb is not None:
        cargs.extend(["-mem-limit", str(opt_mem_limit_limit_gb)])
    if cifti is not None:
        cargs.extend(["-cifti", *[a for c in [s.run(execution) for s in cifti] for a in c]])
    ret = CiftiMergeOutputs(
        root=execution.output_file("."),
        cifti_out=execution.output_file(f"{pathlib.Path(cifti_out).name}"),
        cifti=[cifti.outputs(execution) for cifti in cifti],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CIFTI_MERGE_METADATA",
    "CiftiMergeCifti",
    "CiftiMergeCiftiOutputs",
    "CiftiMergeIndex",
    "CiftiMergeIndexOutputs",
    "CiftiMergeOutputs",
    "CiftiMergeUpTo",
    "CiftiMergeUpToOutputs",
    "cifti_merge",
]
