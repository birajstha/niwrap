# This file was auto generated by styx
# Do not edit this file directly

import dataclasses
import pathlib
import typing

from styxdefs import *


METRIC_CONVERT_METADATA = Metadata(
    id="527069bdc5b014831c6b67e2e761ba825f28854f",
    name="metric-convert",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


@dataclasses.dataclass
class MetricConvertToNifti:
    """
    convert metric to nifti
    """
    nifti_out: InputPathType
    """the output nifti file"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append(execution.input_file(self.nifti_out))
        return cargs


@dataclasses.dataclass
class MetricConvertFromNifti:
    """
    convert nifti to metric
    """
    metric_out: InputPathType
    """the output metric file"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append(execution.input_file(self.metric_out))
        return cargs


class MetricConvertOutputs(typing.NamedTuple):
    """
    Output object returned when calling `metric_convert(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def metric_convert(
    to_nifti: MetricConvertToNifti | None = None,
    from_nifti: MetricConvertFromNifti | None = None,
    runner: Runner = None,
) -> MetricConvertOutputs:
    """
    metric-convert by Washington University School of Medicin.
    
    Convert metric file to fake nifti.
    
    The purpose of this command is to convert between metric files and nifti1 so
    that gifti-unaware programs can operate on the data. You must specify
    exactly one of the options.
    
    Args:
        to_nifti: convert metric to nifti
        from_nifti: convert nifti to metric
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `MetricConvertOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(METRIC_CONVERT_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-metric-convert")
    if to_nifti is not None:
        cargs.extend(["-to-nifti", *to_nifti.run(execution)])
    if from_nifti is not None:
        cargs.extend(["-from-nifti", *from_nifti.run(execution)])
    ret = MetricConvertOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "METRIC_CONVERT_METADATA",
    "MetricConvertFromNifti",
    "MetricConvertOutputs",
    "MetricConvertToNifti",
    "metric_convert",
]
