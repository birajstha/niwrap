# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


SCENE_FILE_MERGE_METADATA = Metadata(
    id="255f84b5d6fd969bf1ef23f3553f3749eb597330",
    name="scene-file-merge",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class SceneFileMergeUpToOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SceneFileMergeUpTo.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class SceneFileMergeUpTo:
    """
    use an inclusive range of scenes
    """
    opt_reverse: bool = False
    """use the range in reverse order"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_reverse:
            cargs.append("-reverse")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> SceneFileMergeUpToOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `SceneFileMergeUpToOutputs`).
        """
        ret = SceneFileMergeUpToOutputs(
            root=execution.output_file("."),
        )
        return ret


class SceneFileMergeSceneOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SceneFileMergeScene.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.up_to: SceneFileMergeUpToOutputs
    """Subcommand outputs"""


@dataclasses.dataclass
class SceneFileMergeScene:
    """
    specify a scene to use
    """
    up_to: SceneFileMergeUpTo | None = None
    """use an inclusive range of scenes"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.up_to is not None:
            cargs.extend(["-up-to", *self.up_to.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> SceneFileMergeSceneOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `SceneFileMergeSceneOutputs`).
        """
        ret = SceneFileMergeSceneOutputs(
            root=execution.output_file("."),
            self.up_to=self.up_to.outputs(execution),
        )
        return ret


class SceneFileMergeSceneFileOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SceneFileMergeSceneFile.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.scene: typing.List[SceneFileMergeSceneOutputs]
    """Subcommand outputs"""


@dataclasses.dataclass
class SceneFileMergeSceneFile:
    """
    specify a scene file to use scenes from
    """
    scene: list[SceneFileMergeScene] = None
    """specify a scene to use"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.scene is not None:
            cargs.extend(["-scene", *[a for c in [s.run(execution) for s in self.scene] for a in c]])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> SceneFileMergeSceneFileOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `SceneFileMergeSceneFileOutputs`).
        """
        ret = SceneFileMergeSceneFileOutputs(
            root=execution.output_file("."),
            self.scene=[self.scene.outputs(execution) for self.scene in self.scene],
        )
        return ret


class SceneFileMergeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `scene_file_merge(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    scene_file: typing.List[SceneFileMergeSceneFileOutputs]
    """Subcommand outputs"""


def scene_file_merge(
    scene_file_out: str,
    scene_file: list[SceneFileMergeSceneFile] = None,
    runner: Runner = None,
) -> SceneFileMergeOutputs:
    """
    scene-file-merge by Washington University School of Medicin.
    
    Rearrange scenes into a new file.
    
    Takes one or more scene files and constructs a new scene file by
    concatenating specified scenes from them.
    
    Example: wb_command -scene-file-merge out.scene -scene-file first.scene
    -scene 1 -scene-file second.scene
    
    This example would take the first scene from first.scene, followed by all
    scenes from second.scene, and write these scenes to out.scene.
    
    Args:
        scene_file_out: output - the output scene file
        scene_file: specify a scene file to use scenes from
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `SceneFileMergeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SCENE_FILE_MERGE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-scene-file-merge")
    cargs.append(scene_file_out)
    if scene_file is not None:
        cargs.extend(["-scene-file", *[a for c in [s.run(execution) for s in scene_file] for a in c]])
    ret = SceneFileMergeOutputs(
        root=execution.output_file("."),
        scene_file=[scene_file.outputs(execution) for scene_file in scene_file],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SCENE_FILE_MERGE_METADATA",
    "SceneFileMergeOutputs",
    "SceneFileMergeScene",
    "SceneFileMergeSceneFile",
    "SceneFileMergeSceneFileOutputs",
    "SceneFileMergeSceneOutputs",
    "SceneFileMergeUpTo",
    "SceneFileMergeUpToOutputs",
    "scene_file_merge",
]
