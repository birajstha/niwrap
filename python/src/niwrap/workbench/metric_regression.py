# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


METRIC_REGRESSION_METADATA = Metadata(
    id="743363990e085cc8ef967271e0bdde3ccf711d13",
    name="metric-regression",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class RemoveOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Remove.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Remove:
    """
    specify a metric to regress out
    """
    opt_remove_column_column: str | None = None
    """select a column to use, rather than all: the column number or name"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_remove_column_column is not None:
            cargs.extend(["-remove-column", self.opt_remove_column_column])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> RemoveOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `RemoveOutputs`).
        """
        ret = RemoveOutputs(
            root=execution.output_file("."),
        )
        return ret


class KeepOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Keep.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Keep:
    """
    specify a metric to include in regression, but not remove
    """
    opt_keep_column_column: str | None = None
    """select a column to use, rather than all: the column number or name"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_keep_column_column is not None:
            cargs.extend(["-keep-column", self.opt_keep_column_column])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> KeepOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `KeepOutputs`).
        """
        ret = KeepOutputs(
            root=execution.output_file("."),
        )
        return ret


class MetricRegressionOutputs(typing.NamedTuple):
    """
    Output object returned when calling `metric_regression(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    metric_out: OutputPathType
    """the output metric"""
    remove: RemoveOutputs
    """Subcommand outputs"""
    keep: KeepOutputs
    """Subcommand outputs"""


def metric_regression(
    metric_in: InputPathType,
    metric_out: InputPathType,
    opt_roi_roi_metric: InputPathType | None = None,
    opt_column_column: str | None = None,
    remove: list[Remove] = None,
    keep: list[Keep] = None,
    runner: Runner = None,
) -> MetricRegressionOutputs:
    """
    metric-regression by Washington University School of Medicin.
    
    Regress spatial map out of a metric file.
    
    For each regressor, its mean across the surface is subtracted from its data.
    Each input map is then regressed against these, and a constant term. The
    resulting regressed slopes of all regressors specified with -remove are
    multiplied with their respective regressor maps, and these are subtracted
    from the input map.
    
    Args:
        metric_in: the metric to regress from
        metric_out: the output metric
        opt_roi_roi_metric: only regress inside an roi: the area to use for
            regression, as a metric
        opt_column_column: select a single column to regress from: the column
            number or name
        remove: specify a metric to regress out
        keep: specify a metric to include in regression, but not remove
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `MetricRegressionOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(METRIC_REGRESSION_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-metric-regression")
    cargs.append(execution.input_file(metric_in))
    cargs.append(execution.input_file(metric_out))
    if opt_roi_roi_metric is not None:
        cargs.extend(["-roi", execution.input_file(opt_roi_roi_metric)])
    if opt_column_column is not None:
        cargs.extend(["-column", opt_column_column])
    if remove is not None:
        cargs.extend(["-remove", *[a for c in [s.run(execution) for s in remove] for a in c]])
    if keep is not None:
        cargs.extend(["-keep", *[a for c in [s.run(execution) for s in keep] for a in c]])
    ret = MetricRegressionOutputs(
        root=execution.output_file("."),
        metric_out=execution.output_file(f"{pathlib.Path(metric_out).name}"),
        remove=[remove.outputs(execution) for remove in remove],
        keep=[keep.outputs(execution) for keep in keep],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "Keep",
    "KeepOutputs",
    "METRIC_REGRESSION_METADATA",
    "MetricRegressionOutputs",
    "Remove",
    "RemoveOutputs",
    "metric_regression",
]
