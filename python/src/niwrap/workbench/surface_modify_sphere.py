# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

SURFACE_MODIFY_SPHERE_METADATA = Metadata(
    id="13d798b8fb25c0415154a9512116161dd26eed3e",
    name="surface-modify-sphere",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class SurfaceModifySphereOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surface_modify_sphere(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    sphere_out: OutputPathType
    """the output sphere"""


def surface_modify_sphere(
    sphere_in: InputPathType,
    radius: float | int,
    sphere_out: str,
    opt_recenter: bool = False,
    runner: Runner = None,
) -> SurfaceModifySphereOutputs:
    """
    surface-modify-sphere by Washington University School of Medicin.
    
    Change radius and optionally recenter a sphere.
    
    This command may be useful if you have used -surface-resample to resample a
    sphere, which can suffer from problems generally not present in
    -surface-sphere-project-unproject. If the sphere should already be centered
    around the origin, using -recenter may still shift it slightly before
    changing the radius, which is likely to be undesireable.
    
    If <sphere-in> is not close to spherical, or not centered around the origin
    and -recenter is not used, a warning is printed.
    
    Args:
        sphere_in: the sphere to modify.
        radius: the radius the output sphere should have.
        sphere_out: the output sphere.
        opt_recenter: recenter the sphere by means of the bounding box.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfaceModifySphereOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURFACE_MODIFY_SPHERE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-surface-modify-sphere")
    cargs.append(execution.input_file(sphere_in))
    cargs.append(str(radius))
    cargs.append(sphere_out)
    if opt_recenter:
        cargs.append("-recenter")
    ret = SurfaceModifySphereOutputs(
        root=execution.output_file("."),
        sphere_out=execution.output_file(f"{sphere_out}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SURFACE_MODIFY_SPHERE_METADATA",
    "SurfaceModifySphereOutputs",
    "surface_modify_sphere",
]
