# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


VOLUME_MERGE_METADATA = Metadata(
    id="e4d33d90dc9e26a37d178c6ceeab8d2a0bb16290",
    name="volume-merge",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class VolumeMergeUpToOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeMergeUpTo.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class VolumeMergeUpTo:
    """
    use an inclusive range of subvolumes
    """
    opt_reverse: bool = False
    """use the range in reverse order"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_reverse:
            cargs.append("-reverse")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeMergeUpToOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeMergeUpToOutputs`).
        """
        ret = VolumeMergeUpToOutputs(
            root=execution.output_file("."),
        )
        return ret


class VolumeMergeSubvolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeMergeSubvolume.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.up_to: VolumeMergeUpToOutputs
    """Subcommand outputs"""


@dataclasses.dataclass
class VolumeMergeSubvolume:
    """
    select a single subvolume to use
    """
    up_to: VolumeMergeUpTo | None = None
    """use an inclusive range of subvolumes"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.up_to is not None:
            cargs.extend(["-up-to", *self.up_to.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeMergeSubvolumeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeMergeSubvolumeOutputs`).
        """
        ret = VolumeMergeSubvolumeOutputs(
            root=execution.output_file("."),
            self.up_to=self.up_to.outputs(execution),
        )
        return ret


class VolumeMergeVolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeMergeVolume.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.subvolume: typing.List[VolumeMergeSubvolumeOutputs]
    """Subcommand outputs"""


@dataclasses.dataclass
class VolumeMergeVolume:
    """
    specify an input volume file
    """
    subvolume: list[VolumeMergeSubvolume] = None
    """select a single subvolume to use"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.subvolume is not None:
            cargs.extend(["-subvolume", *[a for c in [s.run(execution) for s in self.subvolume] for a in c]])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeMergeVolumeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeMergeVolumeOutputs`).
        """
        ret = VolumeMergeVolumeOutputs(
            root=execution.output_file("."),
            self.subvolume=[self.subvolume.outputs(execution) for self.subvolume in self.subvolume],
        )
        return ret


class VolumeMergeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_merge(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    volume_out: OutputPathType
    """the output volume file"""
    volume: typing.List[VolumeMergeVolumeOutputs]
    """Subcommand outputs"""


def volume_merge(
    volume_out: InputPathType,
    volume: list[VolumeMergeVolume] = None,
    runner: Runner = None,
) -> VolumeMergeOutputs:
    """
    volume-merge by Washington University School of Medicin.
    
    Merge volume files into a new file.
    
    Takes one or more volume files and constructs a new volume file by
    concatenating subvolumes from them. The input volume files must have the
    same volume space.
    
    Example: wb_command -volume-merge out.nii -volume first.nii -subvolume 1
    -volume second.nii
    
    This example would take the first subvolume from first.nii, followed by all
    subvolumes from second.nii, and write these to out.nii.
    
    Args:
        volume_out: the output volume file
        volume: specify an input volume file
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `VolumeMergeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VOLUME_MERGE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-merge")
    cargs.append(execution.input_file(volume_out))
    if volume is not None:
        cargs.extend(["-volume", *[a for c in [s.run(execution) for s in volume] for a in c]])
    ret = VolumeMergeOutputs(
        root=execution.output_file("."),
        volume_out=execution.output_file(f"{pathlib.Path(volume_out).name}"),
        volume=[volume.outputs(execution) for volume in volume],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "VOLUME_MERGE_METADATA",
    "VolumeMergeOutputs",
    "VolumeMergeSubvolume",
    "VolumeMergeSubvolumeOutputs",
    "VolumeMergeUpTo",
    "VolumeMergeUpToOutputs",
    "VolumeMergeVolume",
    "VolumeMergeVolumeOutputs",
    "volume_merge",
]
