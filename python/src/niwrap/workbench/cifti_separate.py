# This file was auto generated by styx
# Do not edit this file directly

import dataclasses
import pathlib
import typing

from styxdefs import *


CIFTI_SEPARATE_METADATA = Metadata(
    id="e9badfe1e47d0bc56af787769753d71bb546d660",
    name="cifti-separate",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


@dataclasses.dataclass
class CiftiSeparateVolumeAll:
    """
    separate all volume structures into a volume file
    """
    volume_out: InputPathType
    """the output volume"""
    opt_roi: bool = False
    """also output the roi of which voxels have data"""
    roi_out: InputPathType
    """the roi output volume"""
    opt_label: bool = False
    """output a volume label file indicating the location of structures"""
    label_out: InputPathType
    """the label output volume"""
    opt_crop: bool = False
    """crop volume to the size of the data rather than using the original volume
    size"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append(execution.input_file(self.volume_out))
        if self.opt_roi:
            cargs.append("-roi")
        cargs.append(execution.input_file(self.roi_out))
        if self.opt_label:
            cargs.append("-label")
        cargs.append(execution.input_file(self.label_out))
        if self.opt_crop:
            cargs.append("-crop")
        return cargs


@dataclasses.dataclass
class CiftiSeparateLabel:
    """
    separate a surface model into a surface label file
    """
    label_out: InputPathType
    """the output label file"""
    opt_roi: bool = False
    """also output the roi of which vertices have data"""
    roi_out: InputPathType
    """the roi output metric"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append(execution.input_file(self.label_out))
        if self.opt_roi:
            cargs.append("-roi")
        cargs.append(execution.input_file(self.roi_out))
        return cargs


@dataclasses.dataclass
class CiftiSeparateMetric:
    """
    separate a surface model into a metric file
    """
    metric_out: InputPathType
    """the output metric"""
    opt_roi: bool = False
    """also output the roi of which vertices have data"""
    roi_out: InputPathType
    """the roi output metric"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append(execution.input_file(self.metric_out))
        if self.opt_roi:
            cargs.append("-roi")
        cargs.append(execution.input_file(self.roi_out))
        return cargs


@dataclasses.dataclass
class CiftiSeparateVolume:
    """
    separate a volume structure into a volume file
    """
    volume_out: InputPathType
    """the output volume"""
    opt_roi: bool = False
    """also output the roi of which voxels have data"""
    roi_out: InputPathType
    """the roi output volume"""
    opt_crop: bool = False
    """crop volume to the size of the component rather than using the original
    volume size"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append(execution.input_file(self.volume_out))
        if self.opt_roi:
            cargs.append("-roi")
        cargs.append(execution.input_file(self.roi_out))
        if self.opt_crop:
            cargs.append("-crop")
        return cargs


class CiftiSeparateOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_separate(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def cifti_separate(
    cifti_in: InputPathType,
    direction: str,
    volume_all: CiftiSeparateVolumeAll | None = None,
    label: list[CiftiSeparateLabel] = None,
    metric: list[CiftiSeparateMetric] = None,
    volume: list[CiftiSeparateVolume] = None,
    runner: Runner = None,
) -> CiftiSeparateOutputs:
    """
    cifti-separate by Washington University School of Medicin.
    
    Write a cifti structure as metric, label or volume.
    
    For dtseries, dscalar, and dlabel, use COLUMN for <direction>, and if you
    have a symmetric dconn, COLUMN is more efficient.
    
    You must specify at least one of -metric, -volume-all, -volume, or -label
    for this command to do anything. Output volumes will spatially line up with
    their original positions, whether or not they are cropped. Volume files
    produced by separating a dlabel file, or from the -label suboption of
    -volume-all, will be label volumes, see -volume-help.
    
    For each <structure> argument, use one of the following strings:
    
    CORTEX_LEFT
    CORTEX_RIGHT
    CEREBELLUM
    ACCUMBENS_LEFT
    ACCUMBENS_RIGHT
    ALL_GREY_MATTER
    ALL_WHITE_MATTER
    AMYGDALA_LEFT
    AMYGDALA_RIGHT
    BRAIN_STEM
    CAUDATE_LEFT
    CAUDATE_RIGHT
    CEREBELLAR_WHITE_MATTER_LEFT
    CEREBELLAR_WHITE_MATTER_RIGHT
    CEREBELLUM_LEFT
    CEREBELLUM_RIGHT
    CEREBRAL_WHITE_MATTER_LEFT
    CEREBRAL_WHITE_MATTER_RIGHT
    CORTEX
    DIENCEPHALON_VENTRAL_LEFT
    DIENCEPHALON_VENTRAL_RIGHT
    HIPPOCAMPUS_LEFT
    HIPPOCAMPUS_RIGHT
    INVALID
    OTHER
    OTHER_GREY_MATTER
    OTHER_WHITE_MATTER
    PALLIDUM_LEFT
    PALLIDUM_RIGHT
    PUTAMEN_LEFT
    PUTAMEN_RIGHT
    THALAMUS_LEFT
    THALAMUS_RIGHT.
    
    Args:
        cifti_in: the cifti to separate a component of
        direction: which direction to separate into components, ROW or COLUMN
        volume_all: separate all volume structures into a volume file
        label: separate a surface model into a surface label file
        metric: separate a surface model into a metric file
        volume: separate a volume structure into a volume file
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `CiftiSeparateOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CIFTI_SEPARATE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-separate")
    cargs.append(execution.input_file(cifti_in))
    cargs.append(direction)
    if volume_all is not None:
        cargs.extend(["-volume-all", *volume_all.run(execution)])
    if label is not None:
        cargs.extend(["-label", *[a for c in [s.run(execution) for s in label] for a in c]])
    if metric is not None:
        cargs.extend(["-metric", *[a for c in [s.run(execution) for s in metric] for a in c]])
    if volume is not None:
        cargs.extend(["-volume", *[a for c in [s.run(execution) for s in volume] for a in c]])
    ret = CiftiSeparateOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CIFTI_SEPARATE_METADATA",
    "CiftiSeparateLabel",
    "CiftiSeparateMetric",
    "CiftiSeparateOutputs",
    "CiftiSeparateVolume",
    "CiftiSeparateVolumeAll",
    "cifti_separate",
]
