# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import dataclasses
import pathlib
import typing

CIFTI_CREATE_SCALAR_SERIES_METADATA = Metadata(
    id="8b5bf707da034f5c7699e95b2e4ce6f6c2b6550b",
    name="cifti-create-scalar-series",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


@dataclasses.dataclass
class CiftiCreateScalarSeriesSeries:
    """
    set the units and values of the series
    """
    unit: str
    """the unit to use"""
    start: float | int
    """the value at the first series point"""
    step: float | int
    """the interval between series points"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append(self.unit)
        cargs.append(str(self.start))
        cargs.append(str(self.step))
        return cargs


class CiftiCreateScalarSeriesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_create_scalar_series(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    cifti_out: OutputPathType
    """output cifti file"""


def cifti_create_scalar_series(
    input_: str,
    cifti_out: InputPathType,
    opt_transpose: bool = False,
    opt_name_file_file: str | None = None,
    series: CiftiCreateScalarSeriesSeries | None = None,
    runner: Runner = None,
) -> CiftiCreateScalarSeriesOutputs:
    """
    cifti-create-scalar-series by Washington University School of Medicin.
    
    Import series data into cifti.
    
    Convert a text file containing series of equal length into a cifti file. The
    text file should have lines made up of numbers separated by whitespace, with
    no extra newlines between lines.
    
    The <unit> argument must be one of the following:
    
    SECOND
    HERTZ
    METER
    RADIAN.
    
    Args:
        input_: input file.
        cifti_out: output cifti file.
        opt_transpose: use if the rows of the text file are along the scalar\
            dimension.
        opt_name_file_file: use a text file to set names on scalar dimension:\
            text file containing names, one per line.
        series: set the units and values of the series.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CiftiCreateScalarSeriesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CIFTI_CREATE_SCALAR_SERIES_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-create-scalar-series")
    cargs.append(input_)
    cargs.append(execution.input_file(cifti_out))
    if opt_transpose:
        cargs.append("-transpose")
    if opt_name_file_file is not None:
        cargs.extend(["-name-file", opt_name_file_file])
    if series is not None:
        cargs.extend(["-series", *series.run(execution)])
    ret = CiftiCreateScalarSeriesOutputs(
        root=execution.output_file("."),
        cifti_out=execution.output_file(f"{pathlib.Path(cifti_out).name}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CIFTI_CREATE_SCALAR_SERIES_METADATA",
    "CiftiCreateScalarSeriesOutputs",
    "CiftiCreateScalarSeriesSeries",
    "cifti_create_scalar_series",
]
