# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import dataclasses
import pathlib
import typing

BORDER_MERGE_METADATA = Metadata(
    id="b0b82a23299fbadeccaed2ad3a8723228a4ca80e",
    name="border-merge",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


@dataclasses.dataclass
class BorderMergeUpTo:
    """
    use an inclusive range of borders
    """
    opt_reverse: bool = False
    """use the range in reverse order"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_reverse:
            cargs.append("-reverse")
        return cargs


@dataclasses.dataclass
class BorderMergeSelect:
    """
    select a single border to use
    """
    up_to: BorderMergeUpTo | None = None
    """use an inclusive range of borders"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.up_to is not None:
            cargs.extend(["-up-to", *self.up_to.run(execution)])
        return cargs


@dataclasses.dataclass
class BorderMergeBorder:
    """
    specify an input border file
    """
    select_: list[BorderMergeSelect] = None
    """select a single border to use"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.select_ is not None:
            cargs.extend(["-select", *[a for c in [s.run(execution) for s in self.select_] for a in c]])
        return cargs


class BorderMergeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `border_merge(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    border_file_out: OutputPathType
    """the output border file"""


def border_merge(
    border_file_out: InputPathType,
    border: list[BorderMergeBorder] = None,
    runner: Runner = None,
) -> BorderMergeOutputs:
    """
    border-merge by Washington University School of Medicin.
    
    Merge border files into a new file.
    
    Takes one or more border files and makes a new border file from the borders
    in them.
    
    Example: wb_command -border-merge out.border -border first.border -select 1
    -border second.border
    
    This example would take the first border from first.border, followed by all
    borders from second.border, and write these to out.border.
    
    Args:
        border_file_out: the output border file.
        border: specify an input border file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BorderMergeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(BORDER_MERGE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-border-merge")
    cargs.append(execution.input_file(border_file_out))
    if border is not None:
        cargs.extend(["-border", *[a for c in [s.run(execution) for s in border] for a in c]])
    ret = BorderMergeOutputs(
        root=execution.output_file("."),
        border_file_out=execution.output_file(f"{pathlib.Path(border_file_out).name}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "BORDER_MERGE_METADATA",
    "BorderMergeBorder",
    "BorderMergeOutputs",
    "BorderMergeSelect",
    "BorderMergeUpTo",
    "border_merge",
]
