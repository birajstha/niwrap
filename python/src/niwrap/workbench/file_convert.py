# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


FILE_CONVERT_METADATA = Metadata(
    id="d1e1f2779836a93aec5a47c4c2886f34fca369b9",
    name="file-convert",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class BorderVersionConvertOutputs(typing.NamedTuple):
    """
    Output object returned when calling `BorderVersionConvert.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class BorderVersionConvert:
    """
    write a border file with a different version
    """
    opt_surface_surface: InputPathType | None = None
    """must be specified if the input is version 1: use this surface file for
    structure and number of vertices, ignore borders on other structures"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_surface_surface is not None:
            cargs.extend(["-surface", execution.input_file(self.opt_surface_surface)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> BorderVersionConvertOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `BorderVersionConvertOutputs`).
        """
        ret = BorderVersionConvertOutputs(
            root=execution.output_file("."),
        )
        return ret


class NiftiVersionConvertOutputs(typing.NamedTuple):
    """
    Output object returned when calling `NiftiVersionConvert.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class NiftiVersionConvert:
    """
    write a nifti file with a different version
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> NiftiVersionConvertOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `NiftiVersionConvertOutputs`).
        """
        ret = NiftiVersionConvertOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiVersionConvertOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CiftiVersionConvert.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CiftiVersionConvert:
    """
    write a cifti file with a different version
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiVersionConvertOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiVersionConvertOutputs`).
        """
        ret = CiftiVersionConvertOutputs(
            root=execution.output_file("."),
        )
        return ret


class FileConvertOutputs(typing.NamedTuple):
    """
    Output object returned when calling `file_convert(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    border_version_convert: BorderVersionConvertOutputs
    """Subcommand outputs"""
    nifti_version_convert: NiftiVersionConvertOutputs
    """Subcommand outputs"""
    cifti_version_convert: CiftiVersionConvertOutputs
    """Subcommand outputs"""


def file_convert(
    border_version_convert: BorderVersionConvert | None = None,
    nifti_version_convert: NiftiVersionConvert | None = None,
    cifti_version_convert: CiftiVersionConvert | None = None,
    runner: Runner = None,
) -> FileConvertOutputs:
    """
    file-convert by Washington University School of Medicin.
    
    Change version of file format.
    
    You may only specify one top-level option.
    
    Args:
        border_version_convert: write a border file with a different version
        nifti_version_convert: write a nifti file with a different version
        cifti_version_convert: write a cifti file with a different version
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `FileConvertOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FILE_CONVERT_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-file-convert")
    if border_version_convert is not None:
        cargs.extend(["-border-version-convert", *border_version_convert.run(execution)])
    if nifti_version_convert is not None:
        cargs.extend(["-nifti-version-convert", *nifti_version_convert.run(execution)])
    if cifti_version_convert is not None:
        cargs.extend(["-cifti-version-convert", *cifti_version_convert.run(execution)])
    ret = FileConvertOutputs(
        root=execution.output_file("."),
        border_version_convert=border_version_convert.outputs(execution),
        nifti_version_convert=nifti_version_convert.outputs(execution),
        cifti_version_convert=cifti_version_convert.outputs(execution),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "BorderVersionConvert",
    "BorderVersionConvertOutputs",
    "CiftiVersionConvert",
    "CiftiVersionConvertOutputs",
    "FILE_CONVERT_METADATA",
    "FileConvertOutputs",
    "NiftiVersionConvert",
    "NiftiVersionConvertOutputs",
    "file_convert",
]
