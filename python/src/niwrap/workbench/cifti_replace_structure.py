# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


CIFTI_REPLACE_STRUCTURE_METADATA = Metadata(
    id="4187a86944db186eaf128a73ac6bd7d1da26fab0",
    name="cifti-replace-structure",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class CiftiReplaceStructureVolumeAllOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CiftiReplaceStructureVolumeAll.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CiftiReplaceStructureVolumeAll:
    """
    replace the data in all volume components
    """
    opt_from_cropped: bool = False
    """the input is cropped to the size of the data"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_from_cropped:
            cargs.append("-from-cropped")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiReplaceStructureVolumeAllOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiReplaceStructureVolumeAllOutputs`).
        """
        ret = CiftiReplaceStructureVolumeAllOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiReplaceStructureLabelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CiftiReplaceStructureLabel.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CiftiReplaceStructureLabel:
    """
    replace the data in a surface label component
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiReplaceStructureLabelOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiReplaceStructureLabelOutputs`).
        """
        ret = CiftiReplaceStructureLabelOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiReplaceStructureMetricOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CiftiReplaceStructureMetric.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CiftiReplaceStructureMetric:
    """
    replace the data in a surface component
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiReplaceStructureMetricOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiReplaceStructureMetricOutputs`).
        """
        ret = CiftiReplaceStructureMetricOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiReplaceStructureVolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CiftiReplaceStructureVolume.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CiftiReplaceStructureVolume:
    """
    replace the data in a volume component
    """
    opt_from_cropped: bool = False
    """the input is cropped to the size of the component"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_from_cropped:
            cargs.append("-from-cropped")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiReplaceStructureVolumeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiReplaceStructureVolumeOutputs`).
        """
        ret = CiftiReplaceStructureVolumeOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiReplaceStructureOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_replace_structure(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    volume_all: CiftiReplaceStructureVolumeAllOutputs
    """Subcommand outputs"""
    label: typing.List[CiftiReplaceStructureLabelOutputs]
    """Subcommand outputs"""
    metric: typing.List[CiftiReplaceStructureMetricOutputs]
    """Subcommand outputs"""
    volume: typing.List[CiftiReplaceStructureVolumeOutputs]
    """Subcommand outputs"""


def cifti_replace_structure(
    cifti: str,
    direction: str,
    volume_all: CiftiReplaceStructureVolumeAll | None = None,
    opt_discard_unused_labels: bool = False,
    opt_label_collision_action: str | None = None,
    label: list[CiftiReplaceStructureLabel] = None,
    metric: list[CiftiReplaceStructureMetric] = None,
    volume: list[CiftiReplaceStructureVolume] = None,
    runner: Runner = None,
) -> CiftiReplaceStructureOutputs:
    """
    cifti-replace-structure by Washington University School of Medicin.
    
    Replace data in a structure in a cifti file.
    
    This is a fairly low-level command, you probably want to use
    -cifti-create-dense-from-template instead.
    
    You must specify at least one of -metric, -label, -volume, or -volume-all
    for this command to do anything. Input volumes must line up with the output
    of -cifti-separate. For dtseries/dscalar, use COLUMN, and if your dconn
    matrix will be fully symmetric, COLUMN is more efficient. The -volume-all
    option must not be specified when using a -volume option. A -metric option
    must not be specified when using a -label option, and is not recommended on
    a label-type cifti file. For each <structure> argument, use one of the
    following strings:
    
    CORTEX_LEFT
    CORTEX_RIGHT
    CEREBELLUM
    ACCUMBENS_LEFT
    ACCUMBENS_RIGHT
    ALL_GREY_MATTER
    ALL_WHITE_MATTER
    AMYGDALA_LEFT
    AMYGDALA_RIGHT
    BRAIN_STEM
    CAUDATE_LEFT
    CAUDATE_RIGHT
    CEREBELLAR_WHITE_MATTER_LEFT
    CEREBELLAR_WHITE_MATTER_RIGHT
    CEREBELLUM_LEFT
    CEREBELLUM_RIGHT
    CEREBRAL_WHITE_MATTER_LEFT
    CEREBRAL_WHITE_MATTER_RIGHT
    CORTEX
    DIENCEPHALON_VENTRAL_LEFT
    DIENCEPHALON_VENTRAL_RIGHT
    HIPPOCAMPUS_LEFT
    HIPPOCAMPUS_RIGHT
    INVALID
    OTHER
    OTHER_GREY_MATTER
    OTHER_WHITE_MATTER
    PALLIDUM_LEFT
    PALLIDUM_RIGHT
    PUTAMEN_LEFT
    PUTAMEN_RIGHT
    THALAMUS_LEFT
    THALAMUS_RIGHT.
    
    Args:
        cifti: the cifti to modify
        direction: which dimension to interpret as a single map, ROW or COLUMN
        volume_all: replace the data in all volume components
        opt_discard_unused_labels: when operating on a dlabel file, drop any
            unused label keys from the label table
        opt_label_collision_action: how to handle conflicts between label keys:
            'ERROR', 'LEFT_SURFACE_FIRST', or 'LEGACY', default 'ERROR', use
            'LEGACY' to match v1.4.2 and earlier
        label: replace the data in a surface label component
        metric: replace the data in a surface component
        volume: replace the data in a volume component
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `CiftiReplaceStructureOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CIFTI_REPLACE_STRUCTURE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-replace-structure")
    cargs.append(cifti)
    cargs.append(direction)
    if volume_all is not None:
        cargs.extend(["-volume-all", *volume_all.run(execution)])
    if opt_discard_unused_labels:
        cargs.append("-discard-unused-labels")
    if opt_label_collision_action is not None:
        cargs.extend(["-label-collision", opt_label_collision_action])
    if label is not None:
        cargs.extend(["-label", *[a for c in [s.run(execution) for s in label] for a in c]])
    if metric is not None:
        cargs.extend(["-metric", *[a for c in [s.run(execution) for s in metric] for a in c]])
    if volume is not None:
        cargs.extend(["-volume", *[a for c in [s.run(execution) for s in volume] for a in c]])
    ret = CiftiReplaceStructureOutputs(
        root=execution.output_file("."),
        volume_all=volume_all.outputs(execution),
        label=[label.outputs(execution) for label in label],
        metric=[metric.outputs(execution) for metric in metric],
        volume=[volume.outputs(execution) for volume in volume],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CIFTI_REPLACE_STRUCTURE_METADATA",
    "CiftiReplaceStructureLabel",
    "CiftiReplaceStructureLabelOutputs",
    "CiftiReplaceStructureMetric",
    "CiftiReplaceStructureMetricOutputs",
    "CiftiReplaceStructureOutputs",
    "CiftiReplaceStructureVolume",
    "CiftiReplaceStructureVolumeAll",
    "CiftiReplaceStructureVolumeAllOutputs",
    "CiftiReplaceStructureVolumeOutputs",
    "cifti_replace_structure",
]
