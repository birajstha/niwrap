# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


CIFTI_AVERAGE_DENSE_ROI_METADATA = Metadata(
    id="55a57db90f683493539ffc2eff2a10e8e5f53ce9",
    name="cifti-average-dense-roi",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class CiftiAverageDenseRoiCiftiRoiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CiftiAverageDenseRoiCiftiRoi.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CiftiAverageDenseRoiCiftiRoi:
    """
    cifti file containing combined weights
    """
    opt_in_memory: bool = False
    """cache the roi in memory so that it isn't re-read for each input cifti"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_in_memory:
            cargs.append("-in-memory")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiAverageDenseRoiCiftiRoiOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiAverageDenseRoiCiftiRoiOutputs`).
        """
        ret = CiftiAverageDenseRoiCiftiRoiOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiAverageDenseRoiCiftiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CiftiAverageDenseRoiCifti.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class CiftiAverageDenseRoiCifti:
    """
    specify an input cifti file
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CiftiAverageDenseRoiCiftiOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CiftiAverageDenseRoiCiftiOutputs`).
        """
        ret = CiftiAverageDenseRoiCiftiOutputs(
            root=execution.output_file("."),
        )
        return ret


class CiftiAverageDenseRoiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_average_dense_roi(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    cifti_out: OutputPathType
    """output cifti dscalar file"""
    cifti_roi: CiftiAverageDenseRoiCiftiRoiOutputs
    """Subcommand outputs"""
    cifti: typing.List[CiftiAverageDenseRoiCiftiOutputs]
    """Subcommand outputs"""


def cifti_average_dense_roi(
    cifti_out: InputPathType,
    cifti_roi: CiftiAverageDenseRoiCiftiRoi | None = None,
    opt_left_roi_roi_metric: InputPathType | None = None,
    opt_right_roi_roi_metric: InputPathType | None = None,
    opt_cerebellum_roi_roi_metric: InputPathType | None = None,
    opt_vol_roi_roi_vol: InputPathType | None = None,
    opt_left_area_surf_left_surf: InputPathType | None = None,
    opt_right_area_surf_right_surf: InputPathType | None = None,
    opt_cerebellum_area_surf_cerebellum_surf: InputPathType | None = None,
    cifti: list[CiftiAverageDenseRoiCifti] = None,
    runner: Runner = None,
) -> CiftiAverageDenseRoiOutputs:
    """
    cifti-average-dense-roi by Washington University School of Medicin.
    
    Average cifti rows across subjects by roi.
    
    Averages rows for each map of the ROI(s), across all files. ROI maps are
    treated as weighting functions, including negative values. For efficiency,
    ensure that everything that is not intended to be used is zero in the ROI
    map. If -cifti-roi is specified, -left-roi, -right-roi, -cerebellum-roi, and
    -vol-roi must not be specified. If multiple non-cifti ROI files are
    specified, they must have the same number of columns.
    
    Args:
        cifti_out: output cifti dscalar file
        cifti_roi: cifti file containing combined weights
        opt_left_roi_roi_metric: weights to use for left hempsphere: the left
            roi as a metric file
        opt_right_roi_roi_metric: weights to use for right hempsphere: the right
            roi as a metric file
        opt_cerebellum_roi_roi_metric: weights to use for cerebellum surface:
            the cerebellum roi as a metric file
        opt_vol_roi_roi_vol: voxel weights to use: the roi volume file
        opt_left_area_surf_left_surf: specify the left surface for vertex area
            correction: the left surface file
        opt_right_area_surf_right_surf: specify the right surface for vertex
            area correction: the right surface file
        opt_cerebellum_area_surf_cerebellum_surf: specify the cerebellum surface
            for vertex area correction: the cerebellum surface file
        cifti: specify an input cifti file
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `CiftiAverageDenseRoiOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CIFTI_AVERAGE_DENSE_ROI_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-average-dense-roi")
    cargs.append(execution.input_file(cifti_out))
    if cifti_roi is not None:
        cargs.extend(["-cifti-roi", *cifti_roi.run(execution)])
    if opt_left_roi_roi_metric is not None:
        cargs.extend(["-left-roi", execution.input_file(opt_left_roi_roi_metric)])
    if opt_right_roi_roi_metric is not None:
        cargs.extend(["-right-roi", execution.input_file(opt_right_roi_roi_metric)])
    if opt_cerebellum_roi_roi_metric is not None:
        cargs.extend(["-cerebellum-roi", execution.input_file(opt_cerebellum_roi_roi_metric)])
    if opt_vol_roi_roi_vol is not None:
        cargs.extend(["-vol-roi", execution.input_file(opt_vol_roi_roi_vol)])
    if opt_left_area_surf_left_surf is not None:
        cargs.extend(["-left-area-surf", execution.input_file(opt_left_area_surf_left_surf)])
    if opt_right_area_surf_right_surf is not None:
        cargs.extend(["-right-area-surf", execution.input_file(opt_right_area_surf_right_surf)])
    if opt_cerebellum_area_surf_cerebellum_surf is not None:
        cargs.extend(["-cerebellum-area-surf", execution.input_file(opt_cerebellum_area_surf_cerebellum_surf)])
    if cifti is not None:
        cargs.extend(["-cifti", *[a for c in [s.run(execution) for s in cifti] for a in c]])
    ret = CiftiAverageDenseRoiOutputs(
        root=execution.output_file("."),
        cifti_out=execution.output_file(f"{pathlib.Path(cifti_out).name}"),
        cifti_roi=cifti_roi.outputs(execution),
        cifti=[cifti.outputs(execution) for cifti in cifti],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CIFTI_AVERAGE_DENSE_ROI_METADATA",
    "CiftiAverageDenseRoiCifti",
    "CiftiAverageDenseRoiCiftiOutputs",
    "CiftiAverageDenseRoiCiftiRoi",
    "CiftiAverageDenseRoiCiftiRoiOutputs",
    "CiftiAverageDenseRoiOutputs",
    "cifti_average_dense_roi",
]
