# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import dataclasses
import pathlib
import typing

SURFACE_APPLY_AFFINE_METADATA = Metadata(
    id="bdcb73baf973fcd16b087ffa4996fcfa5d9f0d26",
    name="surface-apply-affine",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


@dataclasses.dataclass
class SurfaceApplyAffineFlirt:
    """
    MUST be used if affine is a flirt affine
    """
    source_volume: str
    """the source volume used when generating the affine"""
    target_volume: str
    """the target volume used when generating the affine"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append(self.source_volume)
        cargs.append(self.target_volume)
        return cargs


class SurfaceApplyAffineOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surface_apply_affine(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_surf: OutputPathType
    """the output transformed surface"""


def surface_apply_affine(
    in_surf: InputPathType,
    affine: str,
    out_surf: InputPathType,
    flirt: SurfaceApplyAffineFlirt | None = None,
    runner: Runner = None,
) -> SurfaceApplyAffineOutputs:
    """
    surface-apply-affine by Washington University School of Medicin.
    
    Apply affine transform to surface file.
    
    For flirt matrices, you must use the -flirt option, because flirt matrices
    are not a complete description of the coordinate transform they represent.
    If the -flirt option is not present, the affine must be a nifti 'world'
    affine, which can be obtained with the -convert-affine command, or aff_conv
    from the 4dfp suite.
    
    Args:
        in_surf: the surface to transform.
        affine: the affine file.
        out_surf: the output transformed surface.
        flirt: MUST be used if affine is a flirt affine.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfaceApplyAffineOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURFACE_APPLY_AFFINE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-surface-apply-affine")
    cargs.append(execution.input_file(in_surf))
    cargs.append(affine)
    cargs.append(execution.input_file(out_surf))
    if flirt is not None:
        cargs.extend(["-flirt", *flirt.run(execution)])
    ret = SurfaceApplyAffineOutputs(
        root=execution.output_file("."),
        out_surf=execution.output_file(f"{pathlib.Path(out_surf).name}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SURFACE_APPLY_AFFINE_METADATA",
    "SurfaceApplyAffineFlirt",
    "SurfaceApplyAffineOutputs",
    "surface_apply_affine",
]
