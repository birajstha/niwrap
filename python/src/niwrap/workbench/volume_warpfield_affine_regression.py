# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


VOLUME_WARPFIELD_AFFINE_REGRESSION_METADATA = Metadata(
    id="4e5a45faeb0bf227da96ea49a6138f25ebecd538",
    name="volume-warpfield-affine-regression",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class FlirtOutOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FlirtOut.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class FlirtOut:
    """
    write output as a flirt matrix rather than a world coordinate transform
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> FlirtOutOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `FlirtOutOutputs`).
        """
        ret = FlirtOutOutputs(
            root=execution.output_file("."),
        )
        return ret


class VolumeWarpfieldAffineRegressionOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_warpfield_affine_regression(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    flirt_out: FlirtOutOutputs
    """Subcommand outputs"""


def volume_warpfield_affine_regression(
    warpfield: str,
    affine_out: str,
    opt_roi_roi_vol: InputPathType | None = None,
    opt_fnirt_source_volume: str | None = None,
    flirt_out: FlirtOut | None = None,
    runner: Runner = None,
) -> VolumeWarpfieldAffineRegressionOutputs:
    """
    volume-warpfield-affine-regression by Washington University School of Medicin.
    
    Regress affine from warpfield.
    
    For all voxels in the warpfield, do a regression that predicts the post-warp
    coordinate from the source coordinate. When -roi is specified, only consider
    voxels with a value greater than 0 in <roi-vol>.
    
    The default is to expect the warpfield to be in relative world coordinates
    (mm space), and to write the output as a world affine (mm space to mm
    space). If you are using FSL-created files and utilities, specify -fnirt and
    -flirt as needed, as their coordinate conventions are different.
    
    Args:
        warpfield: the input warpfield
        affine_out: output - the output affine file
        opt_roi_roi_vol: only consider voxels within a mask (e.g., a brain
            mask): the mask volume
        opt_fnirt_source_volume: input is a fnirt warpfield: the source volume
            used when generating the fnirt warpfield
        flirt_out: write output as a flirt matrix rather than a world coordinate
            transform
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `VolumeWarpfieldAffineRegressionOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VOLUME_WARPFIELD_AFFINE_REGRESSION_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-warpfield-affine-regression")
    cargs.append(warpfield)
    cargs.append(affine_out)
    if opt_roi_roi_vol is not None:
        cargs.extend(["-roi", execution.input_file(opt_roi_roi_vol)])
    if opt_fnirt_source_volume is not None:
        cargs.extend(["-fnirt", opt_fnirt_source_volume])
    if flirt_out is not None:
        cargs.extend(["-flirt-out", *flirt_out.run(execution)])
    ret = VolumeWarpfieldAffineRegressionOutputs(
        root=execution.output_file("."),
        flirt_out=flirt_out.outputs(execution),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FlirtOut",
    "FlirtOutOutputs",
    "VOLUME_WARPFIELD_AFFINE_REGRESSION_METADATA",
    "VolumeWarpfieldAffineRegressionOutputs",
    "volume_warpfield_affine_regression",
]
