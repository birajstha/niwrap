# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


LABEL_MERGE_METADATA = Metadata(
    id="27e790a9388bfa69f9a0f7b1251abd27de75f481",
    name="label-merge",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class LabelMergeUpToOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LabelMergeUpTo.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class LabelMergeUpTo:
    """
    use an inclusive range of columns
    """
    opt_reverse: bool = False
    """use the range in reverse order"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_reverse:
            cargs.append("-reverse")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LabelMergeUpToOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LabelMergeUpToOutputs`).
        """
        ret = LabelMergeUpToOutputs(
            root=execution.output_file("."),
        )
        return ret


class LabelMergeColumnOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LabelMergeColumn.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.up_to: LabelMergeUpToOutputs
    """Subcommand outputs"""


@dataclasses.dataclass
class LabelMergeColumn:
    """
    select a single column to use
    """
    up_to: LabelMergeUpTo | None = None
    """use an inclusive range of columns"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.up_to is not None:
            cargs.extend(["-up-to", *self.up_to.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LabelMergeColumnOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LabelMergeColumnOutputs`).
        """
        ret = LabelMergeColumnOutputs(
            root=execution.output_file("."),
            self.up_to=self.up_to.outputs(execution),
        )
        return ret


class LabelMergeLabelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LabelMergeLabel.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.column: typing.List[LabelMergeColumnOutputs]
    """Subcommand outputs"""


@dataclasses.dataclass
class LabelMergeLabel:
    """
    specify an input label
    """
    column: list[LabelMergeColumn] = None
    """select a single column to use"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.column is not None:
            cargs.extend(["-column", *[a for c in [s.run(execution) for s in self.column] for a in c]])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LabelMergeLabelOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LabelMergeLabelOutputs`).
        """
        ret = LabelMergeLabelOutputs(
            root=execution.output_file("."),
            self.column=[self.column.outputs(execution) for self.column in self.column],
        )
        return ret


class LabelMergeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `label_merge(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    label_out: OutputPathType
    """the output label"""
    label: typing.List[LabelMergeLabelOutputs]
    """Subcommand outputs"""


def label_merge(
    label_out: InputPathType,
    label: list[LabelMergeLabel] = None,
    runner: Runner = None,
) -> LabelMergeOutputs:
    """
    label-merge by Washington University School of Medicin.
    
    Merge label files into a new file.
    
    Takes one or more label files and constructs a new label file by
    concatenating columns from them. The input files must have the same number
    of vertices and the same structure.
    
    Example: wb_command -label-merge out.label.gii -label first.label.gii
    -column 1 -label second.label.gii
    
    This example would take the first column from first.label.gii and all
    subvolumes from second.label.gii, and write these to out.label.gii.
    
    Args:
        label_out: the output label
        label: specify an input label
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `LabelMergeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LABEL_MERGE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-label-merge")
    cargs.append(execution.input_file(label_out))
    if label is not None:
        cargs.extend(["-label", *[a for c in [s.run(execution) for s in label] for a in c]])
    ret = LabelMergeOutputs(
        root=execution.output_file("."),
        label_out=execution.output_file(f"{pathlib.Path(label_out).name}"),
        label=[label.outputs(execution) for label in label],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "LABEL_MERGE_METADATA",
    "LabelMergeColumn",
    "LabelMergeColumnOutputs",
    "LabelMergeLabel",
    "LabelMergeLabelOutputs",
    "LabelMergeOutputs",
    "LabelMergeUpTo",
    "LabelMergeUpToOutputs",
    "label_merge",
]
