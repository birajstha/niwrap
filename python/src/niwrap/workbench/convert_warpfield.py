# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import dataclasses
import pathlib
import typing

CONVERT_WARPFIELD_METADATA = Metadata(
    id="734d07fedc4eff3baa5d2d2d8f8418ac6d77adff",
    name="convert-warpfield",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


@dataclasses.dataclass
class ConvertWarpfieldFromWorld:
    """
    input is a NIFTI 'world' warpfield
    """
    opt_absolute: bool = False
    """warpfield was written in absolute convention, rather than relative"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_absolute:
            cargs.append("-absolute")
        return cargs


@dataclasses.dataclass
class ConvertWarpfieldFromFnirt:
    """
    input is a fnirt warpfield
    """
    opt_absolute: bool = False
    """warpfield was written in absolute convention, rather than relative"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_absolute:
            cargs.append("-absolute")
        return cargs


@dataclasses.dataclass
class ConvertWarpfieldToFnirt:
    """
    write output as a fnirt warpfield
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs


class ConvertWarpfieldOutputs(typing.NamedTuple):
    """
    Output object returned when calling `convert_warpfield(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def convert_warpfield(
    from_world: ConvertWarpfieldFromWorld | None = None,
    opt_from_itk_input: str | None = None,
    from_fnirt: ConvertWarpfieldFromFnirt | None = None,
    opt_to_world_output: str | None = None,
    opt_to_itk_output: str | None = None,
    to_fnirt: list[ConvertWarpfieldToFnirt] = None,
    runner: Runner = None,
) -> ConvertWarpfieldOutputs:
    """
    convert-warpfield by Washington University School of Medicin.
    
    Convert a warpfield between conventions.
    
    NIFTI world warpfields can be used directly on mm coordinates via sampling
    the three subvolumes at the coordinate and adding the sampled values to the
    coordinate vector. They use the NIFTI coordinate system, that is, X is left
    to right, Y is posterior to anterior, and Z is inferior to superior.
    
    NOTE: this command does not invert the warpfield, and to warp a surface, you
    must use the inverse of the warpfield that warps the corresponding volume.
    
    The ITK format is used by ANTS.
    
    You must specify exactly one -from option, but you may specify multiple -to
    options, and -to-fnirt may be specified more than once.
    
    Args:
        from_world: input is a NIFTI 'world' warpfield
        opt_from_itk_input: input is an ITK warpfield: the input warpfield
        from_fnirt: input is a fnirt warpfield
        opt_to_world_output: write output as a NIFTI 'world' warpfield: output -
            the output warpfield
        opt_to_itk_output: write output as an ITK warpfield: output - the output
            warpfield
        to_fnirt: write output as a fnirt warpfield
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `ConvertWarpfieldOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CONVERT_WARPFIELD_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-convert-warpfield")
    if from_world is not None:
        cargs.extend(["-from-world", *from_world.run(execution)])
    if opt_from_itk_input is not None:
        cargs.extend(["-from-itk", opt_from_itk_input])
    if from_fnirt is not None:
        cargs.extend(["-from-fnirt", *from_fnirt.run(execution)])
    if opt_to_world_output is not None:
        cargs.extend(["-to-world", opt_to_world_output])
    if opt_to_itk_output is not None:
        cargs.extend(["-to-itk", opt_to_itk_output])
    if to_fnirt is not None:
        cargs.extend(["-to-fnirt", *[a for c in [s.run(execution) for s in to_fnirt] for a in c]])
    ret = ConvertWarpfieldOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CONVERT_WARPFIELD_METADATA",
    "ConvertWarpfieldFromFnirt",
    "ConvertWarpfieldFromWorld",
    "ConvertWarpfieldOutputs",
    "ConvertWarpfieldToFnirt",
    "convert_warpfield",
]
