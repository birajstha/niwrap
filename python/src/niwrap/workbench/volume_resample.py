# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


VOLUME_RESAMPLE_METADATA = Metadata(
    id="ef46f997d66159ea7599e14d21843b7d7b18ba3b",
    name="volume-resample",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class VolumeResampleFlirtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeResampleFlirt.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class VolumeResampleFlirt:
    """
    MUST be used if affine is a flirt affine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeResampleFlirtOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeResampleFlirtOutputs`).
        """
        ret = VolumeResampleFlirtOutputs(
            root=execution.output_file("."),
        )
        return ret


class VolumeResampleAffineOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeResampleAffine.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.flirt: VolumeResampleFlirtOutputs
    """Subcommand outputs"""


@dataclasses.dataclass
class VolumeResampleAffine:
    """
    add an affine transform
    """
    flirt: VolumeResampleFlirt | None = None
    """MUST be used if affine is a flirt affine"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.flirt is not None:
            cargs.extend(["-flirt", *self.flirt.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeResampleAffineOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeResampleAffineOutputs`).
        """
        ret = VolumeResampleAffineOutputs(
            root=execution.output_file("."),
            self.flirt=self.flirt.outputs(execution),
        )
        return ret


class VolumeResampleFlirtOutputs_(typing.NamedTuple):
    """
    Output object returned when calling `VolumeResampleFlirt_.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class VolumeResampleFlirt_:
    """
    MUST be used if the affines are flirt affines
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeResampleFlirtOutputs_:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeResampleFlirtOutputs_`).
        """
        ret = VolumeResampleFlirtOutputs_(
            root=execution.output_file("."),
        )
        return ret


class VolumeResampleAffineSeriesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeResampleAffineSeries.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    self.flirt: VolumeResampleFlirtOutputs_
    """Subcommand outputs"""


@dataclasses.dataclass
class VolumeResampleAffineSeries:
    """
    add an independent affine per-frame
    """
    flirt: VolumeResampleFlirt_ | None = None
    """MUST be used if the affines are flirt affines"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.flirt is not None:
            cargs.extend(["-flirt", *self.flirt.run(execution)])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeResampleAffineSeriesOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeResampleAffineSeriesOutputs`).
        """
        ret = VolumeResampleAffineSeriesOutputs(
            root=execution.output_file("."),
            self.flirt=self.flirt.outputs(execution),
        )
        return ret


class VolumeResampleWarpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeResampleWarp.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class VolumeResampleWarp:
    """
    add a nonlinear warpfield transform
    """
    opt_fnirt_source_volume: str | None = None
    """MUST be used if using a fnirt warpfield: the source volume used when
    generating the warpfield"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_fnirt_source_volume is not None:
            cargs.extend(["-fnirt", self.opt_fnirt_source_volume])
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeResampleWarpOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeResampleWarpOutputs`).
        """
        ret = VolumeResampleWarpOutputs(
            root=execution.output_file("."),
        )
        return ret


class VolumeResampleOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_resample(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    volume_out: OutputPathType
    """the output volume"""
    affine: typing.List[VolumeResampleAffineOutputs]
    """Subcommand outputs"""
    affine_series: typing.List[VolumeResampleAffineSeriesOutputs]
    """Subcommand outputs"""
    warp: typing.List[VolumeResampleWarpOutputs]
    """Subcommand outputs"""


def volume_resample(
    volume_in: InputPathType,
    volume_space: str,
    method: str,
    volume_out: InputPathType,
    affine: list[VolumeResampleAffine] = None,
    affine_series: list[VolumeResampleAffineSeries] = None,
    warp: list[VolumeResampleWarp] = None,
    runner: Runner = None,
) -> VolumeResampleOutputs:
    """
    volume-resample by Washington University School of Medicin.
    
    Transform and resample a volume file.
    
    Resample a volume file with an arbitrary list of transformations. You may
    specify -affine, -warp, and -affine-series multiple times each, and they
    will be used in the order specified. For instance, for rigid motion
    correction followed by nonlinear atlas registration, specify -affine-series
    first, then -warp. The recommended methods are CUBIC (cubic spline) for most
    data, and ENCLOSING_VOXEL for label data. The parameter <method> must be one
    of:
    
    CUBIC
    ENCLOSING_VOXEL
    TRILINEAR.
    
    Args:
        volume_in: volume to resample
        volume_space: a volume file in the volume space you want for the output
        method: the resampling method
        volume_out: the output volume
        affine: add an affine transform
        affine_series: add an independent affine per-frame
        warp: add a nonlinear warpfield transform
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `VolumeResampleOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VOLUME_RESAMPLE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-resample")
    cargs.append(execution.input_file(volume_in))
    cargs.append(volume_space)
    cargs.append(method)
    cargs.append(execution.input_file(volume_out))
    if affine is not None:
        cargs.extend(["-affine", *[a for c in [s.run(execution) for s in affine] for a in c]])
    if affine_series is not None:
        cargs.extend(["-affine-series", *[a for c in [s.run(execution) for s in affine_series] for a in c]])
    if warp is not None:
        cargs.extend(["-warp", *[a for c in [s.run(execution) for s in warp] for a in c]])
    ret = VolumeResampleOutputs(
        root=execution.output_file("."),
        volume_out=execution.output_file(f"{pathlib.Path(volume_out).name}"),
        affine=[affine.outputs(execution) for affine in affine],
        affine_series=[affine_series.outputs(execution) for affine_series in affine_series],
        warp=[warp.outputs(execution) for warp in warp],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "VOLUME_RESAMPLE_METADATA",
    "VolumeResampleAffine",
    "VolumeResampleAffineOutputs",
    "VolumeResampleAffineSeries",
    "VolumeResampleAffineSeriesOutputs",
    "VolumeResampleFlirt",
    "VolumeResampleFlirtOutputs",
    "VolumeResampleFlirtOutputs_",
    "VolumeResampleFlirt_",
    "VolumeResampleOutputs",
    "VolumeResampleWarp",
    "VolumeResampleWarpOutputs",
    "volume_resample",
]
