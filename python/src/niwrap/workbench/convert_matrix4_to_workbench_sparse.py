# This file was auto generated by styx
# Do not edit this file directly

import pathlib
import typing

from styxdefs import *


CONVERT_MATRIX4_TO_WORKBENCH_SPARSE_METADATA = Metadata(
    id="d7a6eef9059ee47ec7ad015793c7858e12370a3a",
    name="convert-matrix4-to-workbench-sparse",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class ConvertMatrix4ToWorkbenchSparseOutputs(typing.NamedTuple):
    """
    Output object returned when calling `convert_matrix4_to_workbench_sparse(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def convert_matrix4_to_workbench_sparse(
    matrix4_1: str,
    matrix4_2: str,
    matrix4_3: str,
    orientation_file: InputPathType,
    voxel_list: str,
    wb_sparse_out: str,
    opt_surface_seeds_seed_roi: InputPathType | None = None,
    runner: Runner = None,
) -> ConvertMatrix4ToWorkbenchSparseOutputs:
    """
    convert-matrix4-to-workbench-sparse by Washington University School of Medicin.
    
    CONVERT A 3-FILE MATRIX4 TO A WORKBENCH SPARSE FILE.
    
    Converts the matrix 4 output of probtrackx to workbench sparse file format.
    Exactly one of -surface-seeds and -volume-seeds must be specified.
    
    Args:
        matrix4_1: the first matrix4 file
        matrix4_2: the second matrix4 file
        matrix4_3: the third matrix4 file
        orientation_file: the .fiberTEMP.nii file this trajectory file applies
            to
        voxel_list: list of white matter voxel index triplets as used in the
            trajectory matrix
        wb_sparse_out: output - the output workbench sparse file
        opt_surface_seeds_seed_roi: specify the surface seed space: metric roi
            file of all vertices used in the seed space
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `ConvertMatrix4ToWorkbenchSparseOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CONVERT_MATRIX4_TO_WORKBENCH_SPARSE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-convert-matrix4-to-workbench-sparse")
    cargs.append(matrix4_1)
    cargs.append(matrix4_2)
    cargs.append(matrix4_3)
    cargs.append(execution.input_file(orientation_file))
    cargs.append(voxel_list)
    cargs.append(wb_sparse_out)
    if opt_surface_seeds_seed_roi is not None:
        cargs.extend(["-surface-seeds", execution.input_file(opt_surface_seeds_seed_roi)])
    ret = ConvertMatrix4ToWorkbenchSparseOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CONVERT_MATRIX4_TO_WORKBENCH_SPARSE_METADATA",
    "ConvertMatrix4ToWorkbenchSparseOutputs",
    "convert_matrix4_to_workbench_sparse",
]
