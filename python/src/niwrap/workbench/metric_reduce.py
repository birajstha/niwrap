# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


METRIC_REDUCE_METADATA = Metadata(
    id="6bda37cb5c4d0c97950ec7333f3c77912b1d023a",
    name="metric-reduce",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class ExcludeOutliersOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ExcludeOutliers.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class ExcludeOutliers:
    """
    exclude non-numeric values and outliers by standard deviation
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> ExcludeOutliersOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `ExcludeOutliersOutputs`).
        """
        ret = ExcludeOutliersOutputs(
            root=execution.output_file("."),
        )
        return ret


class MetricReduceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `metric_reduce(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    metric_out: OutputPathType
    """the output metric"""
    exclude_outliers: ExcludeOutliersOutputs
    """Subcommand outputs"""


def metric_reduce(
    metric_in: InputPathType,
    operation: str,
    metric_out: InputPathType,
    exclude_outliers: ExcludeOutliers | None = None,
    opt_only_numeric: bool = False,
    runner: Runner = None,
) -> MetricReduceOutputs:
    """
    metric-reduce by Washington University School of Medicin.
    
    Perform reduction operation across metric columns.
    
    For each surface vertex, takes the data across columns as a vector, and
    performs the specified reduction on it, putting the result into the single
    output column at that vertex. The reduction operators are as follows:
    
    MAX: the maximum value
    MIN: the minimum value
    INDEXMAX: the 1-based index of the maximum value
    INDEXMIN: the 1-based index of the minimum value
    SUM: add all values
    PRODUCT: multiply all values
    MEAN: the mean of the data
    STDEV: the standard deviation (N denominator)
    SAMPSTDEV: the sample standard deviation (N-1 denominator)
    VARIANCE: the variance of the data
    TSNR: mean divided by sample standard deviation (N-1 denominator)
    COV: sample standard deviation (N-1 denominator) divided by mean
    L2NORM: square root of sum of squares
    MEDIAN: the median of the data
    MODE: the mode of the data
    COUNT_NONZERO: the number of nonzero elements in the data
    .
    
    Args:
        metric_in: the metric to reduce
        operation: the reduction operator to use
        metric_out: the output metric
        exclude_outliers: exclude non-numeric values and outliers by standard
            deviation
        opt_only_numeric: exclude non-numeric values
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `MetricReduceOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(METRIC_REDUCE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-metric-reduce")
    cargs.append(execution.input_file(metric_in))
    cargs.append(operation)
    cargs.append(execution.input_file(metric_out))
    if exclude_outliers is not None:
        cargs.extend(["-exclude-outliers", *exclude_outliers.run(execution)])
    if opt_only_numeric:
        cargs.append("-only-numeric")
    ret = MetricReduceOutputs(
        root=execution.output_file("."),
        metric_out=execution.output_file(f"{pathlib.Path(metric_out).name}"),
        exclude_outliers=exclude_outliers.outputs(execution),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "ExcludeOutliers",
    "ExcludeOutliersOutputs",
    "METRIC_REDUCE_METADATA",
    "MetricReduceOutputs",
    "metric_reduce",
]
