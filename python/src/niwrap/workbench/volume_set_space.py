# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


VOLUME_SET_SPACE_METADATA = Metadata(
    id="d2c5c3138f090c0357158891fa98a52186eace23",
    name="volume-set-space",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class VolumeSetSpacePlumbOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeSetSpacePlumb.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class VolumeSetSpacePlumb:
    """
    set via axis order and spacing/offset
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeSetSpacePlumbOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeSetSpacePlumbOutputs`).
        """
        ret = VolumeSetSpacePlumbOutputs(
            root=execution.output_file("."),
        )
        return ret


class VolumeSetSpaceSformOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeSetSpaceSform.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class VolumeSetSpaceSform:
    """
    set via a nifti sform
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeSetSpaceSformOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeSetSpaceSformOutputs`).
        """
        ret = VolumeSetSpaceSformOutputs(
            root=execution.output_file("."),
        )
        return ret


class VolumeSetSpaceFileOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeSetSpaceFile.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class VolumeSetSpaceFile:
    """
    copy spacing info from volume file with matching dimensions
    """
    opt_ignore_dims: bool = False
    """copy the spacing info even if the dimensions don't match"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        if self.opt_ignore_dims:
            cargs.append("-ignore-dims")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> VolumeSetSpaceFileOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `VolumeSetSpaceFileOutputs`).
        """
        ret = VolumeSetSpaceFileOutputs(
            root=execution.output_file("."),
        )
        return ret


class VolumeSetSpaceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_set_space(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    plumb: VolumeSetSpacePlumbOutputs
    """Subcommand outputs"""
    sform: VolumeSetSpaceSformOutputs
    """Subcommand outputs"""
    file: VolumeSetSpaceFileOutputs
    """Subcommand outputs"""


def volume_set_space(
    volume_in: InputPathType,
    volume_out: str,
    plumb: VolumeSetSpacePlumb | None = None,
    sform: VolumeSetSpaceSform | None = None,
    file: VolumeSetSpaceFile | None = None,
    runner: Runner = None,
) -> VolumeSetSpaceOutputs:
    """
    volume-set-space by Washington University School of Medicin.
    
    Change volume space information.
    
    Writes a copy of the volume file, with the spacing information changed as
    specified. No reordering of the voxel data occurs, see -volume-reorient to
    change the volume indexing order and reorder the voxels to match. Exactly
    one of -plumb, -sform, or -file must be specified.
    
    Args:
        volume_in: the input volume
        volume_out: output - the output volume
        plumb: set via axis order and spacing/offset
        sform: set via a nifti sform
        file: copy spacing info from volume file with matching dimensions
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `VolumeSetSpaceOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VOLUME_SET_SPACE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-set-space")
    cargs.append(execution.input_file(volume_in))
    cargs.append(volume_out)
    if plumb is not None:
        cargs.extend(["-plumb", *plumb.run(execution)])
    if sform is not None:
        cargs.extend(["-sform", *sform.run(execution)])
    if file is not None:
        cargs.extend(["-file", *file.run(execution)])
    ret = VolumeSetSpaceOutputs(
        root=execution.output_file("."),
        plumb=plumb.outputs(execution),
        sform=sform.outputs(execution),
        file=file.outputs(execution),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "VOLUME_SET_SPACE_METADATA",
    "VolumeSetSpaceFile",
    "VolumeSetSpaceFileOutputs",
    "VolumeSetSpaceOutputs",
    "VolumeSetSpacePlumb",
    "VolumeSetSpacePlumbOutputs",
    "VolumeSetSpaceSform",
    "VolumeSetSpaceSformOutputs",
    "volume_set_space",
]
