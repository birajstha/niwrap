# This file was auto generated by Styx.
# Do not edit this file directly.

import pathlib
import typing

from styxdefs import *


SURFACE_COORDINATES_TO_METRIC_METADATA = Metadata(
    id="48c46c3880e1b5252ccc2b576c2747362c23470c",
    name="surface-coordinates-to-metric",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class SurfaceCoordinatesToMetricOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surface_coordinates_to_metric(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    metric_out: OutputPathType
    """the output metric"""


def surface_coordinates_to_metric(
    surface: InputPathType,
    metric_out: InputPathType,
    runner: Runner = None,
) -> SurfaceCoordinatesToMetricOutputs:
    """
    surface-coordinates-to-metric by Washington University School of Medicin.
    
    Make metric file of surface coordinates.
    
    Puts the coordinates of the surface into a 3-map metric file, as x, y, z.
    
    Args:
        surface: the surface to use the coordinates of
        metric_out: the output metric
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `SurfaceCoordinatesToMetricOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURFACE_COORDINATES_TO_METRIC_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-surface-coordinates-to-metric")
    cargs.append(execution.input_file(surface))
    cargs.append(execution.input_file(metric_out))
    ret = SurfaceCoordinatesToMetricOutputs(
        root=execution.output_file("."),
        metric_out=execution.output_file(f"{pathlib.Path(metric_out).name}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SURFACE_COORDINATES_TO_METRIC_METADATA",
    "SurfaceCoordinatesToMetricOutputs",
    "surface_coordinates_to_metric",
]
