# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

LESION_FILLING_METADATA = Metadata(
    id="2473bb3852ba6da8aa6ea1d80ff6c61bbbb72ae2.boutiques",
    name="LesionFilling",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


class LesionFillingOutputs(typing.NamedTuple):
    """
    Output object returned when calling `lesion_filling(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    lesion_filled_output: OutputPathType
    """Output image with filled lesions."""


def lesion_filling(
    image_dimension: int,
    t1_image: InputPathType,
    lesion_mask: InputPathType,
    output_lesion_filled: str,
    runner: Runner | None = None,
) -> LesionFillingOutputs:
    """
    Advanced Normalization Tools (ANTs) is a C++ library available through the
    command line that computes high-dimensional mappings to capture the statistics
    of brain structure and function. It allows one to organize, visualize and
    statistically explore large biomedical image sets. Additionally, it integrates
    imaging modalities in space + time and works across species or organ systems
    with minimal customization.
    
    The ANTs library is considered a state-of-the-art medical image registration
    and segmentation toolkit which depends on the Insight ToolKit, a widely used
    medical image processing library to which ANTs developers contribute.
    ANTs-related tools have also won several international, unbiased
    competitions such as MICCAI, BRATS, and STACOM.
    
    Author: ANTs developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        image_dimension: Dimensionality of the image (e.g., 2, 3).
        t1_image: Path to the T1 image file.
        lesion_mask: Path to the lesion mask image file.
        output_lesion_filled: Path for the output file with lesions filled.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LesionFillingOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LESION_FILLING_METADATA)
    cargs = []
    cargs.append("LesionFilling")
    cargs.append(str(image_dimension))
    cargs.append(execution.input_file(t1_image))
    cargs.append(execution.input_file(lesion_mask))
    cargs.append(output_lesion_filled)
    ret = LesionFillingOutputs(
        root=execution.output_file("."),
        lesion_filled_output=execution.output_file(output_lesion_filled),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "LESION_FILLING_METADATA",
    "LesionFillingOutputs",
    "lesion_filling",
]
