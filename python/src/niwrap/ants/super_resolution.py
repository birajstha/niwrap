# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

SUPER_RESOLUTION_METADATA = Metadata(
    id="a019b58430d84ebba665dbfb520cc7e1970a74d2.boutiques",
    name="SuperResolution",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


class SuperResolutionOutputs(typing.NamedTuple):
    """
    Output object returned when calling `super_resolution(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    super_resolved_image: OutputPathType
    """The output super-resolved image file."""


def super_resolution(
    image_dimension: int,
    output_image: InputPathType,
    domain_image: InputPathType,
    gradient_sigma: float,
    mesh_size: float,
    number_of_levels: int,
    input_image_files: list[InputPathType],
    runner: Runner | None = None,
) -> SuperResolutionOutputs:
    """
    Advanced Normalization Tools (ANTs) is a C++ library available through the
    command line that computes high-dimensional mappings to capture the statistics
    of brain structure and function. It allows one to organize, visualize and
    statistically explore large biomedical image sets. Additionally, it integrates
    imaging modalities in space + time and works across species or organ systems
    with minimal customization.
    
    The ANTs library is considered a state-of-the-art medical image registration
    and segmentation toolkit which depends on the Insight ToolKit, a widely used
    medical image processing library to which ANTs developers contribute.
    ANTs-related tools have also won several international, unbiased
    competitions such as MICCAI, BRATS, and STACOM.
    
    Author: ANTs developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        image_dimension: Specifies the dimensionality of the input images\
            (e.g., 2 for 2D images, 3 for 3D images).
        output_image: The file path for the output super-resolved image.
        domain_image: The domain image is used as the template space for the\
            alignment of input images.
        gradient_sigma: The sigma used for calculating the gradient magnitude\
            of input images. If negative, no weighting is applied.
        mesh_size: The size of the mesh used in fitting.
        number_of_levels: The number of resolution levels to process.
        input_image_files: List of paths to input images to be processed for\
            super resolution.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SuperResolutionOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SUPER_RESOLUTION_METADATA)
    cargs = []
    cargs.append("SuperResolution")
    cargs.append(str(image_dimension))
    cargs.append(execution.input_file(output_image))
    cargs.append(execution.input_file(domain_image))
    cargs.append(str(gradient_sigma))
    cargs.append(str(mesh_size))
    cargs.append(str(number_of_levels))
    cargs.extend([execution.input_file(f) for f in input_image_files])
    ret = SuperResolutionOutputs(
        root=execution.output_file("."),
        super_resolved_image=execution.output_file(pathlib.Path(output_image).name),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SUPER_RESOLUTION_METADATA",
    "SuperResolutionOutputs",
    "super_resolution",
]
