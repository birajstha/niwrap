# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


DWI2MASK_METADATA = Metadata(
    id="6b6aba217256d9f6daad23e3388b3478ced6db31",
    name="dwi2mask",
    container_image_type="docker",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


class FslgradOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Fslgrad.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Fslgrad:
    """
    Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
    """
    bvecs: InputPathType
    """Provide the diffusion-weighted gradient scheme used in the acquisition in
    FSL bvecs/bvals format files. If a diffusion gradient scheme is present in
    the input image header, the data provided with this option will be instead
    used."""
    bvals: InputPathType
    """Provide the diffusion-weighted gradient scheme used in the acquisition in
    FSL bvecs/bvals format files. If a diffusion gradient scheme is present in
    the input image header, the data provided with this option will be instead
    used."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-fslgrad")
        cargs.append(execution.input_file(self.bvecs))
        cargs.append(execution.input_file(self.bvals))
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> FslgradOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `FslgradOutputs`).
        """
        ret = FslgradOutputs(
            root=execution.output_file("."),
        )
        return ret


class ConfigOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Config.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Config:
    """
    temporarily set the value of an MRtrix config file entry.
    """
    key: str
    """temporarily set the value of an MRtrix config file entry."""
    value: str
    """temporarily set the value of an MRtrix config file entry."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-config")
        cargs.append(self.key)
        cargs.append(self.value)
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> ConfigOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `ConfigOutputs`).
        """
        ret = ConfigOutputs(
            root=execution.output_file("."),
        )
        return ret


class Dwi2maskOutputs(typing.NamedTuple):
    """
    Output object returned when calling `dwi2mask(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """the output whole-brain mask image"""
    fslgrad: FslgradOutputs
    """Subcommand outputs"""
    config: ConfigOutputs
    """Subcommand outputs"""


def dwi2mask(
    input_: InputPathType,
    output: InputPathType,
    clean_scale: int | None = None,
    grad: InputPathType | None = None,
    fslgrad: Fslgrad | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Config] = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner = None,
) -> Dwi2maskOutputs:
    """
    dwi2mask by David Raffelt (david.raffelt@florey.edu.au), Thijs Dhollander
    (thijs.dhollander@gmail.com) and Ben Jeurissen (ben.jeurissen@uantwerpen.be).
    
    Generates a whole brain mask from a DWI image.
    
    All diffusion weighted and b=0 volumes are used to obtain a mask that
    includes both brain tissue and CSF.
    
    In a second step peninsula-like extensions, where the peninsula itself is
    wider than the bridge connecting it to the mask, are removed. This may help
    removing artefacts and non-brain parts, e.g. eyes, from the mask.
    
    References:
    
    Dhollander T, Raffelt D, Connelly A. Unsupervised 3-tissue response function
    estimation from single-shell or multi-shell diffusion MR data without a
    co-registered T1 image. ISMRM Workshop on Breaking the Barriers of Diffusion
    MRI, 2016, 5.
    
    More information:
    https://mrtrix.readthedocs.io/en/latest/reference/commands/dwi2mask.html
    
    Args:
        input_: the input DWI image containing volumes that are both diffusion
            weighted and b=0
        output: the output whole-brain mask image
        clean_scale: the maximum scale used to cut bridges. A certain maximum
            scale cuts bridges up to a width (in voxels) of 2x the provided scale.
            Setting this to 0 disables the mask cleaning step. (Default: 2)
        grad: Provide the diffusion-weighted gradient scheme used in the
            acquisition in a text file. This should be supplied as a 4xN text file
            with each line is in the format [ X Y Z b ], where [ X Y Z ] describe
            the direction of the applied gradient, and b gives the b-value in units
            of s/mm^2. If a diffusion gradient scheme is present in the input image
            header, the data provided with this option will be instead used.
        fslgrad: Provide the diffusion-weighted gradient scheme used in the
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient
            scheme is present in the input image header, the data provided with this
            option will be instead used.
        info: display information messages.
        quiet: do not display information messages or progress status;
            alternatively, this can be achieved by setting the MRTRIX_QUIET
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications (set
            to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `Dwi2maskOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DWI2MASK_METADATA)
    cargs = []
    cargs.append("dwi2mask")
    if clean_scale is not None:
        cargs.extend(["-clean_scale", str(clean_scale)])
    if grad is not None:
        cargs.extend(["-grad", execution.input_file(grad)])
    if fslgrad is not None:
        cargs.extend(fslgrad.run(execution))
    if info:
        cargs.append("-info")
    if quiet:
        cargs.append("-quiet")
    if debug:
        cargs.append("-debug")
    if force:
        cargs.append("-force")
    if nthreads is not None:
        cargs.extend(["-nthreads", str(nthreads)])
    if config is not None:
        cargs.extend([a for c in [s.run(execution) for s in config] for a in c])
    if help_:
        cargs.append("-help")
    if version:
        cargs.append("-version")
    cargs.append(execution.input_file(input_))
    cargs.append(execution.input_file(output))
    ret = Dwi2maskOutputs(
        root=execution.output_file("."),
        output=execution.output_file(f"{pathlib.Path(output).name}"),
        fslgrad=fslgrad.outputs(execution),
        config=[config.outputs(execution) for config in config],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "Config",
    "ConfigOutputs",
    "DWI2MASK_METADATA",
    "Dwi2maskOutputs",
    "Fslgrad",
    "FslgradOutputs",
    "dwi2mask",
]
