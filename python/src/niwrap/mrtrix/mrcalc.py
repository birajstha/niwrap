# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


MRCALC_METADATA = Metadata(
    id="0a433c2d6189801142076f222e9ab90c9183c047",
    name="mrcalc",
    container_image_type="docker",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


class MrcalcAbsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcAbs.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcAbs:
    """
    |%1| : return absolute value (magnitude) of real or complex number
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-abs")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcAbsOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcAbsOutputs`).
        """
        ret = MrcalcAbsOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcNegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcNeg.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcNeg:
    """
    -%1 : negative value
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-neg")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcNegOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcNegOutputs`).
        """
        ret = MrcalcNegOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcAddOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcAdd.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcAdd:
    """
    (%1 + %2) : add values
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-add")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcAddOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcAddOutputs`).
        """
        ret = MrcalcAddOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcSubtractOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcSubtract.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcSubtract:
    """
    (%1 - %2) : subtract nth operand from (n-1)th
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-subtract")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcSubtractOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcSubtractOutputs`).
        """
        ret = MrcalcSubtractOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcMultiplyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcMultiply.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcMultiply:
    """
    (%1 * %2) : multiply values
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-multiply")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcMultiplyOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcMultiplyOutputs`).
        """
        ret = MrcalcMultiplyOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcDivideOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcDivide.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcDivide:
    """
    (%1 / %2) : divide (n-1)th operand by nth
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-divide")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcDivideOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcDivideOutputs`).
        """
        ret = MrcalcDivideOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcMinOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcMin.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcMin:
    """
    min (%1, %2) : smallest of last two operands
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-min")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcMinOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcMinOutputs`).
        """
        ret = MrcalcMinOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcMaxOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcMax.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcMax:
    """
    max (%1, %2) : greatest of last two operands
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-max")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcMaxOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcMaxOutputs`).
        """
        ret = MrcalcMaxOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcLtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcLt.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcLt:
    """
    (%1 < %2) : less-than operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-lt")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcLtOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcLtOutputs`).
        """
        ret = MrcalcLtOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcGtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcGt.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcGt:
    """
    (%1 > %2) : greater-than operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-gt")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcGtOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcGtOutputs`).
        """
        ret = MrcalcGtOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcLeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcLe.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcLe:
    """
    (%1 <= %2) : less-than-or-equal-to operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-le")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcLeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcLeOutputs`).
        """
        ret = MrcalcLeOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcGeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcGe.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcGe:
    """
    (%1 >= %2) : greater-than-or-equal-to operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-ge")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcGeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcGeOutputs`).
        """
        ret = MrcalcGeOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcEqOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcEq.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcEq:
    """
    (%1 == %2) : equal-to operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-eq")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcEqOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcEqOutputs`).
        """
        ret = MrcalcEqOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcNeqOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcNeq.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcNeq:
    """
    (%1 != %2) : not-equal-to operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-neq")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcNeqOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcNeqOutputs`).
        """
        ret = MrcalcNeqOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcIfOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcIf.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcIf:
    """
    (%1 ? %2 : %3) : if first operand is true (non-zero), return second operand, otherwise return third operand
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-if")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcIfOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcIfOutputs`).
        """
        ret = MrcalcIfOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcReplaceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcReplace.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcReplace:
    """
    (%1, %2 -> %3) : Wherever first operand is equal to the second operand, replace with third operand
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-replace")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcReplaceOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcReplaceOutputs`).
        """
        ret = MrcalcReplaceOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcSqrtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcSqrt.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcSqrt:
    """
    sqrt (%1) : square root
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-sqrt")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcSqrtOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcSqrtOutputs`).
        """
        ret = MrcalcSqrtOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcPowOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcPow.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcPow:
    """
    %1^%2 : raise (n-1)th operand to nth power
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-pow")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcPowOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcPowOutputs`).
        """
        ret = MrcalcPowOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcRoundOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcRound.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcRound:
    """
    round (%1) : round to nearest integer
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-round")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcRoundOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcRoundOutputs`).
        """
        ret = MrcalcRoundOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcCeilOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcCeil.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcCeil:
    """
    ceil (%1) : round up to nearest integer
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-ceil")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcCeilOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcCeilOutputs`).
        """
        ret = MrcalcCeilOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcFloorOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcFloor.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcFloor:
    """
    floor (%1) : round down to nearest integer
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-floor")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcFloorOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcFloorOutputs`).
        """
        ret = MrcalcFloorOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcNotOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcNot.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcNot:
    """
    !%1 : NOT operator: true (1) if operand is false (i.e. zero)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-not")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcNotOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcNotOutputs`).
        """
        ret = MrcalcNotOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcAndOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcAnd.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcAnd:
    """
    (%1 && %2) : AND operator: true (1) if both operands are true (i.e. non-zero)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-and")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcAndOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcAndOutputs`).
        """
        ret = MrcalcAndOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcOrOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcOr.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcOr:
    """
    (%1 || %2) : OR operator: true (1) if either operand is true (i.e. non-zero)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-or")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcOrOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcOrOutputs`).
        """
        ret = MrcalcOrOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcXorOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcXor.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcXor:
    """
    (%1 ^^ %2) : XOR operator: true (1) if only one of the operands is true (i.e. non-zero)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-xor")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcXorOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcXorOutputs`).
        """
        ret = MrcalcXorOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcIsnanOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcIsnan.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcIsnan:
    """
    isnan (%1) : true (1) if operand is not-a-number (NaN)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-isnan")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcIsnanOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcIsnanOutputs`).
        """
        ret = MrcalcIsnanOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcIsinfOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcIsinf.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcIsinf:
    """
    isinf (%1) : true (1) if operand is infinite (Inf)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-isinf")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcIsinfOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcIsinfOutputs`).
        """
        ret = MrcalcIsinfOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcFiniteOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcFinite.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcFinite:
    """
    finite (%1) : true (1) if operand is finite (i.e. not NaN or Inf)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-finite")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcFiniteOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcFiniteOutputs`).
        """
        ret = MrcalcFiniteOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcComplexOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcComplex.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcComplex:
    """
    (%1 + %2 i) : create complex number using the last two operands as real,imaginary components
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-complex")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcComplexOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcComplexOutputs`).
        """
        ret = MrcalcComplexOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcPolarOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcPolar.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcPolar:
    """
    (%1 /_ %2) : create complex number using the last two operands as magnitude,phase components (phase in radians)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-polar")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcPolarOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcPolarOutputs`).
        """
        ret = MrcalcPolarOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcRealOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcReal.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcReal:
    """
    real (%1) : real part of complex number
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-real")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcRealOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcRealOutputs`).
        """
        ret = MrcalcRealOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcImagOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcImag.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcImag:
    """
    imag (%1) : imaginary part of complex number
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-imag")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcImagOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcImagOutputs`).
        """
        ret = MrcalcImagOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcPhaseOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcPhase.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcPhase:
    """
    phase (%1) : phase of complex number (use -abs for magnitude)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-phase")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcPhaseOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcPhaseOutputs`).
        """
        ret = MrcalcPhaseOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcConjOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcConj.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcConj:
    """
    conj (%1) : complex conjugate
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-conj")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcConjOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcConjOutputs`).
        """
        ret = MrcalcConjOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcProjOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcProj.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcProj:
    """
    proj (%1) : projection onto the Riemann sphere
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-proj")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcProjOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcProjOutputs`).
        """
        ret = MrcalcProjOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcExpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcExp.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcExp:
    """
    exp (%1) : exponential function
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-exp")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcExpOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcExpOutputs`).
        """
        ret = MrcalcExpOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcLogOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcLog.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcLog:
    """
    log (%1) : natural logarithm
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-log")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcLogOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcLogOutputs`).
        """
        ret = MrcalcLogOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcLog10Outputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcLog10.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcLog10:
    """
    log10 (%1) : common logarithm
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-log10")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcLog10Outputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcLog10Outputs`).
        """
        ret = MrcalcLog10Outputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcCosOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcCos.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcCos:
    """
    cos (%1) : cosine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-cos")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcCosOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcCosOutputs`).
        """
        ret = MrcalcCosOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcSinOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcSin.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcSin:
    """
    sin (%1) : sine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-sin")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcSinOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcSinOutputs`).
        """
        ret = MrcalcSinOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcTanOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcTan.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcTan:
    """
    tan (%1) : tangent
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-tan")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcTanOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcTanOutputs`).
        """
        ret = MrcalcTanOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcAcosOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcAcos.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcAcos:
    """
    acos (%1) : inverse cosine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-acos")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcAcosOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcAcosOutputs`).
        """
        ret = MrcalcAcosOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcAsinOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcAsin.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcAsin:
    """
    asin (%1) : inverse sine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-asin")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcAsinOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcAsinOutputs`).
        """
        ret = MrcalcAsinOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcAtanOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcAtan.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcAtan:
    """
    atan (%1) : inverse tangent
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-atan")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcAtanOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcAtanOutputs`).
        """
        ret = MrcalcAtanOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcCoshOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcCosh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcCosh:
    """
    cosh (%1) : hyperbolic cosine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-cosh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcCoshOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcCoshOutputs`).
        """
        ret = MrcalcCoshOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcSinhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcSinh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcSinh:
    """
    sinh (%1) : hyperbolic sine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-sinh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcSinhOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcSinhOutputs`).
        """
        ret = MrcalcSinhOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcTanhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcTanh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcTanh:
    """
    tanh (%1) : hyperbolic tangent
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-tanh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcTanhOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcTanhOutputs`).
        """
        ret = MrcalcTanhOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcAcoshOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcAcosh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcAcosh:
    """
    acosh (%1) : inverse hyperbolic cosine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-acosh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcAcoshOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcAcoshOutputs`).
        """
        ret = MrcalcAcoshOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcAsinhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcAsinh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcAsinh:
    """
    asinh (%1) : inverse hyperbolic sine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-asinh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcAsinhOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcAsinhOutputs`).
        """
        ret = MrcalcAsinhOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcAtanhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcAtanh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcAtanh:
    """
    atanh (%1) : inverse hyperbolic tangent
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-atanh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcAtanhOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcAtanhOutputs`).
        """
        ret = MrcalcAtanhOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcConfigOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcalcConfig.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class MrcalcConfig:
    """
    temporarily set the value of an MRtrix config file entry.
    """
    key: str
    """temporarily set the value of an MRtrix config file entry."""
    value: str
    """temporarily set the value of an MRtrix config file entry."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-config")
        cargs.append(self.key)
        cargs.append(self.value)
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MrcalcConfigOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MrcalcConfigOutputs`).
        """
        ret = MrcalcConfigOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mrcalc(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    abs_: typing.List[MrcalcAbsOutputs]
    """Subcommand outputs"""
    neg: typing.List[MrcalcNegOutputs]
    """Subcommand outputs"""
    add: typing.List[MrcalcAddOutputs]
    """Subcommand outputs"""
    subtract: typing.List[MrcalcSubtractOutputs]
    """Subcommand outputs"""
    multiply: typing.List[MrcalcMultiplyOutputs]
    """Subcommand outputs"""
    divide: typing.List[MrcalcDivideOutputs]
    """Subcommand outputs"""
    min_: typing.List[MrcalcMinOutputs]
    """Subcommand outputs"""
    max_: typing.List[MrcalcMaxOutputs]
    """Subcommand outputs"""
    lt: typing.List[MrcalcLtOutputs]
    """Subcommand outputs"""
    gt: typing.List[MrcalcGtOutputs]
    """Subcommand outputs"""
    le: typing.List[MrcalcLeOutputs]
    """Subcommand outputs"""
    ge: typing.List[MrcalcGeOutputs]
    """Subcommand outputs"""
    eq: typing.List[MrcalcEqOutputs]
    """Subcommand outputs"""
    neq: typing.List[MrcalcNeqOutputs]
    """Subcommand outputs"""
    if_: typing.List[MrcalcIfOutputs]
    """Subcommand outputs"""
    replace: typing.List[MrcalcReplaceOutputs]
    """Subcommand outputs"""
    sqrt: typing.List[MrcalcSqrtOutputs]
    """Subcommand outputs"""
    pow_: typing.List[MrcalcPowOutputs]
    """Subcommand outputs"""
    round_: typing.List[MrcalcRoundOutputs]
    """Subcommand outputs"""
    ceil: typing.List[MrcalcCeilOutputs]
    """Subcommand outputs"""
    floor: typing.List[MrcalcFloorOutputs]
    """Subcommand outputs"""
    not_: typing.List[MrcalcNotOutputs]
    """Subcommand outputs"""
    and_: typing.List[MrcalcAndOutputs]
    """Subcommand outputs"""
    or_: typing.List[MrcalcOrOutputs]
    """Subcommand outputs"""
    xor: typing.List[MrcalcXorOutputs]
    """Subcommand outputs"""
    isnan: typing.List[MrcalcIsnanOutputs]
    """Subcommand outputs"""
    isinf: typing.List[MrcalcIsinfOutputs]
    """Subcommand outputs"""
    finite: typing.List[MrcalcFiniteOutputs]
    """Subcommand outputs"""
    complex_: typing.List[MrcalcComplexOutputs]
    """Subcommand outputs"""
    polar: typing.List[MrcalcPolarOutputs]
    """Subcommand outputs"""
    real: typing.List[MrcalcRealOutputs]
    """Subcommand outputs"""
    imag: typing.List[MrcalcImagOutputs]
    """Subcommand outputs"""
    phase: typing.List[MrcalcPhaseOutputs]
    """Subcommand outputs"""
    conj: typing.List[MrcalcConjOutputs]
    """Subcommand outputs"""
    proj: typing.List[MrcalcProjOutputs]
    """Subcommand outputs"""
    exp: typing.List[MrcalcExpOutputs]
    """Subcommand outputs"""
    log: typing.List[MrcalcLogOutputs]
    """Subcommand outputs"""
    log10: typing.List[MrcalcLog10Outputs]
    """Subcommand outputs"""
    cos: typing.List[MrcalcCosOutputs]
    """Subcommand outputs"""
    sin: typing.List[MrcalcSinOutputs]
    """Subcommand outputs"""
    tan: typing.List[MrcalcTanOutputs]
    """Subcommand outputs"""
    acos: typing.List[MrcalcAcosOutputs]
    """Subcommand outputs"""
    asin: typing.List[MrcalcAsinOutputs]
    """Subcommand outputs"""
    atan: typing.List[MrcalcAtanOutputs]
    """Subcommand outputs"""
    cosh: typing.List[MrcalcCoshOutputs]
    """Subcommand outputs"""
    sinh: typing.List[MrcalcSinhOutputs]
    """Subcommand outputs"""
    tanh: typing.List[MrcalcTanhOutputs]
    """Subcommand outputs"""
    acosh: typing.List[MrcalcAcoshOutputs]
    """Subcommand outputs"""
    asinh: typing.List[MrcalcAsinhOutputs]
    """Subcommand outputs"""
    atanh: typing.List[MrcalcAtanhOutputs]
    """Subcommand outputs"""
    config: typing.List[MrcalcConfigOutputs]
    """Subcommand outputs"""


def mrcalc(
    operand: list[str],
    abs_: list[MrcalcAbs] = None,
    neg: list[MrcalcNeg] = None,
    add: list[MrcalcAdd] = None,
    subtract: list[MrcalcSubtract] = None,
    multiply: list[MrcalcMultiply] = None,
    divide: list[MrcalcDivide] = None,
    min_: list[MrcalcMin] = None,
    max_: list[MrcalcMax] = None,
    lt: list[MrcalcLt] = None,
    gt: list[MrcalcGt] = None,
    le: list[MrcalcLe] = None,
    ge: list[MrcalcGe] = None,
    eq: list[MrcalcEq] = None,
    neq: list[MrcalcNeq] = None,
    if_: list[MrcalcIf] = None,
    replace: list[MrcalcReplace] = None,
    sqrt: list[MrcalcSqrt] = None,
    pow_: list[MrcalcPow] = None,
    round_: list[MrcalcRound] = None,
    ceil: list[MrcalcCeil] = None,
    floor: list[MrcalcFloor] = None,
    not_: list[MrcalcNot] = None,
    and_: list[MrcalcAnd] = None,
    or_: list[MrcalcOr] = None,
    xor: list[MrcalcXor] = None,
    isnan: list[MrcalcIsnan] = None,
    isinf: list[MrcalcIsinf] = None,
    finite: list[MrcalcFinite] = None,
    complex_: list[MrcalcComplex] = None,
    polar: list[MrcalcPolar] = None,
    real: list[MrcalcReal] = None,
    imag: list[MrcalcImag] = None,
    phase: list[MrcalcPhase] = None,
    conj: list[MrcalcConj] = None,
    proj: list[MrcalcProj] = None,
    exp: list[MrcalcExp] = None,
    log: list[MrcalcLog] = None,
    log10: list[MrcalcLog10] = None,
    cos: list[MrcalcCos] = None,
    sin: list[MrcalcSin] = None,
    tan: list[MrcalcTan] = None,
    acos: list[MrcalcAcos] = None,
    asin: list[MrcalcAsin] = None,
    atan: list[MrcalcAtan] = None,
    cosh: list[MrcalcCosh] = None,
    sinh: list[MrcalcSinh] = None,
    tanh: list[MrcalcTanh] = None,
    acosh: list[MrcalcAcosh] = None,
    asinh: list[MrcalcAsinh] = None,
    atanh: list[MrcalcAtanh] = None,
    datatype: typing.Literal["spec"] | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[MrcalcConfig] = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner = None,
) -> MrcalcOutputs:
    """
    mrcalc by J-Donald Tournier (jdtournier@gmail.com).
    
    Apply generic voxel-wise mathematical operations to images.
    
    This command will only compute per-voxel operations. Use 'mrmath' to compute
    summary statistics across images or along image axes.
    
    This command uses a stack-based syntax, with operators (specified using
    options) operating on the top-most entries (i.e. images or values) in the
    stack. Operands (values or images) are pushed onto the stack in the order
    they appear (as arguments) on the command-line, and operators (specified as
    options) operate on and consume the top-most entries in the stack, and push
    their output as a new entry on the stack.
    
    As an additional feature, this command will allow images with different
    dimensions to be processed, provided they satisfy the following conditions:
    for each axis, the dimensions match if they are the same size, or one of
    them has size one. In the latter case, the entire image will be replicated
    along that axis. This allows for example a 4D image of size [ X Y Z N ] to
    be added to a 3D image of size [ X Y Z ], as if it consisted of N copies of
    the 3D image along the 4th axis (the missing dimension is assumed to have
    size 1). Another example would a single-voxel 4D image of size [ 1 1 1 N ],
    multiplied by a 3D image of size [ X Y Z ], which would allow the creation
    of a 4D image where each volume consists of the 3D image scaled by the
    corresponding value for that volume in the single-voxel image.
    
    References:
    
    .
    
    More information:
    https://mrtrix.readthedocs.io/en/latest/reference/commands/mrcalc.html
    
    Args:
        operand: an input image, intensity value, or the special keywords 'rand'
            (random number between 0 and 1) or 'randn' (random number from unit
            std.dev. normal distribution) or the mathematical constants 'e' and
            'pi'.
        abs_: |%1| : return absolute value (magnitude) of real or complex number
        neg: -%1 : negative value
        add: (%1 + %2) : add values
        subtract: (%1 - %2) : subtract nth operand from (n-1)th
        multiply: (%1 * %2) : multiply values
        divide: (%1 / %2) : divide (n-1)th operand by nth
        min_: min (%1, %2) : smallest of last two operands
        max_: max (%1, %2) : greatest of last two operands
        lt: (%1 < %2) : less-than operator (true=1, false=0)
        gt: (%1 > %2) : greater-than operator (true=1, false=0)
        le: (%1 <= %2) : less-than-or-equal-to operator (true=1, false=0)
        ge: (%1 >= %2) : greater-than-or-equal-to operator (true=1, false=0)
        eq: (%1 == %2) : equal-to operator (true=1, false=0)
        neq: (%1 != %2) : not-equal-to operator (true=1, false=0)
        if_: (%1 ? %2 : %3) : if first operand is true (non-zero), return second
            operand, otherwise return third operand
        replace: (%1, %2 -> %3) : Wherever first operand is equal to the second
            operand, replace with third operand
        sqrt: sqrt (%1) : square root
        pow_: %1^%2 : raise (n-1)th operand to nth power
        round_: round (%1) : round to nearest integer
        ceil: ceil (%1) : round up to nearest integer
        floor: floor (%1) : round down to nearest integer
        not_: !%1 : NOT operator: true (1) if operand is false (i.e. zero)
        and_: (%1 && %2) : AND operator: true (1) if both operands are true
            (i.e. non-zero)
        or_: (%1 || %2) : OR operator: true (1) if either operand is true (i.e.
            non-zero)
        xor: (%1 ^^ %2) : XOR operator: true (1) if only one of the operands is
            true (i.e. non-zero)
        isnan: isnan (%1) : true (1) if operand is not-a-number (NaN)
        isinf: isinf (%1) : true (1) if operand is infinite (Inf)
        finite: finite (%1) : true (1) if operand is finite (i.e. not NaN or
            Inf)
        complex_: (%1 + %2 i) : create complex number using the last two
            operands as real,imaginary components
        polar: (%1 /_ %2) : create complex number using the last two operands as
            magnitude,phase components (phase in radians)
        real: real (%1) : real part of complex number
        imag: imag (%1) : imaginary part of complex number
        phase: phase (%1) : phase of complex number (use -abs for magnitude)
        conj: conj (%1) : complex conjugate
        proj: proj (%1) : projection onto the Riemann sphere
        exp: exp (%1) : exponential function
        log: log (%1) : natural logarithm
        log10: log10 (%1) : common logarithm
        cos: cos (%1) : cosine
        sin: sin (%1) : sine
        tan: tan (%1) : tangent
        acos: acos (%1) : inverse cosine
        asin: asin (%1) : inverse sine
        atan: atan (%1) : inverse tangent
        cosh: cosh (%1) : hyperbolic cosine
        sinh: sinh (%1) : hyperbolic sine
        tanh: tanh (%1) : hyperbolic tangent
        acosh: acosh (%1) : inverse hyperbolic cosine
        asinh: asinh (%1) : inverse hyperbolic sine
        atanh: atanh (%1) : inverse hyperbolic tangent
        datatype: specify output image data type. Valid choices are: float32,
            float32le, float32be, float64, float64le, float64be, int64, uint64,
            int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le,
            int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be,
            cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be,
            int8, uint8, bit.
        info: display information messages.
        quiet: do not display information messages or progress status;
            alternatively, this can be achieved by setting the MRTRIX_QUIET
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications (set
            to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `MrcalcOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRCALC_METADATA)
    cargs = []
    cargs.append("mrcalc")
    if abs_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in abs_] for a in c])
    if neg is not None:
        cargs.extend([a for c in [s.run(execution) for s in neg] for a in c])
    if add is not None:
        cargs.extend([a for c in [s.run(execution) for s in add] for a in c])
    if subtract is not None:
        cargs.extend([a for c in [s.run(execution) for s in subtract] for a in c])
    if multiply is not None:
        cargs.extend([a for c in [s.run(execution) for s in multiply] for a in c])
    if divide is not None:
        cargs.extend([a for c in [s.run(execution) for s in divide] for a in c])
    if min_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in min_] for a in c])
    if max_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in max_] for a in c])
    if lt is not None:
        cargs.extend([a for c in [s.run(execution) for s in lt] for a in c])
    if gt is not None:
        cargs.extend([a for c in [s.run(execution) for s in gt] for a in c])
    if le is not None:
        cargs.extend([a for c in [s.run(execution) for s in le] for a in c])
    if ge is not None:
        cargs.extend([a for c in [s.run(execution) for s in ge] for a in c])
    if eq is not None:
        cargs.extend([a for c in [s.run(execution) for s in eq] for a in c])
    if neq is not None:
        cargs.extend([a for c in [s.run(execution) for s in neq] for a in c])
    if if_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in if_] for a in c])
    if replace is not None:
        cargs.extend([a for c in [s.run(execution) for s in replace] for a in c])
    if sqrt is not None:
        cargs.extend([a for c in [s.run(execution) for s in sqrt] for a in c])
    if pow_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in pow_] for a in c])
    if round_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in round_] for a in c])
    if ceil is not None:
        cargs.extend([a for c in [s.run(execution) for s in ceil] for a in c])
    if floor is not None:
        cargs.extend([a for c in [s.run(execution) for s in floor] for a in c])
    if not_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in not_] for a in c])
    if and_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in and_] for a in c])
    if or_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in or_] for a in c])
    if xor is not None:
        cargs.extend([a for c in [s.run(execution) for s in xor] for a in c])
    if isnan is not None:
        cargs.extend([a for c in [s.run(execution) for s in isnan] for a in c])
    if isinf is not None:
        cargs.extend([a for c in [s.run(execution) for s in isinf] for a in c])
    if finite is not None:
        cargs.extend([a for c in [s.run(execution) for s in finite] for a in c])
    if complex_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in complex_] for a in c])
    if polar is not None:
        cargs.extend([a for c in [s.run(execution) for s in polar] for a in c])
    if real is not None:
        cargs.extend([a for c in [s.run(execution) for s in real] for a in c])
    if imag is not None:
        cargs.extend([a for c in [s.run(execution) for s in imag] for a in c])
    if phase is not None:
        cargs.extend([a for c in [s.run(execution) for s in phase] for a in c])
    if conj is not None:
        cargs.extend([a for c in [s.run(execution) for s in conj] for a in c])
    if proj is not None:
        cargs.extend([a for c in [s.run(execution) for s in proj] for a in c])
    if exp is not None:
        cargs.extend([a for c in [s.run(execution) for s in exp] for a in c])
    if log is not None:
        cargs.extend([a for c in [s.run(execution) for s in log] for a in c])
    if log10 is not None:
        cargs.extend([a for c in [s.run(execution) for s in log10] for a in c])
    if cos is not None:
        cargs.extend([a for c in [s.run(execution) for s in cos] for a in c])
    if sin is not None:
        cargs.extend([a for c in [s.run(execution) for s in sin] for a in c])
    if tan is not None:
        cargs.extend([a for c in [s.run(execution) for s in tan] for a in c])
    if acos is not None:
        cargs.extend([a for c in [s.run(execution) for s in acos] for a in c])
    if asin is not None:
        cargs.extend([a for c in [s.run(execution) for s in asin] for a in c])
    if atan is not None:
        cargs.extend([a for c in [s.run(execution) for s in atan] for a in c])
    if cosh is not None:
        cargs.extend([a for c in [s.run(execution) for s in cosh] for a in c])
    if sinh is not None:
        cargs.extend([a for c in [s.run(execution) for s in sinh] for a in c])
    if tanh is not None:
        cargs.extend([a for c in [s.run(execution) for s in tanh] for a in c])
    if acosh is not None:
        cargs.extend([a for c in [s.run(execution) for s in acosh] for a in c])
    if asinh is not None:
        cargs.extend([a for c in [s.run(execution) for s in asinh] for a in c])
    if atanh is not None:
        cargs.extend([a for c in [s.run(execution) for s in atanh] for a in c])
    if datatype is not None:
        cargs.extend(["-datatype", datatype])
    if info:
        cargs.append("-info")
    if quiet:
        cargs.append("-quiet")
    if debug:
        cargs.append("-debug")
    if force:
        cargs.append("-force")
    if nthreads is not None:
        cargs.extend(["-nthreads", str(nthreads)])
    if config is not None:
        cargs.extend([a for c in [s.run(execution) for s in config] for a in c])
    if help_:
        cargs.append("-help")
    if version:
        cargs.append("-version")
    cargs.extend(operand)
    ret = MrcalcOutputs(
        root=execution.output_file("."),
        abs_=[abs_.outputs(execution) for abs_ in abs_],
        neg=[neg.outputs(execution) for neg in neg],
        add=[add.outputs(execution) for add in add],
        subtract=[subtract.outputs(execution) for subtract in subtract],
        multiply=[multiply.outputs(execution) for multiply in multiply],
        divide=[divide.outputs(execution) for divide in divide],
        min_=[min_.outputs(execution) for min_ in min_],
        max_=[max_.outputs(execution) for max_ in max_],
        lt=[lt.outputs(execution) for lt in lt],
        gt=[gt.outputs(execution) for gt in gt],
        le=[le.outputs(execution) for le in le],
        ge=[ge.outputs(execution) for ge in ge],
        eq=[eq.outputs(execution) for eq in eq],
        neq=[neq.outputs(execution) for neq in neq],
        if_=[if_.outputs(execution) for if_ in if_],
        replace=[replace.outputs(execution) for replace in replace],
        sqrt=[sqrt.outputs(execution) for sqrt in sqrt],
        pow_=[pow_.outputs(execution) for pow_ in pow_],
        round_=[round_.outputs(execution) for round_ in round_],
        ceil=[ceil.outputs(execution) for ceil in ceil],
        floor=[floor.outputs(execution) for floor in floor],
        not_=[not_.outputs(execution) for not_ in not_],
        and_=[and_.outputs(execution) for and_ in and_],
        or_=[or_.outputs(execution) for or_ in or_],
        xor=[xor.outputs(execution) for xor in xor],
        isnan=[isnan.outputs(execution) for isnan in isnan],
        isinf=[isinf.outputs(execution) for isinf in isinf],
        finite=[finite.outputs(execution) for finite in finite],
        complex_=[complex_.outputs(execution) for complex_ in complex_],
        polar=[polar.outputs(execution) for polar in polar],
        real=[real.outputs(execution) for real in real],
        imag=[imag.outputs(execution) for imag in imag],
        phase=[phase.outputs(execution) for phase in phase],
        conj=[conj.outputs(execution) for conj in conj],
        proj=[proj.outputs(execution) for proj in proj],
        exp=[exp.outputs(execution) for exp in exp],
        log=[log.outputs(execution) for log in log],
        log10=[log10.outputs(execution) for log10 in log10],
        cos=[cos.outputs(execution) for cos in cos],
        sin=[sin.outputs(execution) for sin in sin],
        tan=[tan.outputs(execution) for tan in tan],
        acos=[acos.outputs(execution) for acos in acos],
        asin=[asin.outputs(execution) for asin in asin],
        atan=[atan.outputs(execution) for atan in atan],
        cosh=[cosh.outputs(execution) for cosh in cosh],
        sinh=[sinh.outputs(execution) for sinh in sinh],
        tanh=[tanh.outputs(execution) for tanh in tanh],
        acosh=[acosh.outputs(execution) for acosh in acosh],
        asinh=[asinh.outputs(execution) for asinh in asinh],
        atanh=[atanh.outputs(execution) for atanh in atanh],
        config=[config.outputs(execution) for config in config],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "MRCALC_METADATA",
    "MrcalcAbs",
    "MrcalcAbsOutputs",
    "MrcalcAcos",
    "MrcalcAcosOutputs",
    "MrcalcAcosh",
    "MrcalcAcoshOutputs",
    "MrcalcAdd",
    "MrcalcAddOutputs",
    "MrcalcAnd",
    "MrcalcAndOutputs",
    "MrcalcAsin",
    "MrcalcAsinOutputs",
    "MrcalcAsinh",
    "MrcalcAsinhOutputs",
    "MrcalcAtan",
    "MrcalcAtanOutputs",
    "MrcalcAtanh",
    "MrcalcAtanhOutputs",
    "MrcalcCeil",
    "MrcalcCeilOutputs",
    "MrcalcComplex",
    "MrcalcComplexOutputs",
    "MrcalcConfig",
    "MrcalcConfigOutputs",
    "MrcalcConj",
    "MrcalcConjOutputs",
    "MrcalcCos",
    "MrcalcCosOutputs",
    "MrcalcCosh",
    "MrcalcCoshOutputs",
    "MrcalcDivide",
    "MrcalcDivideOutputs",
    "MrcalcEq",
    "MrcalcEqOutputs",
    "MrcalcExp",
    "MrcalcExpOutputs",
    "MrcalcFinite",
    "MrcalcFiniteOutputs",
    "MrcalcFloor",
    "MrcalcFloorOutputs",
    "MrcalcGe",
    "MrcalcGeOutputs",
    "MrcalcGt",
    "MrcalcGtOutputs",
    "MrcalcIf",
    "MrcalcIfOutputs",
    "MrcalcImag",
    "MrcalcImagOutputs",
    "MrcalcIsinf",
    "MrcalcIsinfOutputs",
    "MrcalcIsnan",
    "MrcalcIsnanOutputs",
    "MrcalcLe",
    "MrcalcLeOutputs",
    "MrcalcLog",
    "MrcalcLog10",
    "MrcalcLog10Outputs",
    "MrcalcLogOutputs",
    "MrcalcLt",
    "MrcalcLtOutputs",
    "MrcalcMax",
    "MrcalcMaxOutputs",
    "MrcalcMin",
    "MrcalcMinOutputs",
    "MrcalcMultiply",
    "MrcalcMultiplyOutputs",
    "MrcalcNeg",
    "MrcalcNegOutputs",
    "MrcalcNeq",
    "MrcalcNeqOutputs",
    "MrcalcNot",
    "MrcalcNotOutputs",
    "MrcalcOr",
    "MrcalcOrOutputs",
    "MrcalcOutputs",
    "MrcalcPhase",
    "MrcalcPhaseOutputs",
    "MrcalcPolar",
    "MrcalcPolarOutputs",
    "MrcalcPow",
    "MrcalcPowOutputs",
    "MrcalcProj",
    "MrcalcProjOutputs",
    "MrcalcReal",
    "MrcalcRealOutputs",
    "MrcalcReplace",
    "MrcalcReplaceOutputs",
    "MrcalcRound",
    "MrcalcRoundOutputs",
    "MrcalcSin",
    "MrcalcSinOutputs",
    "MrcalcSinh",
    "MrcalcSinhOutputs",
    "MrcalcSqrt",
    "MrcalcSqrtOutputs",
    "MrcalcSubtract",
    "MrcalcSubtractOutputs",
    "MrcalcTan",
    "MrcalcTanOutputs",
    "MrcalcTanh",
    "MrcalcTanhOutputs",
    "MrcalcXor",
    "MrcalcXorOutputs",
    "mrcalc",
]
