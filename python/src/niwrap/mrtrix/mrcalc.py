# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


MRCALC_METADATA = Metadata(
    id="0a433c2d6189801142076f222e9ab90c9183c047",
    name="mrcalc",
    container_image_type="docker",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


class AbsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Abs.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Abs:
    """
    |%1| : return absolute value (magnitude) of real or complex number
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-abs")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> AbsOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `AbsOutputs`).
        """
        ret = AbsOutputs(
            root=execution.output_file("."),
        )
        return ret


class NegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Neg.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Neg:
    """
    -%1 : negative value
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-neg")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> NegOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `NegOutputs`).
        """
        ret = NegOutputs(
            root=execution.output_file("."),
        )
        return ret


class AddOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Add.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Add:
    """
    (%1 + %2) : add values
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-add")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> AddOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `AddOutputs`).
        """
        ret = AddOutputs(
            root=execution.output_file("."),
        )
        return ret


class SubtractOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Subtract.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Subtract:
    """
    (%1 - %2) : subtract nth operand from (n-1)th
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-subtract")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> SubtractOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `SubtractOutputs`).
        """
        ret = SubtractOutputs(
            root=execution.output_file("."),
        )
        return ret


class MultiplyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Multiply.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Multiply:
    """
    (%1 * %2) : multiply values
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-multiply")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MultiplyOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MultiplyOutputs`).
        """
        ret = MultiplyOutputs(
            root=execution.output_file("."),
        )
        return ret


class DivideOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Divide.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Divide:
    """
    (%1 / %2) : divide (n-1)th operand by nth
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-divide")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> DivideOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `DivideOutputs`).
        """
        ret = DivideOutputs(
            root=execution.output_file("."),
        )
        return ret


class MinOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Min.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Min:
    """
    min (%1, %2) : smallest of last two operands
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-min")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MinOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MinOutputs`).
        """
        ret = MinOutputs(
            root=execution.output_file("."),
        )
        return ret


class MaxOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Max.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Max:
    """
    max (%1, %2) : greatest of last two operands
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-max")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> MaxOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `MaxOutputs`).
        """
        ret = MaxOutputs(
            root=execution.output_file("."),
        )
        return ret


class LtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Lt.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Lt:
    """
    (%1 < %2) : less-than operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-lt")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LtOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LtOutputs`).
        """
        ret = LtOutputs(
            root=execution.output_file("."),
        )
        return ret


class GtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Gt.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Gt:
    """
    (%1 > %2) : greater-than operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-gt")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> GtOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `GtOutputs`).
        """
        ret = GtOutputs(
            root=execution.output_file("."),
        )
        return ret


class LeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Le.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Le:
    """
    (%1 <= %2) : less-than-or-equal-to operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-le")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LeOutputs`).
        """
        ret = LeOutputs(
            root=execution.output_file("."),
        )
        return ret


class GeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Ge.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Ge:
    """
    (%1 >= %2) : greater-than-or-equal-to operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-ge")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> GeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `GeOutputs`).
        """
        ret = GeOutputs(
            root=execution.output_file("."),
        )
        return ret


class EqOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Eq.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Eq:
    """
    (%1 == %2) : equal-to operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-eq")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> EqOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `EqOutputs`).
        """
        ret = EqOutputs(
            root=execution.output_file("."),
        )
        return ret


class NeqOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Neq.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Neq:
    """
    (%1 != %2) : not-equal-to operator (true=1, false=0)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-neq")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> NeqOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `NeqOutputs`).
        """
        ret = NeqOutputs(
            root=execution.output_file("."),
        )
        return ret


class IfOutputs(typing.NamedTuple):
    """
    Output object returned when calling `If.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class If:
    """
    (%1 ? %2 : %3) : if first operand is true (non-zero), return second operand, otherwise return third operand
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-if")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> IfOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `IfOutputs`).
        """
        ret = IfOutputs(
            root=execution.output_file("."),
        )
        return ret


class ReplaceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Replace.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Replace:
    """
    (%1, %2 -> %3) : Wherever first operand is equal to the second operand, replace with third operand
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-replace")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> ReplaceOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `ReplaceOutputs`).
        """
        ret = ReplaceOutputs(
            root=execution.output_file("."),
        )
        return ret


class SqrtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Sqrt.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Sqrt:
    """
    sqrt (%1) : square root
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-sqrt")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> SqrtOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `SqrtOutputs`).
        """
        ret = SqrtOutputs(
            root=execution.output_file("."),
        )
        return ret


class PowOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Pow.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Pow:
    """
    %1^%2 : raise (n-1)th operand to nth power
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-pow")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> PowOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `PowOutputs`).
        """
        ret = PowOutputs(
            root=execution.output_file("."),
        )
        return ret


class RoundOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Round.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Round:
    """
    round (%1) : round to nearest integer
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-round")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> RoundOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `RoundOutputs`).
        """
        ret = RoundOutputs(
            root=execution.output_file("."),
        )
        return ret


class CeilOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Ceil.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Ceil:
    """
    ceil (%1) : round up to nearest integer
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-ceil")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CeilOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CeilOutputs`).
        """
        ret = CeilOutputs(
            root=execution.output_file("."),
        )
        return ret


class FloorOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Floor.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Floor:
    """
    floor (%1) : round down to nearest integer
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-floor")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> FloorOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `FloorOutputs`).
        """
        ret = FloorOutputs(
            root=execution.output_file("."),
        )
        return ret


class NotOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Not.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Not:
    """
    !%1 : NOT operator: true (1) if operand is false (i.e. zero)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-not")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> NotOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `NotOutputs`).
        """
        ret = NotOutputs(
            root=execution.output_file("."),
        )
        return ret


class AndOutputs(typing.NamedTuple):
    """
    Output object returned when calling `And.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class And:
    """
    (%1 && %2) : AND operator: true (1) if both operands are true (i.e. non-zero)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-and")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> AndOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `AndOutputs`).
        """
        ret = AndOutputs(
            root=execution.output_file("."),
        )
        return ret


class OrOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Or.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Or:
    """
    (%1 || %2) : OR operator: true (1) if either operand is true (i.e. non-zero)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-or")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> OrOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `OrOutputs`).
        """
        ret = OrOutputs(
            root=execution.output_file("."),
        )
        return ret


class XorOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Xor.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Xor:
    """
    (%1 ^^ %2) : XOR operator: true (1) if only one of the operands is true (i.e. non-zero)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-xor")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> XorOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `XorOutputs`).
        """
        ret = XorOutputs(
            root=execution.output_file("."),
        )
        return ret


class IsnanOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Isnan.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Isnan:
    """
    isnan (%1) : true (1) if operand is not-a-number (NaN)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-isnan")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> IsnanOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `IsnanOutputs`).
        """
        ret = IsnanOutputs(
            root=execution.output_file("."),
        )
        return ret


class IsinfOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Isinf.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Isinf:
    """
    isinf (%1) : true (1) if operand is infinite (Inf)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-isinf")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> IsinfOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `IsinfOutputs`).
        """
        ret = IsinfOutputs(
            root=execution.output_file("."),
        )
        return ret


class FiniteOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Finite.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Finite:
    """
    finite (%1) : true (1) if operand is finite (i.e. not NaN or Inf)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-finite")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> FiniteOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `FiniteOutputs`).
        """
        ret = FiniteOutputs(
            root=execution.output_file("."),
        )
        return ret


class ComplexOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Complex.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Complex:
    """
    (%1 + %2 i) : create complex number using the last two operands as real,imaginary components
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-complex")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> ComplexOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `ComplexOutputs`).
        """
        ret = ComplexOutputs(
            root=execution.output_file("."),
        )
        return ret


class PolarOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Polar.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Polar:
    """
    (%1 /_ %2) : create complex number using the last two operands as magnitude,phase components (phase in radians)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-polar")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> PolarOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `PolarOutputs`).
        """
        ret = PolarOutputs(
            root=execution.output_file("."),
        )
        return ret


class RealOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Real.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Real:
    """
    real (%1) : real part of complex number
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-real")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> RealOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `RealOutputs`).
        """
        ret = RealOutputs(
            root=execution.output_file("."),
        )
        return ret


class ImagOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Imag.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Imag:
    """
    imag (%1) : imaginary part of complex number
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-imag")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> ImagOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `ImagOutputs`).
        """
        ret = ImagOutputs(
            root=execution.output_file("."),
        )
        return ret


class PhaseOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Phase.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Phase:
    """
    phase (%1) : phase of complex number (use -abs for magnitude)
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-phase")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> PhaseOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `PhaseOutputs`).
        """
        ret = PhaseOutputs(
            root=execution.output_file("."),
        )
        return ret


class ConjOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Conj.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Conj:
    """
    conj (%1) : complex conjugate
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-conj")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> ConjOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `ConjOutputs`).
        """
        ret = ConjOutputs(
            root=execution.output_file("."),
        )
        return ret


class ProjOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Proj.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Proj:
    """
    proj (%1) : projection onto the Riemann sphere
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-proj")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> ProjOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `ProjOutputs`).
        """
        ret = ProjOutputs(
            root=execution.output_file("."),
        )
        return ret


class ExpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Exp.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Exp:
    """
    exp (%1) : exponential function
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-exp")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> ExpOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `ExpOutputs`).
        """
        ret = ExpOutputs(
            root=execution.output_file("."),
        )
        return ret


class LogOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Log.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Log:
    """
    log (%1) : natural logarithm
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-log")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> LogOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `LogOutputs`).
        """
        ret = LogOutputs(
            root=execution.output_file("."),
        )
        return ret


class Log10Outputs(typing.NamedTuple):
    """
    Output object returned when calling `Log10.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Log10:
    """
    log10 (%1) : common logarithm
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-log10")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> Log10Outputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `Log10Outputs`).
        """
        ret = Log10Outputs(
            root=execution.output_file("."),
        )
        return ret


class CosOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Cos.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Cos:
    """
    cos (%1) : cosine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-cos")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CosOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CosOutputs`).
        """
        ret = CosOutputs(
            root=execution.output_file("."),
        )
        return ret


class SinOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Sin.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Sin:
    """
    sin (%1) : sine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-sin")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> SinOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `SinOutputs`).
        """
        ret = SinOutputs(
            root=execution.output_file("."),
        )
        return ret


class TanOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Tan.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Tan:
    """
    tan (%1) : tangent
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-tan")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TanOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TanOutputs`).
        """
        ret = TanOutputs(
            root=execution.output_file("."),
        )
        return ret


class AcosOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Acos.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Acos:
    """
    acos (%1) : inverse cosine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-acos")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> AcosOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `AcosOutputs`).
        """
        ret = AcosOutputs(
            root=execution.output_file("."),
        )
        return ret


class AsinOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Asin.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Asin:
    """
    asin (%1) : inverse sine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-asin")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> AsinOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `AsinOutputs`).
        """
        ret = AsinOutputs(
            root=execution.output_file("."),
        )
        return ret


class AtanOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Atan.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Atan:
    """
    atan (%1) : inverse tangent
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-atan")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> AtanOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `AtanOutputs`).
        """
        ret = AtanOutputs(
            root=execution.output_file("."),
        )
        return ret


class CoshOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Cosh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Cosh:
    """
    cosh (%1) : hyperbolic cosine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-cosh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> CoshOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `CoshOutputs`).
        """
        ret = CoshOutputs(
            root=execution.output_file("."),
        )
        return ret


class SinhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Sinh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Sinh:
    """
    sinh (%1) : hyperbolic sine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-sinh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> SinhOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `SinhOutputs`).
        """
        ret = SinhOutputs(
            root=execution.output_file("."),
        )
        return ret


class TanhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Tanh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Tanh:
    """
    tanh (%1) : hyperbolic tangent
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-tanh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TanhOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TanhOutputs`).
        """
        ret = TanhOutputs(
            root=execution.output_file("."),
        )
        return ret


class AcoshOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Acosh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Acosh:
    """
    acosh (%1) : inverse hyperbolic cosine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-acosh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> AcoshOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `AcoshOutputs`).
        """
        ret = AcoshOutputs(
            root=execution.output_file("."),
        )
        return ret


class AsinhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Asinh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Asinh:
    """
    asinh (%1) : inverse hyperbolic sine
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-asinh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> AsinhOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `AsinhOutputs`).
        """
        ret = AsinhOutputs(
            root=execution.output_file("."),
        )
        return ret


class AtanhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Atanh.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Atanh:
    """
    atanh (%1) : inverse hyperbolic tangent
    """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-atanh")
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> AtanhOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `AtanhOutputs`).
        """
        ret = AtanhOutputs(
            root=execution.output_file("."),
        )
        return ret


class ConfigOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Config.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class Config:
    """
    temporarily set the value of an MRtrix config file entry.
    """
    key: str
    """temporarily set the value of an MRtrix config file entry."""
    value: str
    """temporarily set the value of an MRtrix config file entry."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-config")
        cargs.append(self.key)
        cargs.append(self.value)
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> ConfigOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `ConfigOutputs`).
        """
        ret = ConfigOutputs(
            root=execution.output_file("."),
        )
        return ret


class MrcalcOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mrcalc(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    abs_: AbsOutputs
    """Subcommand outputs"""
    neg: NegOutputs
    """Subcommand outputs"""
    add: AddOutputs
    """Subcommand outputs"""
    subtract: SubtractOutputs
    """Subcommand outputs"""
    multiply: MultiplyOutputs
    """Subcommand outputs"""
    divide: DivideOutputs
    """Subcommand outputs"""
    min_: MinOutputs
    """Subcommand outputs"""
    max_: MaxOutputs
    """Subcommand outputs"""
    lt: LtOutputs
    """Subcommand outputs"""
    gt: GtOutputs
    """Subcommand outputs"""
    le: LeOutputs
    """Subcommand outputs"""
    ge: GeOutputs
    """Subcommand outputs"""
    eq: EqOutputs
    """Subcommand outputs"""
    neq: NeqOutputs
    """Subcommand outputs"""
    if_: IfOutputs
    """Subcommand outputs"""
    replace: ReplaceOutputs
    """Subcommand outputs"""
    sqrt: SqrtOutputs
    """Subcommand outputs"""
    pow_: PowOutputs
    """Subcommand outputs"""
    round_: RoundOutputs
    """Subcommand outputs"""
    ceil: CeilOutputs
    """Subcommand outputs"""
    floor: FloorOutputs
    """Subcommand outputs"""
    not_: NotOutputs
    """Subcommand outputs"""
    and_: AndOutputs
    """Subcommand outputs"""
    or_: OrOutputs
    """Subcommand outputs"""
    xor: XorOutputs
    """Subcommand outputs"""
    isnan: IsnanOutputs
    """Subcommand outputs"""
    isinf: IsinfOutputs
    """Subcommand outputs"""
    finite: FiniteOutputs
    """Subcommand outputs"""
    complex_: ComplexOutputs
    """Subcommand outputs"""
    polar: PolarOutputs
    """Subcommand outputs"""
    real: RealOutputs
    """Subcommand outputs"""
    imag: ImagOutputs
    """Subcommand outputs"""
    phase: PhaseOutputs
    """Subcommand outputs"""
    conj: ConjOutputs
    """Subcommand outputs"""
    proj: ProjOutputs
    """Subcommand outputs"""
    exp: ExpOutputs
    """Subcommand outputs"""
    log: LogOutputs
    """Subcommand outputs"""
    log10: Log10Outputs
    """Subcommand outputs"""
    cos: CosOutputs
    """Subcommand outputs"""
    sin: SinOutputs
    """Subcommand outputs"""
    tan: TanOutputs
    """Subcommand outputs"""
    acos: AcosOutputs
    """Subcommand outputs"""
    asin: AsinOutputs
    """Subcommand outputs"""
    atan: AtanOutputs
    """Subcommand outputs"""
    cosh: CoshOutputs
    """Subcommand outputs"""
    sinh: SinhOutputs
    """Subcommand outputs"""
    tanh: TanhOutputs
    """Subcommand outputs"""
    acosh: AcoshOutputs
    """Subcommand outputs"""
    asinh: AsinhOutputs
    """Subcommand outputs"""
    atanh: AtanhOutputs
    """Subcommand outputs"""
    config: ConfigOutputs
    """Subcommand outputs"""


def mrcalc(
    operand: list[str],
    abs_: list[Abs] = None,
    neg: list[Neg] = None,
    add: list[Add] = None,
    subtract: list[Subtract] = None,
    multiply: list[Multiply] = None,
    divide: list[Divide] = None,
    min_: list[Min] = None,
    max_: list[Max] = None,
    lt: list[Lt] = None,
    gt: list[Gt] = None,
    le: list[Le] = None,
    ge: list[Ge] = None,
    eq: list[Eq] = None,
    neq: list[Neq] = None,
    if_: list[If] = None,
    replace: list[Replace] = None,
    sqrt: list[Sqrt] = None,
    pow_: list[Pow] = None,
    round_: list[Round] = None,
    ceil: list[Ceil] = None,
    floor: list[Floor] = None,
    not_: list[Not] = None,
    and_: list[And] = None,
    or_: list[Or] = None,
    xor: list[Xor] = None,
    isnan: list[Isnan] = None,
    isinf: list[Isinf] = None,
    finite: list[Finite] = None,
    complex_: list[Complex] = None,
    polar: list[Polar] = None,
    real: list[Real] = None,
    imag: list[Imag] = None,
    phase: list[Phase] = None,
    conj: list[Conj] = None,
    proj: list[Proj] = None,
    exp: list[Exp] = None,
    log: list[Log] = None,
    log10: list[Log10] = None,
    cos: list[Cos] = None,
    sin: list[Sin] = None,
    tan: list[Tan] = None,
    acos: list[Acos] = None,
    asin: list[Asin] = None,
    atan: list[Atan] = None,
    cosh: list[Cosh] = None,
    sinh: list[Sinh] = None,
    tanh: list[Tanh] = None,
    acosh: list[Acosh] = None,
    asinh: list[Asinh] = None,
    atanh: list[Atanh] = None,
    datatype: typing.Literal["spec"] | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Config] = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner = None,
) -> MrcalcOutputs:
    """
    mrcalc by J-Donald Tournier (jdtournier@gmail.com).
    
    Apply generic voxel-wise mathematical operations to images.
    
    This command will only compute per-voxel operations. Use 'mrmath' to compute
    summary statistics across images or along image axes.
    
    This command uses a stack-based syntax, with operators (specified using
    options) operating on the top-most entries (i.e. images or values) in the
    stack. Operands (values or images) are pushed onto the stack in the order
    they appear (as arguments) on the command-line, and operators (specified as
    options) operate on and consume the top-most entries in the stack, and push
    their output as a new entry on the stack.
    
    As an additional feature, this command will allow images with different
    dimensions to be processed, provided they satisfy the following conditions:
    for each axis, the dimensions match if they are the same size, or one of
    them has size one. In the latter case, the entire image will be replicated
    along that axis. This allows for example a 4D image of size [ X Y Z N ] to
    be added to a 3D image of size [ X Y Z ], as if it consisted of N copies of
    the 3D image along the 4th axis (the missing dimension is assumed to have
    size 1). Another example would a single-voxel 4D image of size [ 1 1 1 N ],
    multiplied by a 3D image of size [ X Y Z ], which would allow the creation
    of a 4D image where each volume consists of the 3D image scaled by the
    corresponding value for that volume in the single-voxel image.
    
    References:
    
    .
    
    More information:
    https://mrtrix.readthedocs.io/en/latest/reference/commands/mrcalc.html
    
    Args:
        operand: an input image, intensity value, or the special keywords 'rand'
            (random number between 0 and 1) or 'randn' (random number from unit
            std.dev. normal distribution) or the mathematical constants 'e' and
            'pi'.
        abs_: |%1| : return absolute value (magnitude) of real or complex number
        neg: -%1 : negative value
        add: (%1 + %2) : add values
        subtract: (%1 - %2) : subtract nth operand from (n-1)th
        multiply: (%1 * %2) : multiply values
        divide: (%1 / %2) : divide (n-1)th operand by nth
        min_: min (%1, %2) : smallest of last two operands
        max_: max (%1, %2) : greatest of last two operands
        lt: (%1 < %2) : less-than operator (true=1, false=0)
        gt: (%1 > %2) : greater-than operator (true=1, false=0)
        le: (%1 <= %2) : less-than-or-equal-to operator (true=1, false=0)
        ge: (%1 >= %2) : greater-than-or-equal-to operator (true=1, false=0)
        eq: (%1 == %2) : equal-to operator (true=1, false=0)
        neq: (%1 != %2) : not-equal-to operator (true=1, false=0)
        if_: (%1 ? %2 : %3) : if first operand is true (non-zero), return second
            operand, otherwise return third operand
        replace: (%1, %2 -> %3) : Wherever first operand is equal to the second
            operand, replace with third operand
        sqrt: sqrt (%1) : square root
        pow_: %1^%2 : raise (n-1)th operand to nth power
        round_: round (%1) : round to nearest integer
        ceil: ceil (%1) : round up to nearest integer
        floor: floor (%1) : round down to nearest integer
        not_: !%1 : NOT operator: true (1) if operand is false (i.e. zero)
        and_: (%1 && %2) : AND operator: true (1) if both operands are true
            (i.e. non-zero)
        or_: (%1 || %2) : OR operator: true (1) if either operand is true (i.e.
            non-zero)
        xor: (%1 ^^ %2) : XOR operator: true (1) if only one of the operands is
            true (i.e. non-zero)
        isnan: isnan (%1) : true (1) if operand is not-a-number (NaN)
        isinf: isinf (%1) : true (1) if operand is infinite (Inf)
        finite: finite (%1) : true (1) if operand is finite (i.e. not NaN or
            Inf)
        complex_: (%1 + %2 i) : create complex number using the last two
            operands as real,imaginary components
        polar: (%1 /_ %2) : create complex number using the last two operands as
            magnitude,phase components (phase in radians)
        real: real (%1) : real part of complex number
        imag: imag (%1) : imaginary part of complex number
        phase: phase (%1) : phase of complex number (use -abs for magnitude)
        conj: conj (%1) : complex conjugate
        proj: proj (%1) : projection onto the Riemann sphere
        exp: exp (%1) : exponential function
        log: log (%1) : natural logarithm
        log10: log10 (%1) : common logarithm
        cos: cos (%1) : cosine
        sin: sin (%1) : sine
        tan: tan (%1) : tangent
        acos: acos (%1) : inverse cosine
        asin: asin (%1) : inverse sine
        atan: atan (%1) : inverse tangent
        cosh: cosh (%1) : hyperbolic cosine
        sinh: sinh (%1) : hyperbolic sine
        tanh: tanh (%1) : hyperbolic tangent
        acosh: acosh (%1) : inverse hyperbolic cosine
        asinh: asinh (%1) : inverse hyperbolic sine
        atanh: atanh (%1) : inverse hyperbolic tangent
        datatype: specify output image data type. Valid choices are: float32,
            float32le, float32be, float64, float64le, float64be, int64, uint64,
            int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le,
            int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be,
            cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be,
            int8, uint8, bit.
        info: display information messages.
        quiet: do not display information messages or progress status;
            alternatively, this can be achieved by setting the MRTRIX_QUIET
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications (set
            to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `MrcalcOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRCALC_METADATA)
    cargs = []
    cargs.append("mrcalc")
    if abs_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in abs_] for a in c])
    if neg is not None:
        cargs.extend([a for c in [s.run(execution) for s in neg] for a in c])
    if add is not None:
        cargs.extend([a for c in [s.run(execution) for s in add] for a in c])
    if subtract is not None:
        cargs.extend([a for c in [s.run(execution) for s in subtract] for a in c])
    if multiply is not None:
        cargs.extend([a for c in [s.run(execution) for s in multiply] for a in c])
    if divide is not None:
        cargs.extend([a for c in [s.run(execution) for s in divide] for a in c])
    if min_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in min_] for a in c])
    if max_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in max_] for a in c])
    if lt is not None:
        cargs.extend([a for c in [s.run(execution) for s in lt] for a in c])
    if gt is not None:
        cargs.extend([a for c in [s.run(execution) for s in gt] for a in c])
    if le is not None:
        cargs.extend([a for c in [s.run(execution) for s in le] for a in c])
    if ge is not None:
        cargs.extend([a for c in [s.run(execution) for s in ge] for a in c])
    if eq is not None:
        cargs.extend([a for c in [s.run(execution) for s in eq] for a in c])
    if neq is not None:
        cargs.extend([a for c in [s.run(execution) for s in neq] for a in c])
    if if_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in if_] for a in c])
    if replace is not None:
        cargs.extend([a for c in [s.run(execution) for s in replace] for a in c])
    if sqrt is not None:
        cargs.extend([a for c in [s.run(execution) for s in sqrt] for a in c])
    if pow_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in pow_] for a in c])
    if round_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in round_] for a in c])
    if ceil is not None:
        cargs.extend([a for c in [s.run(execution) for s in ceil] for a in c])
    if floor is not None:
        cargs.extend([a for c in [s.run(execution) for s in floor] for a in c])
    if not_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in not_] for a in c])
    if and_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in and_] for a in c])
    if or_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in or_] for a in c])
    if xor is not None:
        cargs.extend([a for c in [s.run(execution) for s in xor] for a in c])
    if isnan is not None:
        cargs.extend([a for c in [s.run(execution) for s in isnan] for a in c])
    if isinf is not None:
        cargs.extend([a for c in [s.run(execution) for s in isinf] for a in c])
    if finite is not None:
        cargs.extend([a for c in [s.run(execution) for s in finite] for a in c])
    if complex_ is not None:
        cargs.extend([a for c in [s.run(execution) for s in complex_] for a in c])
    if polar is not None:
        cargs.extend([a for c in [s.run(execution) for s in polar] for a in c])
    if real is not None:
        cargs.extend([a for c in [s.run(execution) for s in real] for a in c])
    if imag is not None:
        cargs.extend([a for c in [s.run(execution) for s in imag] for a in c])
    if phase is not None:
        cargs.extend([a for c in [s.run(execution) for s in phase] for a in c])
    if conj is not None:
        cargs.extend([a for c in [s.run(execution) for s in conj] for a in c])
    if proj is not None:
        cargs.extend([a for c in [s.run(execution) for s in proj] for a in c])
    if exp is not None:
        cargs.extend([a for c in [s.run(execution) for s in exp] for a in c])
    if log is not None:
        cargs.extend([a for c in [s.run(execution) for s in log] for a in c])
    if log10 is not None:
        cargs.extend([a for c in [s.run(execution) for s in log10] for a in c])
    if cos is not None:
        cargs.extend([a for c in [s.run(execution) for s in cos] for a in c])
    if sin is not None:
        cargs.extend([a for c in [s.run(execution) for s in sin] for a in c])
    if tan is not None:
        cargs.extend([a for c in [s.run(execution) for s in tan] for a in c])
    if acos is not None:
        cargs.extend([a for c in [s.run(execution) for s in acos] for a in c])
    if asin is not None:
        cargs.extend([a for c in [s.run(execution) for s in asin] for a in c])
    if atan is not None:
        cargs.extend([a for c in [s.run(execution) for s in atan] for a in c])
    if cosh is not None:
        cargs.extend([a for c in [s.run(execution) for s in cosh] for a in c])
    if sinh is not None:
        cargs.extend([a for c in [s.run(execution) for s in sinh] for a in c])
    if tanh is not None:
        cargs.extend([a for c in [s.run(execution) for s in tanh] for a in c])
    if acosh is not None:
        cargs.extend([a for c in [s.run(execution) for s in acosh] for a in c])
    if asinh is not None:
        cargs.extend([a for c in [s.run(execution) for s in asinh] for a in c])
    if atanh is not None:
        cargs.extend([a for c in [s.run(execution) for s in atanh] for a in c])
    if datatype is not None:
        cargs.extend(["-datatype", datatype])
    if info:
        cargs.append("-info")
    if quiet:
        cargs.append("-quiet")
    if debug:
        cargs.append("-debug")
    if force:
        cargs.append("-force")
    if nthreads is not None:
        cargs.extend(["-nthreads", str(nthreads)])
    if config is not None:
        cargs.extend([a for c in [s.run(execution) for s in config] for a in c])
    if help_:
        cargs.append("-help")
    if version:
        cargs.append("-version")
    cargs.extend(operand)
    ret = MrcalcOutputs(
        root=execution.output_file("."),
        abs_=[abs_.outputs(execution) for abs_ in abs_],
        neg=[neg.outputs(execution) for neg in neg],
        add=[add.outputs(execution) for add in add],
        subtract=[subtract.outputs(execution) for subtract in subtract],
        multiply=[multiply.outputs(execution) for multiply in multiply],
        divide=[divide.outputs(execution) for divide in divide],
        min_=[min_.outputs(execution) for min_ in min_],
        max_=[max_.outputs(execution) for max_ in max_],
        lt=[lt.outputs(execution) for lt in lt],
        gt=[gt.outputs(execution) for gt in gt],
        le=[le.outputs(execution) for le in le],
        ge=[ge.outputs(execution) for ge in ge],
        eq=[eq.outputs(execution) for eq in eq],
        neq=[neq.outputs(execution) for neq in neq],
        if_=[if_.outputs(execution) for if_ in if_],
        replace=[replace.outputs(execution) for replace in replace],
        sqrt=[sqrt.outputs(execution) for sqrt in sqrt],
        pow_=[pow_.outputs(execution) for pow_ in pow_],
        round_=[round_.outputs(execution) for round_ in round_],
        ceil=[ceil.outputs(execution) for ceil in ceil],
        floor=[floor.outputs(execution) for floor in floor],
        not_=[not_.outputs(execution) for not_ in not_],
        and_=[and_.outputs(execution) for and_ in and_],
        or_=[or_.outputs(execution) for or_ in or_],
        xor=[xor.outputs(execution) for xor in xor],
        isnan=[isnan.outputs(execution) for isnan in isnan],
        isinf=[isinf.outputs(execution) for isinf in isinf],
        finite=[finite.outputs(execution) for finite in finite],
        complex_=[complex_.outputs(execution) for complex_ in complex_],
        polar=[polar.outputs(execution) for polar in polar],
        real=[real.outputs(execution) for real in real],
        imag=[imag.outputs(execution) for imag in imag],
        phase=[phase.outputs(execution) for phase in phase],
        conj=[conj.outputs(execution) for conj in conj],
        proj=[proj.outputs(execution) for proj in proj],
        exp=[exp.outputs(execution) for exp in exp],
        log=[log.outputs(execution) for log in log],
        log10=[log10.outputs(execution) for log10 in log10],
        cos=[cos.outputs(execution) for cos in cos],
        sin=[sin.outputs(execution) for sin in sin],
        tan=[tan.outputs(execution) for tan in tan],
        acos=[acos.outputs(execution) for acos in acos],
        asin=[asin.outputs(execution) for asin in asin],
        atan=[atan.outputs(execution) for atan in atan],
        cosh=[cosh.outputs(execution) for cosh in cosh],
        sinh=[sinh.outputs(execution) for sinh in sinh],
        tanh=[tanh.outputs(execution) for tanh in tanh],
        acosh=[acosh.outputs(execution) for acosh in acosh],
        asinh=[asinh.outputs(execution) for asinh in asinh],
        atanh=[atanh.outputs(execution) for atanh in atanh],
        config=[config.outputs(execution) for config in config],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "Abs",
    "AbsOutputs",
    "Acos",
    "AcosOutputs",
    "Acosh",
    "AcoshOutputs",
    "Add",
    "AddOutputs",
    "And",
    "AndOutputs",
    "Asin",
    "AsinOutputs",
    "Asinh",
    "AsinhOutputs",
    "Atan",
    "AtanOutputs",
    "Atanh",
    "AtanhOutputs",
    "Ceil",
    "CeilOutputs",
    "Complex",
    "ComplexOutputs",
    "Config",
    "ConfigOutputs",
    "Conj",
    "ConjOutputs",
    "Cos",
    "CosOutputs",
    "Cosh",
    "CoshOutputs",
    "Divide",
    "DivideOutputs",
    "Eq",
    "EqOutputs",
    "Exp",
    "ExpOutputs",
    "Finite",
    "FiniteOutputs",
    "Floor",
    "FloorOutputs",
    "Ge",
    "GeOutputs",
    "Gt",
    "GtOutputs",
    "If",
    "IfOutputs",
    "Imag",
    "ImagOutputs",
    "Isinf",
    "IsinfOutputs",
    "Isnan",
    "IsnanOutputs",
    "Le",
    "LeOutputs",
    "Log",
    "Log10",
    "Log10Outputs",
    "LogOutputs",
    "Lt",
    "LtOutputs",
    "MRCALC_METADATA",
    "Max",
    "MaxOutputs",
    "Min",
    "MinOutputs",
    "MrcalcOutputs",
    "Multiply",
    "MultiplyOutputs",
    "Neg",
    "NegOutputs",
    "Neq",
    "NeqOutputs",
    "Not",
    "NotOutputs",
    "Or",
    "OrOutputs",
    "Phase",
    "PhaseOutputs",
    "Polar",
    "PolarOutputs",
    "Pow",
    "PowOutputs",
    "Proj",
    "ProjOutputs",
    "Real",
    "RealOutputs",
    "Replace",
    "ReplaceOutputs",
    "Round",
    "RoundOutputs",
    "Sin",
    "SinOutputs",
    "Sinh",
    "SinhOutputs",
    "Sqrt",
    "SqrtOutputs",
    "Subtract",
    "SubtractOutputs",
    "Tan",
    "TanOutputs",
    "Tanh",
    "TanhOutputs",
    "Xor",
    "XorOutputs",
    "mrcalc",
]
