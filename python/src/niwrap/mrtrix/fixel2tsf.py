# This file was auto generated by styx
# Do not edit this file directly

import dataclasses
import pathlib
import typing

from styxdefs import *


FIXEL2TSF_METADATA = Metadata(
    id="b67f22fd0e9a80aa2b8caa38f582c940008de3ab",
    name="fixel2tsf",
    container_image_type="docker",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


@dataclasses.dataclass
class Fixel2tsfConfig:
    """
    temporarily set the value of an MRtrix config file entry.
    """
    key: str
    """temporarily set the value of an MRtrix config file entry."""
    value: str
    """temporarily set the value of an MRtrix config file entry."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-config")
        cargs.extend(["", self.key])
        cargs.extend(["", self.value])
        return cargs


class Fixel2tsfOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fixel2tsf(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    tsf: OutputPathType
    """the output track scalar file"""


def fixel2tsf(
    fixel_in: InputPathType,
    tracks: InputPathType,
    tsf: InputPathType,
    angle: float | int | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Fixel2tsfConfig] = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner = None,
) -> Fixel2tsfOutputs:
    """
    fixel2tsf by David Raffelt (david.raffelt@florey.edu.au).
    
    Map fixel values to a track scalar file based on an input tractogram.
    
    This command is useful for visualising all brain fixels (e.g. the output
    from fixelcfestats) in 3D.
    
    References:
    
    .
    
    More information:
    https://mrtrix.readthedocs.io/en/latest/reference/commands/fixel2tsf.html
    
    Args:
        fixel_in: the input fixel data file (within the fixel directory)
        tracks: the input track file
        tsf: the output track scalar file
        angle: the max anglular threshold for computing correspondence between a
            fixel direction and track tangent (default = 45 degrees)
        info: display information messages.
        quiet: do not display information messages or progress status;
            alternatively, this can be achieved by setting the MRTRIX_QUIET
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications (set
            to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `Fixel2tsfOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FIXEL2TSF_METADATA)
    cargs = []
    cargs.append("fixel2tsf")
    if angle is not None:
        cargs.extend(["-angle", str(angle)])
    if info:
        cargs.append("-info")
    if quiet:
        cargs.append("-quiet")
    if debug:
        cargs.append("-debug")
    if force:
        cargs.append("-force")
    if nthreads is not None:
        cargs.extend(["-nthreads", str(nthreads)])
    if config is not None:
        cargs.extend(["-config", *[a for c in [s.run(execution) for s in config] for a in c]])
    if help_:
        cargs.append("-help")
    if version:
        cargs.append("-version")
    cargs.extend(["", execution.input_file(fixel_in)])
    cargs.extend(["", execution.input_file(tracks)])
    cargs.extend(["", execution.input_file(tsf)])
    ret = Fixel2tsfOutputs(
        root=execution.output_file("."),
        tsf=execution.output_file(f"{pathlib.Path(tsf).stem}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FIXEL2TSF_METADATA",
    "Fixel2tsfConfig",
    "Fixel2tsfOutputs",
    "fixel2tsf",
]
