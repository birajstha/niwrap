# This file was auto generated by Styx.
# Do not edit this file directly.

import dataclasses
import pathlib
import typing

from styxdefs import *


TCKGEN_METADATA = Metadata(
    id="0d56b081013c9389a2a94e621bdd9f43f13fd2d8",
    name="tckgen",
    container_image_type="docker",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


class TckgenSeedImageOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenSeedImage.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenSeedImage:
    """
    seed streamlines entirely at random within a mask image 
    """
    image: InputPathType
    """seed streamlines entirely at random within a mask image """
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-seed_image")
        cargs.append(execution.input_file(self.image))
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenSeedImageOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenSeedImageOutputs`).
        """
        ret = TckgenSeedImageOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenSeedSphereOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenSeedSphere.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenSeedSphere:
    """
    spherical seed as four comma-separated values (XYZ position and radius)
    """
    spec: list[float | int]
    """spherical seed as four comma-separated values (XYZ position and
    radius)"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-seed_sphere")
        cargs.extend(map(str, self.spec))
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenSeedSphereOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenSeedSphereOutputs`).
        """
        ret = TckgenSeedSphereOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenSeedRandomPerVoxelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenSeedRandomPerVoxel.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenSeedRandomPerVoxel:
    """
    seed a fixed number of streamlines per voxel in a mask image; random placement of seeds in each voxel
    """
    image: InputPathType
    """seed a fixed number of streamlines per voxel in a mask image; random
    placement of seeds in each voxel"""
    num_per_voxel: int
    """seed a fixed number of streamlines per voxel in a mask image; random
    placement of seeds in each voxel"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-seed_random_per_voxel")
        cargs.append(execution.input_file(self.image))
        cargs.append(str(self.num_per_voxel))
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenSeedRandomPerVoxelOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenSeedRandomPerVoxelOutputs`).
        """
        ret = TckgenSeedRandomPerVoxelOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenSeedGridPerVoxelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenSeedGridPerVoxel.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenSeedGridPerVoxel:
    """
    seed a fixed number of streamlines per voxel in a mask image; place seeds on a 3D mesh grid (grid_size argument is per axis; so a grid_size of 3 results in 27 seeds per voxel)
    """
    image: InputPathType
    """seed a fixed number of streamlines per voxel in a mask image; place seeds
    on a 3D mesh grid (grid_size argument is per axis; so a grid_size of 3
    results in 27 seeds per voxel)"""
    grid_size: int
    """seed a fixed number of streamlines per voxel in a mask image; place seeds
    on a 3D mesh grid (grid_size argument is per axis; so a grid_size of 3
    results in 27 seeds per voxel)"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-seed_grid_per_voxel")
        cargs.append(execution.input_file(self.image))
        cargs.append(str(self.grid_size))
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenSeedGridPerVoxelOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenSeedGridPerVoxelOutputs`).
        """
        ret = TckgenSeedGridPerVoxelOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenSeedRejectionOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenSeedRejection.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenSeedRejection:
    """
    seed from an image using rejection sampling (higher values = more probable to seed from)
    """
    image: InputPathType
    """seed from an image using rejection sampling (higher values = more
    probable to seed from)"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-seed_rejection")
        cargs.append(execution.input_file(self.image))
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenSeedRejectionOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenSeedRejectionOutputs`).
        """
        ret = TckgenSeedRejectionOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenSeedGmwmiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenSeedGmwmi.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenSeedGmwmi:
    """
    seed from the grey matter - white matter interface (only valid if using ACT framework). Input image should be a 3D seeding volume; seeds drawn within this image will be optimised to the interface using the 5TT image provided using the -act option.
    """
    image: InputPathType
    """seed from the grey matter - white matter interface (only valid if using
    ACT framework). Input image should be a 3D seeding volume; seeds drawn
    within this image will be optimised to the interface using the 5TT image
    provided using the -act option."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-seed_gmwmi")
        cargs.append(execution.input_file(self.image))
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenSeedGmwmiOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenSeedGmwmiOutputs`).
        """
        ret = TckgenSeedGmwmiOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenIncludeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenInclude.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenInclude:
    """
    specify an inclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines must traverse ALL inclusion regions to be accepted.
    """
    spec: str
    """specify an inclusion region of interest, as either a binary mask image,
    or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines
    must traverse ALL inclusion regions to be accepted."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-include")
        cargs.append(self.spec)
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenIncludeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenIncludeOutputs`).
        """
        ret = TckgenIncludeOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenIncludeOrderedOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenIncludeOrdered.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenIncludeOrdered:
    """
    specify an inclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines must traverse ALL inclusion_ordered regions in the order they are specified in order to be accepted.
    """
    image: str
    """specify an inclusion region of interest, as either a binary mask image,
    or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines
    must traverse ALL inclusion_ordered regions in the order they are specified
    in order to be accepted."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-include_ordered")
        cargs.append(self.image)
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenIncludeOrderedOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenIncludeOrderedOutputs`).
        """
        ret = TckgenIncludeOrderedOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenExcludeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenExclude.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenExclude:
    """
    specify an exclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines that enter ANY exclude region will be discarded.
    """
    spec: str
    """specify an exclusion region of interest, as either a binary mask image,
    or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines
    that enter ANY exclude region will be discarded."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-exclude")
        cargs.append(self.spec)
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenExcludeOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenExcludeOutputs`).
        """
        ret = TckgenExcludeOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenMaskOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenMask.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenMask:
    """
    specify a masking region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). If defined, streamlines exiting the mask will be truncated.
    """
    spec: str
    """specify a masking region of interest, as either a binary mask image, or
    as a sphere using 4 comma-separared values (x,y,z,radius). If defined,
    streamlines exiting the mask will be truncated."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-mask")
        cargs.append(self.spec)
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenMaskOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenMaskOutputs`).
        """
        ret = TckgenMaskOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenFslgradOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenFslgrad.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenFslgrad:
    """
    Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
    """
    bvecs: InputPathType
    """Provide the diffusion-weighted gradient scheme used in the acquisition in
    FSL bvecs/bvals format files. If a diffusion gradient scheme is present in
    the input image header, the data provided with this option will be instead
    used."""
    bvals: InputPathType
    """Provide the diffusion-weighted gradient scheme used in the acquisition in
    FSL bvecs/bvals format files. If a diffusion gradient scheme is present in
    the input image header, the data provided with this option will be instead
    used."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-fslgrad")
        cargs.append(execution.input_file(self.bvecs))
        cargs.append(execution.input_file(self.bvals))
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenFslgradOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenFslgradOutputs`).
        """
        ret = TckgenFslgradOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenConfigOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TckgenConfig.run(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


@dataclasses.dataclass
class TckgenConfig:
    """
    temporarily set the value of an MRtrix config file entry.
    """
    key: str
    """temporarily set the value of an MRtrix config file entry."""
    value: str
    """temporarily set the value of an MRtrix config file entry."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            
        """
        cargs = []
        cargs.append("-config")
        cargs.append(self.key)
        cargs.append(self.value)
        return cargs
    
    def outputs(
        self,
        execution: Execution,
    ) -> TckgenConfigOutputs:
        """
        Collect output file paths.
        
        Args:
            self: The sub-command object.
            execution: The execution object.
        Returns:
            NamedTuple of outputs (described in `TckgenConfigOutputs`).
        """
        ret = TckgenConfigOutputs(
            root=execution.output_file("."),
        )
        return ret


class TckgenOutputs(typing.NamedTuple):
    """
    Output object returned when calling `tckgen(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    tracks: OutputPathType
    """the output file containing the tracks generated."""
    output_seeds: OutputPathType | None
    """output the seed location of all successful streamlines to a file """
    seed_image: typing.List[TckgenSeedImageOutputs]
    """Subcommand outputs"""
    seed_sphere: typing.List[TckgenSeedSphereOutputs]
    """Subcommand outputs"""
    seed_random_per_voxel: typing.List[TckgenSeedRandomPerVoxelOutputs]
    """Subcommand outputs"""
    seed_grid_per_voxel: typing.List[TckgenSeedGridPerVoxelOutputs]
    """Subcommand outputs"""
    seed_rejection: typing.List[TckgenSeedRejectionOutputs]
    """Subcommand outputs"""
    seed_gmwmi: typing.List[TckgenSeedGmwmiOutputs]
    """Subcommand outputs"""
    include: typing.List[TckgenIncludeOutputs]
    """Subcommand outputs"""
    include_ordered: typing.List[TckgenIncludeOrderedOutputs]
    """Subcommand outputs"""
    exclude: typing.List[TckgenExcludeOutputs]
    """Subcommand outputs"""
    mask: typing.List[TckgenMaskOutputs]
    """Subcommand outputs"""
    fslgrad: TckgenFslgradOutputs
    """Subcommand outputs"""
    config: typing.List[TckgenConfigOutputs]
    """Subcommand outputs"""


def tckgen(
    source: InputPathType,
    tracks: InputPathType,
    algorithm: typing.Literal["name"] | None = None,
    select_: int | None = None,
    step: float | int | None = None,
    angle: float | int | None = None,
    minlength: float | int | None = None,
    maxlength: float | int | None = None,
    cutoff: float | int | None = None,
    trials: int | None = None,
    noprecomputed: bool = False,
    rk4: bool = False,
    stop: bool = False,
    downsample: int | None = None,
    seed_image: list[TckgenSeedImage] = None,
    seed_sphere: list[TckgenSeedSphere] = None,
    seed_random_per_voxel: list[TckgenSeedRandomPerVoxel] = None,
    seed_grid_per_voxel: list[TckgenSeedGridPerVoxel] = None,
    seed_rejection: list[TckgenSeedRejection] = None,
    seed_gmwmi: list[TckgenSeedGmwmi] = None,
    seed_dynamic: InputPathType | None = None,
    seeds: int | None = None,
    max_attempts_per_seed: int | None = None,
    seed_cutoff: float | int | None = None,
    seed_unidirectional: bool = False,
    seed_direction: list[float | int] = None,
    output_seeds: InputPathType | None = None,
    include: list[TckgenInclude] = None,
    include_ordered: list[TckgenIncludeOrdered] = None,
    exclude: list[TckgenExclude] = None,
    mask: list[TckgenMask] = None,
    act: InputPathType | None = None,
    backtrack: bool = False,
    crop_at_gmwmi: bool = False,
    power: float | int | None = None,
    samples: int | None = None,
    grad: InputPathType | None = None,
    fslgrad: TckgenFslgrad | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[TckgenConfig] = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner = None,
) -> TckgenOutputs:
    """
    tckgen by J-Donald Tournier (jdtournier@gmail.com) and Robert E. Smith
    (robert.smith@florey.edu.au).
    
    Perform streamlines tractography.
    
    By default, tckgen produces a fixed number of streamlines, by attempting to
    seed from new random locations until the target number of streamlines have
    been selected (in other words, after all inclusion & exclusion criteria have
    been applied), or the maximum number of seeds has been exceeded (by default,
    this is 1000 x the desired number of selected streamlines). Use the -select
    and/or -seeds options to modify as required. See also the Seeding options
    section for alternative seeding strategies.
    
    Below is a list of available tracking algorithms, the input image data that
    they require, and a brief description of their behaviour:
    
    - FACT: Fiber Assigned by Continuous Tracking. A deterministic algorithm
    that takes as input a 4D image, with 3xN volumes, where N is the maximum
    number of fiber orientations in a voxel. Each triplet of volumes represents
    a 3D vector corresponding to a fiber orientation; the length of the vector
    additionally indicates some measure of density or anisotropy. As streamlines
    move from one voxel to another, the fiber orientation most collinear with
    the streamline orientation is selected (i.e. there is no intra-voxel
    interpolation).
    
    - iFOD1: First-order Integration over Fiber Orientation Distributions. A
    probabilistic algorithm that takes as input a Fiber Orientation Distribution
    (FOD) image represented in the Spherical Harmonic (SH) basis. At each
    streamline step, random samples from the local (trilinear interpolated) FOD
    are taken. A streamline is more probable to follow orientations where the
    FOD amplitude is large; but it may also rarely traverse orientations with
    small FOD amplitude.
    
    - iFOD2 (default): Second-order Integration over Fiber Orientation
    Distributions. A probabilistic algorithm that takes as input a Fiber
    Orientation Distribution (FOD) image represented in the Spherical Harmonic
    (SH) basis. Candidate streamline paths (based on short curved "arcs") are
    drawn, and the underlying (trilinear-interpolated) FOD amplitudes along
    those arcs are sampled. A streamline is more probable to follow a path where
    the FOD amplitudes along that path are large; but it may also rarely
    traverse orientations where the FOD amplitudes are small, as long as the
    amplitude remains above the FOD amplitude threshold along the entire path.
    
    - NullDist1 / NullDist2: Null Distribution tracking algorithms. These
    probabilistic algorithms expect as input the same image that was used when
    invoking the corresponding algorithm for which the null distribution is
    sought. These algorithms generate streamlines based on random orientation
    samples; that is, no image information relating to fiber orientations is
    used, and streamlines trajectories are determined entirely from random
    sampling. The NullDist2 algorithm is designed to be used in conjunction with
    iFOD2; NullDist1 should be used in conjunction with any first-order
    algorithm.
    
    - SD_STREAM: Streamlines tractography based on Spherical Deconvolution (SD).
    A deterministic algorithm that takes as input a Fiber Orientation
    Distribution (FOD) image represented in the Spherical Harmonic (SH) basis.
    At each streamline step, the local (trilinear-interpolated) FOD is sampled,
    and from the current streamline tangent orientation, a Newton optimisation
    on the sphere is performed in order to locate the orientation of the nearest
    FOD amplitude peak.
    
    - SeedTest: A dummy streamlines algorithm used for testing streamline
    seeding mechanisms. Any image can be used as input; the image will not be
    used in any way. For each seed point generated by the seeding mechanism(s),
    a streamline containing a single point corresponding to that seed location
    will be written to the output track file.
    
    - Tensor_Det: A deterministic algorithm that takes as input a 4D
    diffusion-weighted image (DWI) series. At each streamline step, the
    diffusion tensor is fitted to the local (trilinear-interpolated) diffusion
    data, and the streamline trajectory is determined as the principal
    eigenvector of that tensor.
    
    - Tensor_Prob: A probabilistic algorithm that takes as input a 4D
    diffusion-weighted image (DWI) series. Within each image voxel, a residual
    bootstrap is performed to obtain a unique realisation of the DWI data in
    that voxel for each streamline. These data are then sampled via trilinear
    interpolation at each streamline step, the diffusion tensor model is fitted,
    and the streamline follows the orientation of the principal eigenvector of
    that tensor.
    
    Note that the behaviour of the -angle option varies slightly depending on
    the order of integration: for any first-order method, this angle corresponds
    to the deviation in streamline trajectory per step; for higher-order
    methods, this corresponds to the change in underlying fibre orientation
    between the start and end points of each step.
    
    References:
    
    References based on streamlines algorithm used:
    
    * FACT:
    Mori, S.; Crain, B. J.; Chacko, V. P. & van Zijl, P. C. M. Three-dimensional
    tracking of axonal projections in the brain by magnetic resonance imaging.
    Annals of Neurology, 1999, 45, 265-269
    
    * iFOD1 or SD_STREAM:
    Tournier, J.-D.; Calamante, F. & Connelly, A. MRtrix: Diffusion tractography
    in crossing fiber regions. Int. J. Imaging Syst. Technol., 2012, 22, 53-66
    
    * iFOD2:
    Tournier, J.-D.; Calamante, F. & Connelly, A. Improved probabilistic
    streamlines tractography by 2nd order integration over fibre orientation
    distributions. Proceedings of the International Society for Magnetic
    Resonance in Medicine, 2010, 1670
    
    * Nulldist1 / Nulldist2:
    Morris, D. M.; Embleton, K. V. & Parker, G. J. Probabilistic fibre tracking:
    Differentiation of connections from chance events. NeuroImage, 2008, 42,
    1329-1339
    
    * Tensor_Det:
    Basser, P. J.; Pajevic, S.; Pierpaoli, C.; Duda, J. & Aldroubi, A. In vivo
    fiber tractography using DT-MRI data. Magnetic Resonance in Medicine, 2000,
    44, 625-632
    
    * Tensor_Prob:
    Jones, D. Tractography Gone Wild: Probabilistic Fibre Tracking Using the
    Wild Bootstrap With Diffusion Tensor MRI. IEEE Transactions on Medical
    Imaging, 2008, 27, 1268-1274
    
    References based on command-line options:
    
    * -rk4:
    Basser, P. J.; Pajevic, S.; Pierpaoli, C.; Duda, J. & Aldroubi, A. In vivo
    fiber tractography using DT-MRI data. Magnetic Resonance in Medicine, 2000,
    44, 625-632
    
    * -act, -backtrack, -seed_gmwmi:
    Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A.
    Anatomically-constrained tractography: Improved diffusion MRI streamlines
    tractography through effective use of anatomical information. NeuroImage,
    2012, 62, 1924-1938
    
    * -seed_dynamic:
    Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT2: Enabling
    dense quantitative assessment of brain white matter connectivity using
    streamlines tractography. NeuroImage, 2015, 119, 338-351.
    
    More information:
    https://mrtrix.readthedocs.io/en/latest/reference/commands/tckgen.html
    
    Args:
        source: The image containing the source data. The type of image data
            required depends on the algorithm used (see Description section).
        tracks: the output file containing the tracks generated.
        algorithm: specify the tractography algorithm to use. Valid choices are:
            FACT, iFOD1, iFOD2, Nulldist1, Nulldist2, SD_Stream, Seedtest,
            Tensor_Det, Tensor_Prob (default: iFOD2).
        select_: set the desired number of streamlines to be selected by tckgen,
            after all selection criteria have been applied (i.e. inclusion/exclusion
            ROIs, min/max length, etc). tckgen will keep seeding streamlines until
            this number of streamlines have been selected, or the maximum allowed
            number of seeds has been exceeded (see -seeds option). By default, 5000
            streamlines are to be selected. Set to zero to disable, which will
            result in streamlines being seeded until the number specified by -seeds
            has been reached.
        step: set the step size of the algorithm in mm (defaults: for
            first-order algorithms, 0.1 x voxelsize; if using RK4, 0.25 x voxelsize;
            for iFOD2: 0.5 x voxelsize).
        angle: set the maximum angle in degrees between successive steps
            (defaults: 60 for deterministic algorithms; 15 for iFOD1 / nulldist1; 45
            for iFOD2 / nulldist2)
        minlength: set the minimum length of any track in mm (defaults: without
            ACT, 5 x voxelsize; with ACT, 2 x voxelsize).
        maxlength: set the maximum length of any track in mm (default: 100 x
            voxelsize).
        cutoff: set the FOD amplitude / fixel size / tensor FA cutoff for
            terminating tracks (defaults: 0.1 for FOD-based algorithms; 0.1 for
            fixel-based algorithms; 0.1 for tensor-based algorithms; threshold
            multiplied by 0.5 when using ACT).
        trials: set the maximum number of sampling trials at each point (only
            used for iFOD1 / iFOD2) (default: 1000).
        noprecomputed: do NOT pre-compute legendre polynomial values. Warning:
            this will slow down the algorithm by a factor of approximately 4.
        rk4: use 4th-order Runge-Kutta integration (slower, but eliminates
            curvature overshoot in 1st-order deterministic methods)
        stop: stop propagating a streamline once it has traversed all include
            regions
        downsample: downsample the generated streamlines to reduce output file
            size (default is (samples-1) for iFOD2, no downsampling for all other
            algorithms)
        seed_image: seed streamlines entirely at random within a mask image
        seed_sphere: spherical seed as four comma-separated values (XYZ position
            and radius)
        seed_random_per_voxel: seed a fixed number of streamlines per voxel in a
            mask image; random placement of seeds in each voxel
        seed_grid_per_voxel: seed a fixed number of streamlines per voxel in a
            mask image; place seeds on a 3D mesh grid (grid_size argument is per
            axis; so a grid_size of 3 results in 27 seeds per voxel)
        seed_rejection: seed from an image using rejection sampling (higher
            values = more probable to seed from)
        seed_gmwmi: seed from the grey matter - white matter interface (only
            valid if using ACT framework). Input image should be a 3D seeding
            volume; seeds drawn within this image will be optimised to the interface
            using the 5TT image provided using the -act option.
        seed_dynamic: determine seed points dynamically using the SIFT model
            (must not provide any other seeding mechanism). Note that while this
            seeding mechanism improves the distribution of reconstructed streamlines
            density, it should NOT be used as a substitute for the SIFT method
            itself.
        seeds: set the number of seeds that tckgen will attempt to track from.
            If this option is NOT provided, the default number of seeds is set to
            1000× the number of selected streamlines. If -select is NOT also
            specified, tckgen will continue tracking until this number of seeds has
            been attempted. However, if -select is also specified, tckgen will stop
            when the number of seeds attempted reaches the number specified here, OR
            when the number of streamlines selected reaches the number requested
            with the -select option. This can be used to prevent the program from
            running indefinitely when no or very few streamlines can be found that
            match the selection criteria. Setting this to zero will cause tckgen to
            keep attempting seeds until the number specified by -select has been
            reached.
        max_attempts_per_seed: set the maximum number of times that the tracking
            algorithm should attempt to find an appropriate tracking direction from
            a given seed point. This should be set high enough to ensure that an
            actual plausible seed point is not discarded prematurely as being unable
            to initiate tracking from. Higher settings may affect performance if
            many seeds are genuinely impossible to track from, as many attempts will
            still be made in vain for such seeds. (default: 1000)
        seed_cutoff: set the minimum FA or FOD amplitude for seeding tracks
            (default is the same as the normal -cutoff).
        seed_unidirectional: track from the seed point in one direction only
            (default is to track in both directions).
        seed_direction: specify a seeding direction for the tracking (this
            should be supplied as a vector of 3 comma-separated values.
        output_seeds: output the seed location of all successful streamlines to
            a file
        include: specify an inclusion region of interest, as either a binary
            mask image, or as a sphere using 4 comma-separared values
            (x,y,z,radius). Streamlines must traverse ALL inclusion regions to be
            accepted.
        include_ordered: specify an inclusion region of interest, as either a
            binary mask image, or as a sphere using 4 comma-separared values
            (x,y,z,radius). Streamlines must traverse ALL inclusion_ordered regions
            in the order they are specified in order to be accepted.
        exclude: specify an exclusion region of interest, as either a binary
            mask image, or as a sphere using 4 comma-separared values
            (x,y,z,radius). Streamlines that enter ANY exclude region will be
            discarded.
        mask: specify a masking region of interest, as either a binary mask
            image, or as a sphere using 4 comma-separared values (x,y,z,radius). If
            defined, streamlines exiting the mask will be truncated.
        act: use the Anatomically-Constrained Tractography framework during
            tracking; provided image must be in the 5TT (five-tissue-type) format
        backtrack: allow tracks to be truncated and re-tracked if a poor
            structural termination is encountered
        crop_at_gmwmi: crop streamline endpoints more precisely as they cross
            the GM-WM interface
        power: raise the FOD to the power specified (defaults are: 1.0 for
            iFOD1; 1.0/nsamples for iFOD2).
        samples: set the number of FOD samples to take per step (Default: 4).
        grad: Provide the diffusion-weighted gradient scheme used in the
            acquisition in a text file. This should be supplied as a 4xN text file
            with each line is in the format [ X Y Z b ], where [ X Y Z ] describe
            the direction of the applied gradient, and b gives the b-value in units
            of s/mm^2. If a diffusion gradient scheme is present in the input image
            header, the data provided with this option will be instead used.
        fslgrad: Provide the diffusion-weighted gradient scheme used in the
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient
            scheme is present in the input image header, the data provided with this
            option will be instead used.
        info: display information messages.
        quiet: do not display information messages or progress status;
            alternatively, this can be achieved by setting the MRTRIX_QUIET
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications (set
            to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `TckgenOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TCKGEN_METADATA)
    cargs = []
    cargs.append("tckgen")
    if algorithm is not None:
        cargs.extend(["-algorithm", algorithm])
    if select_ is not None:
        cargs.extend(["-select", str(select_)])
    if step is not None:
        cargs.extend(["-step", str(step)])
    if angle is not None:
        cargs.extend(["-angle", str(angle)])
    if minlength is not None:
        cargs.extend(["-minlength", str(minlength)])
    if maxlength is not None:
        cargs.extend(["-maxlength", str(maxlength)])
    if cutoff is not None:
        cargs.extend(["-cutoff", str(cutoff)])
    if trials is not None:
        cargs.extend(["-trials", str(trials)])
    if noprecomputed:
        cargs.append("-noprecomputed")
    if rk4:
        cargs.append("-rk4")
    if stop:
        cargs.append("-stop")
    if downsample is not None:
        cargs.extend(["-downsample", str(downsample)])
    if seed_image is not None:
        cargs.extend([a for c in [s.run(execution) for s in seed_image] for a in c])
    if seed_sphere is not None:
        cargs.extend([a for c in [s.run(execution) for s in seed_sphere] for a in c])
    if seed_random_per_voxel is not None:
        cargs.extend([a for c in [s.run(execution) for s in seed_random_per_voxel] for a in c])
    if seed_grid_per_voxel is not None:
        cargs.extend([a for c in [s.run(execution) for s in seed_grid_per_voxel] for a in c])
    if seed_rejection is not None:
        cargs.extend([a for c in [s.run(execution) for s in seed_rejection] for a in c])
    if seed_gmwmi is not None:
        cargs.extend([a for c in [s.run(execution) for s in seed_gmwmi] for a in c])
    if seed_dynamic is not None:
        cargs.extend(["-seed_dynamic", execution.input_file(seed_dynamic)])
    if seeds is not None:
        cargs.extend(["-seeds", str(seeds)])
    if max_attempts_per_seed is not None:
        cargs.extend(["-max_attempts_per_seed", str(max_attempts_per_seed)])
    if seed_cutoff is not None:
        cargs.extend(["-seed_cutoff", str(seed_cutoff)])
    if seed_unidirectional:
        cargs.append("-seed_unidirectional")
    if seed_direction is not None:
        cargs.extend(["-seed_direction", *map(str, seed_direction)])
    if output_seeds is not None:
        cargs.extend(["-output_seeds", execution.input_file(output_seeds)])
    if include is not None:
        cargs.extend([a for c in [s.run(execution) for s in include] for a in c])
    if include_ordered is not None:
        cargs.extend([a for c in [s.run(execution) for s in include_ordered] for a in c])
    if exclude is not None:
        cargs.extend([a for c in [s.run(execution) for s in exclude] for a in c])
    if mask is not None:
        cargs.extend([a for c in [s.run(execution) for s in mask] for a in c])
    if act is not None:
        cargs.extend(["-act", execution.input_file(act)])
    if backtrack:
        cargs.append("-backtrack")
    if crop_at_gmwmi:
        cargs.append("-crop_at_gmwmi")
    if power is not None:
        cargs.extend(["-power", str(power)])
    if samples is not None:
        cargs.extend(["-samples", str(samples)])
    if grad is not None:
        cargs.extend(["-grad", execution.input_file(grad)])
    if fslgrad is not None:
        cargs.extend(fslgrad.run(execution))
    if info:
        cargs.append("-info")
    if quiet:
        cargs.append("-quiet")
    if debug:
        cargs.append("-debug")
    if force:
        cargs.append("-force")
    if nthreads is not None:
        cargs.extend(["-nthreads", str(nthreads)])
    if config is not None:
        cargs.extend([a for c in [s.run(execution) for s in config] for a in c])
    if help_:
        cargs.append("-help")
    if version:
        cargs.append("-version")
    cargs.append(execution.input_file(source))
    cargs.append(execution.input_file(tracks))
    ret = TckgenOutputs(
        root=execution.output_file("."),
        tracks=execution.output_file(f"{pathlib.Path(tracks).name}"),
        output_seeds=execution.output_file(f"{pathlib.Path(output_seeds).name}") if output_seeds is not None else None,
        seed_image=[seed_image.outputs(execution) for seed_image in seed_image],
        seed_sphere=[seed_sphere.outputs(execution) for seed_sphere in seed_sphere],
        seed_random_per_voxel=[seed_random_per_voxel.outputs(execution) for seed_random_per_voxel in seed_random_per_voxel],
        seed_grid_per_voxel=[seed_grid_per_voxel.outputs(execution) for seed_grid_per_voxel in seed_grid_per_voxel],
        seed_rejection=[seed_rejection.outputs(execution) for seed_rejection in seed_rejection],
        seed_gmwmi=[seed_gmwmi.outputs(execution) for seed_gmwmi in seed_gmwmi],
        include=[include.outputs(execution) for include in include],
        include_ordered=[include_ordered.outputs(execution) for include_ordered in include_ordered],
        exclude=[exclude.outputs(execution) for exclude in exclude],
        mask=[mask.outputs(execution) for mask in mask],
        fslgrad=fslgrad.outputs(execution),
        config=[config.outputs(execution) for config in config],
    )
    execution.run(cargs)
    return ret


__all__ = [
    "TCKGEN_METADATA",
    "TckgenConfig",
    "TckgenConfigOutputs",
    "TckgenExclude",
    "TckgenExcludeOutputs",
    "TckgenFslgrad",
    "TckgenFslgradOutputs",
    "TckgenInclude",
    "TckgenIncludeOrdered",
    "TckgenIncludeOrderedOutputs",
    "TckgenIncludeOutputs",
    "TckgenMask",
    "TckgenMaskOutputs",
    "TckgenOutputs",
    "TckgenSeedGmwmi",
    "TckgenSeedGmwmiOutputs",
    "TckgenSeedGridPerVoxel",
    "TckgenSeedGridPerVoxelOutputs",
    "TckgenSeedImage",
    "TckgenSeedImageOutputs",
    "TckgenSeedRandomPerVoxel",
    "TckgenSeedRandomPerVoxelOutputs",
    "TckgenSeedRejection",
    "TckgenSeedRejectionOutputs",
    "TckgenSeedSphere",
    "TckgenSeedSphereOutputs",
    "tckgen",
]
