# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_LOCALSTAT_METADATA = Metadata(
    id="cb77e9873af63b1329db358b4409f15d01c6b592",
    name="3dLocalstat",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dLocalstatOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_localstat(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType | None
    """Output dataset"""


def v_3d_localstat(
    dataset: InputPathType,
    nbhd: str,
    stat_: list[str] | None = None,
    mask: InputPathType | None = None,
    automask: bool = False,
    use_nonmask: bool = False,
    prefix: str | None = None,
    datum: str | None = None,
    label_ext: str | None = None,
    reduce_grid: list[float | int] | None = None,
    reduce_restore_grid: list[float | int] | None = None,
    reduce_max_vox: float | int | None = None,
    grid_rmode: str | None = None,
    quiet: bool = False,
    verbose: bool = False,
    proceed_small_n: bool = False,
    fillvalue: float | int | None = None,
    unfillvalue: float | int | None = None,
    maskvalue: float | int | None = None,
    maskvalue2: float | int | None = None,
    runner: Runner | None = None,
) -> V3dLocalstatOutputs:
    """
    3dLocalstat by AFNI Team.
    
    This program computes statistics at each voxel, based on a local
    neighborhood of that voxel.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dLocalstat.html
    
    Args:
        dataset: Input dataset.
        nbhd: The region around each voxel that will be extracted for the\
            statistics calculation.
        stat_: Compute the specified statistic on the values extracted from the\
            neighborhood.
        mask: Read in dataset 'mset' and use the nonzero voxels therein as a\
            mask.
        automask: Compute the mask as in program 3dAutomask (mutually exclusive\
            with -mask).
        use_nonmask: Compute local statistics from all voxels in the\
            neighborhood that are in the mask, even if the central voxel is not in\
            the mask.
        prefix: Use the given string as the prefix for the output dataset.
        datum: Coerce the output data to be stored as the given type (byte,\
            short, float).
        label_ext: Append given label to each sub-brick label.
        reduce_grid: Compute output on a grid that is reduced by the given\
            factor in X, Y, and Z directions of the input dataset.
        reduce_restore_grid: Resample the output back to input grid after\
            reducing the grid.
        reduce_max_vox: Automatically set Rx Ry Rz so that the computation grid\
            is at a resolution of nbhd/MAX_VOX voxels.
        grid_rmode: Interpolant to use when resampling the output with\
            reduce_restore_grid option.
        quiet: Stop the highly informative progress reports.
        verbose: A little more verbose output.
        proceed_small_n: Do not crash if neighborhood is too small for certain\
            estimates.
        fillvalue: Value used for filled statistic, default=1.
        unfillvalue: Value used for unfilled statistic, default=1.
        maskvalue: Value searched for with has_mask option.
        maskvalue2: Alternate value for has_mask2 option.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dLocalstatOutputs`).
    """
    runner = runner or get_global_runner()
    if reduce_grid is not None and not (1 <= len(reduce_grid) <= 3): 
        raise ValueError(f"Length of 'reduce_grid' must be between 1 and 3 but was {len(reduce_grid)}")
    if reduce_restore_grid is not None and not (1 <= len(reduce_restore_grid) <= 3): 
        raise ValueError(f"Length of 'reduce_restore_grid' must be between 1 and 3 but was {len(reduce_restore_grid)}")
    execution = runner.start_execution(V_3D_LOCALSTAT_METADATA)
    cargs = []
    cargs.append("3dLocalstat")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(dataset))
    ret = V3dLocalstatOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(f"{prefix}.nii.gz") if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dLocalstatOutputs",
    "V_3D_LOCALSTAT_METADATA",
    "v_3d_localstat",
]
