# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_COMMAND_GLOBB_METADATA = Metadata(
    id="19a7c96d36250663b4e4d52cd10d647c539d560d",
    name="@CommandGlobb",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class CommandGlobbOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_command_globb(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_files: OutputPathType
    """Output files generated by the specified program command line."""


def _command_globb(
    program_command: str,
    output_dir: str,
    brick_list: list[str],
    extension: str | None = None,
    runner: Runner | None = None,
) -> CommandGlobbOutputs:
    """
    @CommandGlobb by AFNI Team.
    
    A command-line tool to execute a specified program command line on a list of
    input bricks.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/@CommandGlobb.html
    
    Args:
        program_command: The entire command line for the program desired. The\
            command is best put between single quotes, do not use the \ to break a\
            long line within the quotes.
        output_dir: The output directory where the results will be saved.
        brick_list: A list of bricks (or anything) on which the program command\
            will be executed.
        extension: If the program requires a -prefix option, then you can\
            specify the extension which will get appended to the Brick names before\
            +orig.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CommandGlobbOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(_COMMAND_GLOBB_METADATA)
    cargs = []
    cargs.append("@CommandGlobb")
    cargs.append("-com")
    cargs.append(program_command)
    cargs.append("-session")
    cargs.append(output_dir)
    cargs.append("-newxt")
    if extension is not None:
        cargs.append(extension)
    cargs.append("-list")
    cargs.extend(brick_list)
    ret = CommandGlobbOutputs(
        root=execution.output_file("."),
        output_files=execution.output_file(f"{output_dir}/*"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CommandGlobbOutputs",
    "_COMMAND_GLOBB_METADATA",
    "_command_globb",
]
