# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_TSMOOTH_METADATA = Metadata(
    id="2ac2c27cdf9d39791435937d2b638cd69d6adddd",
    name="3dTsmooth",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dTsmoothOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_tsmooth(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dataset: OutputPathType | None
    """Smoothed 3D+time dataset"""


def v_3d_tsmooth(
    input_dataset: InputPathType,
    prefix: str | None = None,
    datum_type: str | None = None,
    lin_filter: bool = False,
    med_filter: bool = False,
    osf_filter: bool = False,
    lin_filter_custom: float | int | None = None,
    hamming: int | None = None,
    blackman: int | None = None,
    custom_filter: InputPathType | None = None,
    extend: bool = False,
    zero: bool = False,
    trend: bool = False,
    adaptive: int | None = None,
    runner: Runner | None = None,
) -> V3dTsmoothOutputs:
    """
    3dTsmooth by AFNI Team.
    
    Smooths each voxel time series in a 3D+time dataset and produces as output a
    new 3D+time dataset (e.g., lowpass filter in time).
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dTsmooth.html
    
    Args:
        input_dataset: The input 3D+time dataset.
        prefix: Sets the prefix of the output dataset.
        datum_type: Coerce output dataset to be stored as the given type.
        lin_filter: 3 point linear filter: 0.15*a + 0.70*b + 0.15*c.
        med_filter: 3 point median filter: median(a,b,c).
        osf_filter: 3 point order statistics filter: 0.15*min(a,b,c) +\
            0.70*median(a,b,c) + 0.15*max(a,b,c).
        lin_filter_custom: 3 point linear filter with custom weight:\
            0.5*(1-m)*a + m*b + 0.5*(1-m)*c.
        hamming: Use N point Hamming window filter.
        blackman: Use N point Blackman window filter.
        custom_filter: Use custom filter with coefficients from a specified\
            file.
        extend: BEFORE: use the first value; AFTER: use the last value.
        zero: BEFORE and AFTER: use zero.
        trend: Compute a linear trend, and extrapolate BEFORE and AFTER.
        adaptive: Use adaptive mean filtering of width N (N must be odd and\
            bigger than 3).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dTsmoothOutputs`).
    """
    runner = runner or get_global_runner()
    if lin_filter_custom is not None and not (0 <= lin_filter_custom <= 1): 
        raise ValueError(f"'lin_filter_custom' must be between 0 <= x <= 1 but was {lin_filter_custom}")
    execution = runner.start_execution(V_3D_TSMOOTH_METADATA)
    cargs = []
    cargs.append("3dTsmooth")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(input_dataset))
    ret = V3dTsmoothOutputs(
        root=execution.output_file("."),
        output_dataset=execution.output_file(f"{prefix}.nii.gz", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dTsmoothOutputs",
    "V_3D_TSMOOTH_METADATA",
    "v_3d_tsmooth",
]
