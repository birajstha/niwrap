# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_GRAD_FLIP_TEST_METADATA = Metadata(
    id="768260bf3206d1761ec15d9e81149ddb2deb0426",
    name="@GradFlipTest",
)


class GradFlipTestOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_grad_flip_test(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType | None
    """Text file that stores recommended flip option"""
    temp_directory: OutputPathType
    """Temporary working directory to store intermediate files"""


def _grad_flip_test(
    dwi: InputPathType,
    grad_row_vec: InputPathType | None = None,
    grad_col_vec: InputPathType | None = None,
    grad_col_mat_a: InputPathType | None = None,
    grad_col_mat_t: InputPathType | None = None,
    mask: InputPathType | None = None,
    bvals: InputPathType | None = None,
    thresh_fa: float | int | None = None,
    thresh_len: float | int | None = None,
    prefix: str | None = None,
    check_abs_min: float | int | None = None,
    scale_out_1000: bool = False,
    wdir: str | None = None,
    do_clean: bool = False,
    runner: Runner | None = None,
) -> GradFlipTestOutputs:
    """
    @GradFlipTest by PA Taylor (NIH).
    
    Script to test the correct flip for a data set when using 1dDW_Grad_o_Mat++.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/htmldoc/programs/@GradFlipTest_sphx.html
    
    Args:
        dwi: Set of DWIs (N total volumes).
        grad_row_vec: Set of row-wise gradient vectors.
        grad_col_vec: Set of column-wise gradient vectors.
        grad_col_mat_a: Set of column-wise g- or b-matrix elements\
            ("AFNI"-style format, "diagonal-first").
        grad_col_mat_t: Set of column-wise g- or b-matrix elements\
            ("TORTOISE"-style format, "row-first").
        mask: Optional mask (probably whole brain); otherwise, automasking is\
            performed.
        bvals: Can input bvals, if necessary (but shouldn't be necessary?).
        thresh_fa: Set minimum FA value for tracking (default X=0.2).
        thresh_len: Set minimum tract length to keep a tract when propagating\
            (default L=30mm).
        prefix: Output name of text file that stores recommended flip option.
        check_abs_min: Handle tiny negative values in gradient vectors.
        scale_out_1000: Scale output to 1000, as in 3dDWItoDT (probably not\
            necessary).
        wdir: Rename working directory output; useful if running multiple\
            iterations.
        do_clean: Remove temporary directory.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GradFlipTestOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(_GRAD_FLIP_TEST_METADATA)
    cargs = []
    cargs.append("@GradFlipTest")
    cargs.extend(["-in_dwi", execution.input_file(dwi)])
    if grad_col_mat_t is not None:
        cargs.extend(["-in_col_matT", execution.input_file(grad_col_mat_t)])
    if grad_col_mat_t is not None:
        cargs.extend(["-in_col_matT", execution.input_file(grad_col_mat_t)])
    if grad_col_mat_t is not None:
        cargs.extend(["-in_col_matT", execution.input_file(grad_col_mat_t)])
    if grad_col_mat_t is not None:
        cargs.extend(["-in_col_matT", execution.input_file(grad_col_mat_t)])
    if mask is not None:
        cargs.extend(["-mask", execution.input_file(mask)])
    if bvals is not None:
        cargs.extend(["-in_bvals", execution.input_file(bvals)])
    if thresh_fa is not None:
        cargs.extend(["-alg_Thresh_FA", str(thresh_fa)])
    if thresh_len is not None:
        cargs.extend(["-alg_Thresh_Len", str(thresh_len)])
    if prefix is not None:
        cargs.extend(["-prefix", prefix])
    if check_abs_min is not None:
        cargs.extend(["-check_abs_min", str(check_abs_min)])
    if scale_out_1000:
        cargs.append("-scale_out_1000")
    if wdir is not None:
        cargs.extend(["-wdir", wdir])
    if do_clean:
        cargs.append("-do_clean")
    ret = GradFlipTestOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(f"{prefix}.txt") if prefix is not None else None,
        temp_directory=execution.output_file(f"_tmp_TESTFLIP", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "GradFlipTestOutputs",
    "_GRAD_FLIP_TEST_METADATA",
    "_grad_flip_test",
]
