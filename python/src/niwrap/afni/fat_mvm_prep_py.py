# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FAT_MVM_PREP_METADATA = Metadata(
    id="2e300288a939cddd217acc3ad33ab7d354860e29",
    name="fat_mvm_prep",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class FatMvmPrepOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fat_mvm_prep(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    mvmtbl: OutputPathType
    """Output tabular text file for 3dMVM."""
    mvmprep_log: OutputPathType
    """Log file detailing subject matching and ROI list."""


def fat_mvm_prep(
    prefix: str,
    csv_file: InputPathType,
    matrix_files: str | None = None,
    list_match: InputPathType | None = None,
    unionize_rois: bool = False,
    na_warn_off: bool = False,
    extern_labels_no: bool = False,
    runner: Runner | None = None,
) -> FatMvmPrepOutputs:
    """
    fat_mvm_prep by AFNI Team.
    
    Combine FATCAT output with CSV data for statistical modeling.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/fat_mvm_prep.py.html
    
    Args:
        prefix: Prefix for output files.
        csv_file: Comma-separated variable (CSV) file for input.
        matrix_files: Set of matrix (*.grid or *.netcc) files by searchable\
            path.
        list_match: Text file containing two columns: path to subject matrix\
            file and CSV IDs.
        unionize_rois: Make the ROI list as the union of elements across the\
            group.
        na_warn_off: Turn off the automatic warnings as the data table is\
            created.
        extern_labels_no: Turn off the writing/usage of user-defined labels in\
            the *.grid/*.netcc files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FatMvmPrepOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FAT_MVM_PREP_METADATA)
    cargs = []
    cargs.append("fat_mvm_prep.py")
    cargs.append("-p")
    cargs.extend(["-p", prefix])
    cargs.append("-c")
    cargs.extend(["-c", execution.input_file(csv_file)])
    cargs.append("[MATRIX_OPTION]")
    ret = FatMvmPrepOutputs(
        root=execution.output_file("."),
        mvmtbl=execution.output_file(f"{prefix}_MVMtbl.txt"),
        mvmprep_log=execution.output_file(f"{prefix}_MVMprep.log", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FAT_MVM_PREP_METADATA",
    "FatMvmPrepOutputs",
    "fat_mvm_prep",
]
