# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_PFM_METADATA = Metadata(
    id="566fccf227151ac39767c4a6b8f70abb0f7d0fa7",
    name="3dPFM",
    container_image_type="docker",
    container_image_tag="index.docker.io/mcin/docker-fsl:latest",
)


class V3dPfmOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_pfm(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    beta: OutputPathType
    """Prefix for the neuronal-related (i.e. deconvolved) time series."""
    betafitts: OutputPathType
    """Prefix of the convolved neuronal-related time series."""
    fitts: OutputPathType
    """Prefix for the fitted time series."""
    resid: OutputPathType
    """Prefix for the residuals of the fit to the data."""
    mean: OutputPathType
    """Prefix for the intercept of the model."""
    lhsest: OutputPathType
    """Prefix for the estimates of the LHS parameters."""
    lhsfitts: OutputPathType
    """Prefix for the fitted time series of the LHS parameters."""
    lambda_: OutputPathType
    """Prefix for output volume with the regularization parameter of the deconvolution of each voxel."""
    costs: OutputPathType
    """Prefix for output volume of the cost function used to select the regularization parameter according to the selected criteria."""
    tstats_beta: OutputPathType
    """Prefix for the T-statistics of beta at each time point."""
    tdf_beta: OutputPathType
    """Prefix for degrees of freedom of the T-statistics of beta."""
    z_tstats_beta: OutputPathType
    """Prefix for (normalized) z-scores of the T-statistics of beta."""
    fstats_beta: OutputPathType
    """Prefix for the F-statistics of the deconvolved component."""
    fdf_beta: OutputPathType
    """Prefix for degrees of freedom of Fstats_beta."""
    z_fstats_beta: OutputPathType
    """Prefix for (normalized) z-scores of the Fstats_beta."""
    tstats_lhs: OutputPathType
    """Prefix for T-statistics of LHS regressors at each time point."""
    tdf_lhs: OutputPathType
    """Prefix for degrees of freedom of the Tstats_LHS."""
    z_tstats_lhs: OutputPathType
    """Prefix for (normalized) z-scores of the Tstats_LHS."""
    fstats_lhs: OutputPathType
    """Prefix for the F-statistics of the LHS regressors."""
    fdf_lhs: OutputPathType
    """Prefix for degrees of freedom of Fstats_LHS."""
    z_fstats_lhs: OutputPathType
    """Prefix for (normalized) z-scores of Fstats_LHS."""
    fstats_full: OutputPathType
    """Prefix for the F-statistics of the full model."""
    fdf_full: OutputPathType
    """Prefix for degrees of freedom of Fstats_full."""
    z_fstats_full: OutputPathType
    """Prefix for (normalized) z-scores of Fstats_full."""
    r2_full: OutputPathType
    """Prefix for R² (coefficient of determination) of the full model."""
    r2adj_full: OutputPathType
    """Prefix for Adjusted R² coefficient for the full model."""


def v_3d_pfm(
    input_: InputPathType,
    mask: InputPathType | None = None,
    algorithm: str | None = None,
    criteria: str | None = None,
    nonzeros: float | int | None = None,
    maxiter: float | int | None = None,
    maxiterfactor: float | int | None = None,
    tr: float | int | None = None,
    hrf: str | None = None,
    hrf_vol: InputPathType | None = None,
    idx_hrf: InputPathType | None = None,
    lhs: list[InputPathType] | None = None,
    jobs: float | int | None = None,
    n_seg: float | int | None = None,
    verb: float | int | None = None,
    runner: Runner | None = None,
) -> V3dPfmOutputs:
    """
    3dPFM by C. Caballero Gaudes.
    
    Program for identifying brief BOLD events in fMRI time series using Paradigm
    Free Mapping.
    
    Args:
        input_: Specify the dataset to analyze (e.g., epi.nii).
        mask: Process voxels inside this mask only. Default is no masking.
        algorithm: Regularization function used for HRF deconvolution (dantzig\
            or lasso).
        criteria: Model selection criterion for HRF deconvolution (BIC or AIC).
        nonzeros: Choose estimate with a fixed number of nonzero coefficients.
        maxiter: Maximum number of iterations in the homotopy procedure\
            (absolute value).
        maxiterfactor: Maximum number of iterations relative to the number of\
            volumes.
        tr: Repetition time or sampling period of the input data.
        hrf: Haemodynamic response function used for deconvolution.
        hrf_vol: 3D+time dataset with voxel/nodes/vertex -dependent HRFs.
        idx_hrf: 3D dataset with voxel-dependent indexes for HRF.
        lhs: Additional regressors to be fitted to the dataset.
        jobs: Number of parallel jobs to use in processing.
        n_seg: Divide into segments to report progress.
        verb: Verbosity level (0 for quiet, 1 for talkative).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dPfmOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_PFM_METADATA)
    cargs = []
    cargs.append("3dPFM")
    cargs.append("[PARAMETERS]")
    ret = V3dPfmOutputs(
        root=execution.output_file("."),
        beta=execution.output_file(f"[BETA]", optional=True),
        betafitts=execution.output_file(f"[BETAFITTS]", optional=True),
        fitts=execution.output_file(f"[FITTS]", optional=True),
        resid=execution.output_file(f"[RESID]", optional=True),
        mean=execution.output_file(f"[MEAN]", optional=True),
        lhsest=execution.output_file(f"[LHSEST]", optional=True),
        lhsfitts=execution.output_file(f"[LHSFITTS]", optional=True),
        lambda_=execution.output_file(f"[LAMBDA]", optional=True),
        costs=execution.output_file(f"[COSTS]", optional=True),
        tstats_beta=execution.output_file(f"[TSTATS_BETA]", optional=True),
        tdf_beta=execution.output_file(f"[TDF_BETA]", optional=True),
        z_tstats_beta=execution.output_file(f"[Z_TSTATS_BETA]", optional=True),
        fstats_beta=execution.output_file(f"[FSTATS_BETA]", optional=True),
        fdf_beta=execution.output_file(f"[FDF_BETA]", optional=True),
        z_fstats_beta=execution.output_file(f"[Z_FSTATS_BETA]", optional=True),
        tstats_lhs=execution.output_file(f"[TSTATS_LHS]", optional=True),
        tdf_lhs=execution.output_file(f"[TDF_LHS]", optional=True),
        z_tstats_lhs=execution.output_file(f"[Z_TSTATS_LHS]", optional=True),
        fstats_lhs=execution.output_file(f"[FSTATS_LHS]", optional=True),
        fdf_lhs=execution.output_file(f"[FDF_LHS]", optional=True),
        z_fstats_lhs=execution.output_file(f"[Z_FSTATS_LHS]", optional=True),
        fstats_full=execution.output_file(f"[FSTATS_FULL]", optional=True),
        fdf_full=execution.output_file(f"[FDF_FULL]", optional=True),
        z_fstats_full=execution.output_file(f"[Z_FSTATS_FULL]", optional=True),
        r2_full=execution.output_file(f"[R2_FULL]", optional=True),
        r2adj_full=execution.output_file(f"[R2ADJ_FULL]", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dPfmOutputs",
    "V_3D_PFM_METADATA",
    "v_3d_pfm",
]
