# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

NICAT_METADATA = Metadata(
    id="a949df40337fdf2a83f7c3179c4d2cd769c2cef7",
    name="nicat",
)


class NicatOutputs(typing.NamedTuple):
    """
    Output object returned when calling `nicat(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def nicat(
    stream_spec: str,
    reopen: str | None = None,
    copy_stream: bool = False,
    read_only: bool = False,
    runner: Runner | None = None,
) -> NicatOutputs:
    """
    nicat by NIML.
    
    Copies stdin to the NIML stream, which will be opened for writing.
    
    Args:
        stream_spec: Stream specification (e.g., tcp:localhost:4444).
        reopen: Reopen the stream after connection to the stream specified by\
            the given value.
        copy_stream: Copy the stream to stdout instead; the 'streamspec' will\
            be opened for reading.
        read_only: Read the stream but don't copy to stdout.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `NicatOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(NICAT_METADATA)
    cargs = []
    cargs.append("nicat")
    cargs.append(stream_spec)
    if reopen is not None:
        cargs.extend(["-reopen", reopen])
    if copy_stream:
        cargs.append("-r")
    if read_only:
        cargs.append("-R")
    ret = NicatOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "NICAT_METADATA",
    "NicatOutputs",
    "nicat",
]
