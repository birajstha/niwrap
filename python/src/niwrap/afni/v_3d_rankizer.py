# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_RANKIZER_METADATA = Metadata(
    id="02a24acb7252cea4f3caac760b427edb414bac4b",
    name="3dRankizer",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dRankizerOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_rankizer(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dataset: OutputPathType
    """Output float-format dataset containing ranked voxel values"""


def v_3d_rankizer(
    dataset: InputPathType,
    prefix: str,
    base_rank: float | int | None = None,
    mask: InputPathType | None = None,
    percentize: bool = False,
    percentize_mask: bool = False,
    runner: Runner | None = None,
) -> V3dRankizerOutputs:
    """
    3dRankizer by AFNI Team.
    
    Tool to rank each voxel as sorted into increasing value. Ties get the
    average rank.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dRankizer.html
    
    Args:
        dataset: Input MRI dataset.
        prefix: Write results into float-format output dataset.
        base_rank: Set the 'base' rank instead of 1.
        mask: Use the specified dataset as a mask. Only voxels with nonzero\
            values in this mask will be used from the input dataset. Voxels outside\
            the mask will get rank 0.
        percentize: Divide rank by the number of voxels in the dataset and\
            multiply by 100.0.
        percentize_mask: Divide rank by the number of voxels in the mask and\
            multiply by 100.0.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dRankizerOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_RANKIZER_METADATA)
    cargs = []
    cargs.append("3dRankizer")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(dataset))
    ret = V3dRankizerOutputs(
        root=execution.output_file("."),
        output_dataset=execution.output_file(f"{prefix}+tlrc.HEAD"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dRankizerOutputs",
    "V_3D_RANKIZER_METADATA",
    "v_3d_rankizer",
]
