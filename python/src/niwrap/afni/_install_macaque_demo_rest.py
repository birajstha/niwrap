# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

INSTALL_MACAQUE_DEMO_REST_METADATA = Metadata(
    id="c2b9db907bf80789df12c2968cc8e903e7ac1f3d",
    name="Install_MACAQUE_DEMO_REST",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni_latest",
)


class InstallMacaqueDemoRestOutputs(typing.NamedTuple):
    """
    Output object returned when calling `install_macaque_demo_rest(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    readme_file: OutputPathType
    """Details of the demo archive after download."""


def install_macaque_demo_rest(
    wget_flag: bool = False,
    curl_flag: bool = False,
    lite_version_flag: bool = False,
    runner: Runner | None = None,
) -> InstallMacaqueDemoRestOutputs:
    """
    Install_MACAQUE_DEMO_REST by AFNI Developers.
    
    Installs the demo archive for AFNI's resting state FMRI macaque-analysis
    demo.
    
    More information: https://afni.nimh.nih.gov
    
    Args:
        wget_flag: Use wget to download archive. Script chooses by default with\
            preference for curl.
        curl_flag: Use curl to download archive. Script chooses by default with\
            preference for curl.
        lite_version_flag: Download a version of the Demo in which the EPIs\
            have been truncated to 75 points each. This makes the download size\
            less than half of the original, and means the afni_proc.py processing\
            will run faster.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `InstallMacaqueDemoRestOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(INSTALL_MACAQUE_DEMO_REST_METADATA)
    cargs = []
    cargs.append("Install_MACAQUE_DEMO_REST")
    if wget_flag:
        cargs.append("-wget")
    if curl_flag:
        cargs.append("-curl")
    if lite_version_flag:
        cargs.append("-lite_version")
    ret = InstallMacaqueDemoRestOutputs(
        root=execution.output_file("."),
        readme_file=execution.output_file(f"README.txt", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "INSTALL_MACAQUE_DEMO_REST_METADATA",
    "InstallMacaqueDemoRestOutputs",
    "install_macaque_demo_rest",
]
