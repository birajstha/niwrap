# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_EXCHANGE_METADATA = Metadata(
    id="3df272771f657f98bbe8e299fbc974fdb18eb966",
    name="3dExchange",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni_latest",
)


class V3dExchangeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_exchange(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_head: OutputPathType
    """Output HEAD file"""
    output_brik: OutputPathType
    """Output BRIK file"""


def v_3d_exchange(
    infile: InputPathType,
    mapfile: InputPathType,
    prefix: str,
    version: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> V3dExchangeOutputs:
    """
    3dExchange by AFNI Development Team.
    
    Replaces voxel values using a mapping file with specified columns.
    
    More information: https://afni.nimh.nih.gov/
    
    Args:
        infile: Input dataset. Acceptable data types are byte, short, and\
            floats.
        mapfile: Mapping columns. Input values in the first column, output\
            values in the second column.
        prefix: Output prefix.
        version: Print author and version info.
        help_: Print this help screen.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dExchangeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_EXCHANGE_METADATA)
    cargs = []
    cargs.append("3dExchange")
    cargs.append("-prefix")
    cargs.extend(["-prefix", prefix])
    cargs.append("-input")
    cargs.append(execution.input_file(infile))
    cargs.append("-map")
    cargs.append(execution.input_file(mapfile))
    if version:
        cargs.append("-ver")
    if help_:
        cargs.append("-help")
    ret = V3dExchangeOutputs(
        root=execution.output_file("."),
        output_head=execution.output_file(f"{prefix}+orig.HEAD"),
        output_brik=execution.output_file(f"{prefix}+orig.BRIK"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dExchangeOutputs",
    "V_3D_EXCHANGE_METADATA",
    "v_3d_exchange",
]
