# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

UBER_ALIGN_TEST_PY_METADATA = Metadata(
    id="39746acaf2e85ac7fc7dc8fc54961bf8dc1407b3",
    name="uber_align_test.py",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class UberAlignTestPyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `uber_align_test_py(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def uber_align_test_py(
    no_gui: bool = False,
    print_script: bool = False,
    save_script: str | None = None,
    user_variable: list[str] | None = None,
    qt_opts: str | None = None,
    help_: bool = False,
    help_gui: bool = False,
    history: bool = False,
    show_valid_opts: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> UberAlignTestPyOutputs:
    """
    uber_align_test.py by AFNI Team.
    
    Generate script to test anatomical/EPI alignment.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/uber_align_test.py.html
    
    Args:
        no_gui: Run without the graphical user interface (GUI).
        print_script: Print the generated script to standard output.
        save_script: Save the generated script to the specified file.
        user_variable: Specify user variables for alignment.
        qt_opts: Pass PyQt4 options directly to the GUI.
        help_: Show help information.
        help_gui: Show help information for the GUI.
        history: Show command history.
        show_valid_opts: Show valid options.
        version: Show version information.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `UberAlignTestPyOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(UBER_ALIGN_TEST_PY_METADATA)
    cargs = []
    cargs.append("uber_align_test.py")
    cargs.append("[COMMANDS]")
    cargs.append("[OPTIONS]")
    ret = UberAlignTestPyOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "UBER_ALIGN_TEST_PY_METADATA",
    "UberAlignTestPyOutputs",
    "uber_align_test_py",
]
