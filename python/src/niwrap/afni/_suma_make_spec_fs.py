# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_SUMA_MAKE_SPEC_FS_METADATA = Metadata(
    id="3afef99e730e90ce6062a23224aa4aa8f685d8d1",
    name="@SUMA_Make_Spec_FS",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class SumaMakeSpecFsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_suma_make_spec_fs(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    suma_output: OutputPathType
    """All created files are stored in a new SUMA directory"""


def _suma_make_spec_fs(
    subject_id: str,
    debug: int | None = None,
    fs_setup: bool = False,
    filesystem_path: str | None = None,
    extra_annot_labels: list[str] | None = None,
    extra_fs_dsets: list[str] | None = None,
    make_rank_dsets: bool = False,
    use_mgz: bool = False,
    neuro: bool = False,
    gnifti: bool = False,
    nifti: bool = False,
    inflate: float | int | None = None,
    set_space: str | None = None,
    ld: float | int | None = None,
    ldpref: str | None = None,
    no_ld: bool = False,
    runner: Runner | None = None,
) -> SumaMakeSpecFsOutputs:
    """
    @SUMA_Make_Spec_FS by AFNI Team.
    
    Prepare for surface viewing in SUMA.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/@SUMA_Make_Spec_FS.html
    
    Args:
        subject_id: Required subject ID for file naming.
        debug: Print debug information along the way; default level is 0, max\
            is 2.
        fs_setup: Source $FREESURFER_HOME/SetUpFreeSurfer.csh.
        filesystem_path: Path to 'surf' and 'orig' directories; defaults to\
            './', the current directory.
        extra_annot_labels: Convert extra annot files into ROI datasets.
        extra_fs_dsets: List other datasets to include; defaults are thickness,\
            curv, sulc.
        make_rank_dsets: Create *rank* datasets; for backward compatibility.
        use_mgz: Use MGZ volumes even if COR volumes are there.
        neuro: Use neurological orientation.
        gnifti: Produce files in exchangeable formats; same as -NIFTI.
        nifti: Produce files in exchangeable formats; output files in NIFTI\
            format and surfaces in GIFTI format.
        inflate: Create moderately inflated surfaces using SurfSmooth; control\
            the amount of smoothness with INF.
        set_space: Set the space flag of all volumes; defaults to 'orig' space.
        ld: Create standard mesh surfaces with mesh density linear depth set to\
            LD.
        ldpref: Supply the prefix option for MapIcosahedron; defaults to std.LD.
        no_ld: Do not run MapIcosahedron.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SumaMakeSpecFsOutputs`).
    """
    runner = runner or get_global_runner()
    if debug is not None and not (0 <= debug <= 2): 
        raise ValueError(f"'debug' must be between 0 <= x <= 2 but was {debug}")
    execution = runner.start_execution(_SUMA_MAKE_SPEC_FS_METADATA)
    cargs = []
    cargs.append("@SUMA_Make_Spec_FS")
    cargs.append("[OPTIONS]")
    cargs.append("-sid")
    cargs.extend(["-sid", subject_id])
    ret = SumaMakeSpecFsOutputs(
        root=execution.output_file("."),
        suma_output=execution.output_file(f"SUMA/*", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SumaMakeSpecFsOutputs",
    "_SUMA_MAKE_SPEC_FS_METADATA",
    "_suma_make_spec_fs",
]
