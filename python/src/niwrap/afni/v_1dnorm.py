# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_1DNORM_METADATA = Metadata(
    id="a002426dd8bb9a491d0dc5a5726276c33958ad9e",
    name="1dnorm",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V1dnormOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_1dnorm(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    normalized_output: OutputPathType
    """Normalized output AFNI *.1D file"""


def v_1dnorm(
    infile: InputPathType,
    outfile: str,
    norm1: bool = False,
    normx: bool = False,
    demean: bool = False,
    demed: bool = False,
    runner: Runner | None = None,
) -> V1dnormOutputs:
    """
    1dnorm by AFNI Team.
    
    Normalize columns of a 1D file (AFNI ASCII list of numbers).
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/1dnorm.html
    
    Args:
        infile: Input AFNI *.1D file (ASCII list of numbers arranged in\
            columns); if '-' input will be read from stdin.
        outfile: Output AFNI *.1D file (normalized); if '-' output will be\
            written to stdout.
        norm1: Normalize so sum of absolute values is 1 (L_1 norm).
        normx: Normalize so that max absolute value is 1 (L_infinity norm).
        demean: Subtract each column's mean before normalizing.
        demed: Subtract each column's median before normalizing.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V1dnormOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_1DNORM_METADATA)
    cargs = []
    cargs.append("1dnorm")
    cargs.append("[OPTION]")
    cargs.append(execution.input_file(infile))
    cargs.append(outfile)
    ret = V1dnormOutputs(
        root=execution.output_file("."),
        normalized_output=execution.output_file(f"{outfile}", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V1dnormOutputs",
    "V_1DNORM_METADATA",
    "v_1dnorm",
]
