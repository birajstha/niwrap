# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

SURF_TO_SURF_METADATA = Metadata(
    id="851484f9e88530172b87eda8288d63de71ec6105",
    name="SurfToSurf",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="nimh-afni/afni:latest",
)


class SurfToSurfOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surf_to_surf(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output file in 1D format"""


def surf_to_surf(
    input_surface_1: InputPathType,
    input_surface_2: InputPathType,
    surface_volume: InputPathType | None = None,
    prefix: str | None = None,
    output_params: str | None = None,
    node_indices: InputPathType | None = None,
    proj_dir: InputPathType | None = None,
    data: InputPathType | None = None,
    node_debug: float | int | None = None,
    debug_level: float | int | None = None,
    make_consistent: bool = False,
    dset: InputPathType | None = None,
    mapfile: InputPathType | None = None,
    runner: Runner | None = None,
) -> SurfToSurfOutputs:
    """
    SurfToSurf by Ziad S. Saad, Shruti Japee.
    
    Interpolate data from one surface to another.
    
    Args:
        input_surface_1: First input surface file (S1).
        input_surface_2: Second input surface file (S2).
        surface_volume: Specify the surface volume (SV1).
        prefix: Specify prefix for the output file.
        output_params: List of mapping parameters to include in output.
        node_indices: 1D file containing node indices of S1 to consider.
        proj_dir: 1D file containing projection directions.
        data: 1D file containing data to be interpolated.
        node_debug: Node index for debugging purposes.
        debug_level: Debugging level.
        make_consistent: Force a consistency check and correct triangle\
            orientation.
        dset: Dataset file for data interpolation; mutually exclusive with\
            -data.
        mapfile: File containing mapping parameters between surfaces S2 and S1.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfToSurfOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURF_TO_SURF_METADATA)
    cargs = []
    cargs.append("SurfToSurf")
    cargs.append("<-i_TYPE")
    cargs.append("S1>")
    cargs.append("[<-sv")
    cargs.append("SV1>]")
    cargs.append("<-i_TYPE")
    cargs.append("S2>")
    cargs.append("[<-sv")
    cargs.append("SV1>]")
    cargs.append("[<-prefix")
    cargs.append("PREFIX>]")
    cargs.append("[<-output_params")
    cargs.append("PARAM_LIST>]")
    cargs.append("[<-node_indices")
    cargs.append("NODE_INDICES>]")
    cargs.append("[<-proj_dir")
    cargs.append("PROJ_DIR>]")
    cargs.append("[<-data")
    cargs.append("DATA>]")
    cargs.append("[<-node_debug")
    cargs.append("NODE>]")
    cargs.append("[<-debug")
    cargs.append("DBG_LEVEL>]")
    if make_consistent:
        cargs.append("-make_consistent")
    cargs.append("[<-dset")
    cargs.append("DSET>]")
    cargs.append("[<-mapfile")
    cargs.append("MAP_INFO>]")
    ret = SurfToSurfOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(f"[PREFIX].1D", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SURF_TO_SURF_METADATA",
    "SurfToSurfOutputs",
    "surf_to_surf",
]
