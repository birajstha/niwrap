# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

DICOM_HDR_METADATA = Metadata(
    id="7940d1c952c1985b31235192fa73e53002e6d4f9",
    name="dicom_hdr",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class DicomHdrOutputs(typing.NamedTuple):
    """
    Output object returned when calling `dicom_hdr(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def dicom_hdr(
    files: list[InputPathType],
    hex_: bool = False,
    noname: bool = False,
    sexinfo: bool = False,
    mulfram: bool = False,
    v_dump: float | int | None = None,
    no_length: bool = False,
    slice_times: bool = False,
    slice_times_verb: bool = False,
    siemens_csa_data: bool = False,
    runner: Runner | None = None,
) -> DicomHdrOutputs:
    """
    dicom_hdr by AFNI Team.
    
    A tool to print DICOM file information to stdout.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/dicom_hdr.html
    
    Args:
        files: DICOM file(s) to read.
        hex_: Include hexadecimal printout for integer values.
        noname: Don't include element names in the printout.
        sexinfo: Dump Siemens EXtra INFO text (0029 1020), if present (can be\
            VERY lengthy).
        mulfram: Dump multi-frame information, if present (1 line per frame,\
            plus an XML-style header/footer). This option also implies -noname.
        v_dump: Dump n words of binary data also.
        no_length: Skip lengths and offsets (helps diffs).
        slice_times: Show slice times from Siemens mosaic images.
        slice_times_verb: Show slice times from Siemens mosaic images\
            verbosely. (multiple uses increase verbosity, can dump CSA data).
        siemens_csa_data: Same as 3 -slice_times_verb opts.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DicomHdrOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DICOM_HDR_METADATA)
    cargs = []
    cargs.append("dicom_hdr")
    cargs.append("[OPTIONS]")
    cargs.extend([execution.input_file(f) for f in files])
    ret = DicomHdrOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "DICOM_HDR_METADATA",
    "DicomHdrOutputs",
    "dicom_hdr",
]
