# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_1D_BANDPASS_METADATA = Metadata(
    id="532563f769d969b66fd5d36037c486131932956b",
    name="1dBandpass",
)


class V1dBandpassOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_1d_bandpass(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def v_1d_bandpass(
    fbot: float | int,
    ftop: float | int,
    infile: InputPathType,
    timestep: float | int | None = None,
    ortfile: InputPathType | None = None,
    nodetrend: bool = False,
    norm: bool = False,
    runner: Runner | None = None,
) -> V1dBandpassOutputs:
    """
    1dBandpass by RWCox.
    
    Bandpass filtering of time series data in AFNI *.1D files.
    
    Args:
        fbot: Lowest frequency in the passband, in Hz (must be greater than or\
            equal to 0).
        ftop: Highest frequency in the passband, in Hz (must be greater than\
            FBOT).
        infile: Input AFNI *.1D file; each column is processed.
        timestep: Set time step to 'dd' sec (default is 1.0).
        ortfile: Also orthogonalize input to columns in specified *.1D file\
            (only one '-ort' option is allowed).
        nodetrend: Skip the quadratic detrending of the input.
        norm: Make output time series have L2 norm = 1.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V1dBandpassOutputs`).
    """
    runner = runner or get_global_runner()
    if not (0 <= fbot): 
        raise ValueError(f"'fbot' must be greater than 0 <= x but was {fbot}")
    execution = runner.start_execution(V_1D_BANDPASS_METADATA)
    cargs = []
    cargs.append("1dBandpass")
    cargs.append("[OPTIONS]")
    cargs.append(str(fbot))
    cargs.append(str(ftop))
    cargs.append(execution.input_file(infile))
    ret = V1dBandpassOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V1dBandpassOutputs",
    "V_1D_BANDPASS_METADATA",
    "v_1d_bandpass",
]
