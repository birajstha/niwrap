# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3DPC_METADATA = Metadata(
    id="1aaf246230de8df45df717d2b7a8df17d756b702",
    name="3dpc",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dpcOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3dpc(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dataset: OutputPathType | None
    """Output dataset file"""
    output_header: OutputPathType | None
    """Output dataset header file"""
    output_eig: OutputPathType | None
    """File with computed eigenvalues"""
    output_vec: OutputPathType | None
    """File with all eigen-timeseries"""
    output_individual_vec: OutputPathType | None
    """File with individual eigenvalue timeseries"""


def v_3dpc(
    datasets: list[InputPathType],
    dmean: bool = False,
    vmean: bool = False,
    vnorm: bool = False,
    normalize: bool = False,
    nscale: bool = False,
    pcsave: str | None = None,
    reduce: list[str] | None = None,
    prefix: str | None = None,
    dummy_lines: int | None = None,
    verbose: bool = False,
    quiet: bool = False,
    eigonly: bool = False,
    float_: bool = False,
    mask: InputPathType | None = None,
    runner: Runner | None = None,
) -> V3dpcOutputs:
    """
    3dpc by AFNI Team.
    
    Principal Component Analysis of 3D Datasets.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dpc.html
    
    Args:
        datasets: Input dataset(s) with sub-brick selector list support.
        dmean: Remove the mean from each input brick (across space).
        vmean: Remove the mean from each input voxel (across bricks).
        vnorm: L2 normalize each input voxel time series.
        normalize: L2 normalize each input brick (after mean subtraction).
        nscale: Scale the covariance matrix by the number of samples.
        pcsave: 'sss' is the number of components to save in the output.
        reduce: Compute a dimensionally reduced dataset with top 'r'\
            eigenvalues and write to disk in dataset 'pp'.
        prefix: Name for the output dataset.
        dummy_lines: Add 'ddd' dummy lines to the top of each *.1D file.
        verbose: Print progress reports during the computations.
        quiet: Don't print progress reports.
        eigonly: Only compute eigenvalues, write them to 'pname'_eig.1D, then\
            stop.
        float_: Save eigen-bricks as floats (default = shorts).
        mask: Use the 0 sub-brick of dataset 'mset' as a mask indicating which\
            voxels to analyze.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dpcOutputs`).
    """
    runner = runner or get_global_runner()
    if reduce is not None and (len(reduce) != 2): 
        raise ValueError(f"Length of 'reduce' must be 2 but was {len(reduce)}")
    execution = runner.start_execution(V_3DPC_METADATA)
    cargs = []
    cargs.append("3dpc")
    cargs.append("[OPTIONS]")
    cargs.append("[INPUT_DATASETS...]")
    ret = V3dpcOutputs(
        root=execution.output_file("."),
        output_dataset=execution.output_file(f"{prefix}+orig.BRIK", optional=True) if prefix is not None else None,
        output_header=execution.output_file(f"{prefix}+orig.HEAD", optional=True) if prefix is not None else None,
        output_eig=execution.output_file(f"{prefix}_eig.1D", optional=True) if prefix is not None else None,
        output_vec=execution.output_file(f"{prefix}_vec.1D", optional=True) if prefix is not None else None,
        output_individual_vec=execution.output_file(f"{prefix}[NN].1D", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dpcOutputs",
    "V_3DPC_METADATA",
    "v_3dpc",
]
