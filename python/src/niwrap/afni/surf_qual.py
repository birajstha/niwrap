# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

SURF_QUAL_METADATA = Metadata(
    id="a4fd8551505869ea034a3c1708dfb8bec29f0b1e",
    name="SurfQual",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="your-docker-repo/surfqual:latest",
)


class SurfQualOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surf_qual(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    dist_output: OutputPathType | None
    """File containing distances of nodes from the surface's center."""
    dist_color_output: OutputPathType | None
    """Colorized file containing distances of nodes from the surface's center."""
    bad_nodes_output: OutputPathType | None
    """File containing nodes with bad dot product values."""
    bad_nodes_color_output: OutputPathType | None
    """Colorized file containing nodes with bad dot product values."""
    dotprod_output: OutputPathType | None
    """File containing dot product values for all nodes."""
    dotprod_color_output: OutputPathType | None
    """Colorized file containing dot product values for all nodes."""
    intersect_nodes_output: OutputPathType | None
    """File containing indices of nodes forming segments that intersect the surface."""


def surf_qual(
    spec_file: InputPathType,
    surface_a: list[InputPathType],
    sphere_flag: bool = False,
    summary_flag: bool = False,
    self_intersect_flag: bool = False,
    output_prefix: str | None = None,
    runner: Runner | None = None,
) -> SurfQualOutputs:
    """
    SurfQual by SSCC/NIMH/NIH.
    
    A program to check the quality of surfaces.
    
    Args:
        spec_file: Spec file containing input surfaces.
        surface_a: Name of input surface A.
        sphere_flag: Indicates that surfaces read are spherical.
        summary_flag: Provide summary of results to stdout.
        self_intersect_flag: Check if surface is self intersecting.
        output_prefix: Prefix of output files. Default is the surface's label.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfQualOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURF_QUAL_METADATA)
    cargs = []
    cargs.append("SurfQual")
    cargs.append("-spec")
    cargs.extend(["-spec", execution.input_file(spec_file)])
    cargs.extend(["-surf_A", *[execution.input_file(f) for f in surface_a]])
    cargs.append("-sphere")
    cargs.append("[OPTIONS]")
    ret = SurfQualOutputs(
        root=execution.output_file("."),
        dist_output=execution.output_file(f"{output_prefix}_Dist.1D.dset", optional=True) if output_prefix is not None else None,
        dist_color_output=execution.output_file(f"{output_prefix}_Dist.1D.col", optional=True) if output_prefix is not None else None,
        bad_nodes_output=execution.output_file(f"{output_prefix}_BadNodes.1D.dset", optional=True) if output_prefix is not None else None,
        bad_nodes_color_output=execution.output_file(f"{output_prefix}_BadNodes.1D.col", optional=True) if output_prefix is not None else None,
        dotprod_output=execution.output_file(f"{output_prefix}_dotprod.1D.dset", optional=True) if output_prefix is not None else None,
        dotprod_color_output=execution.output_file(f"{output_prefix}_dotprod.1D.col", optional=True) if output_prefix is not None else None,
        intersect_nodes_output=execution.output_file(f"{output_prefix}_IntersNodes.1D.dset", optional=True) if output_prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SURF_QUAL_METADATA",
    "SurfQualOutputs",
    "surf_qual",
]
