# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_ALIGN_PARTIAL_OBLIQUE_METADATA = Metadata(
    id="2ff55e391cd7aa4d8072c317bef53c329492c29c",
    name="@align_partial_oblique",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="your-docker-image:latest",
)


class AlignPartialObliqueOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_align_partial_oblique(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    aligned_output: OutputPathType
    """Aligned partial coverage T1 weighted dataset"""


def _align_partial_oblique(
    base: InputPathType,
    input_: InputPathType,
    suffix: str | None = None,
    keep_tmp: bool = False,
    clean: bool = False,
    dxyz: float | int | None = None,
    dx: float | int | None = None,
    dy: float | int | None = None,
    dz: float | int | None = None,
    runner: Runner | None = None,
) -> AlignPartialObliqueOutputs:
    """
    @align_partial_oblique by Ziad S. Saad.
    
    A script to align a full coverage T1 weighted non-oblique dataset to match a
    partial coverage T1 weighted non-oblique dataset. Alignment is done with a
    rotation and shift (6 parameters) transform only.
    
    Args:
        base: Reference anatomical full coverage volume.
        input_: Partial coverage T1 weighted non-oblique dataset.
        suffix: Output dataset name is formed by adding SUF to the prefix of\
            the base dataset. The default suffix is _alnd_PartialCoverageObliqueT1.
        keep_tmp: Keep temporary files.
        clean: Clean all temp files, likely left from -keep_tmp option then\
            exit.
        dxyz: Cubic voxel size of output dataset in TLRC space Default MM is 1.
        dx: Size of voxel in the x direction (Right-Left). Default is 1mm.
        dy: Size of voxel in the y direction (Anterior-Posterior). Default is\
            1mm.
        dz: Size of voxel in the z direction (Inferior-Superior). Default is\
            1mm.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AlignPartialObliqueOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(_ALIGN_PARTIAL_OBLIQUE_METADATA)
    cargs = []
    cargs.append("@align_partial_oblique")
    cargs.extend(["-base", execution.input_file(base)])
    cargs.extend(["-input", execution.input_file(input_)])
    if suffix is not None:
        cargs.extend(["-suffix", suffix])
    if keep_tmp:
        cargs.append("-keep_tmp")
    if clean:
        cargs.append("-clean")
    if dxyz is not None:
        cargs.extend(["-dxyz", str(dxyz)])
    if dx is not None:
        cargs.extend(["-dx", str(dx)])
    if dy is not None:
        cargs.extend(["-dy", str(dy)])
    if dz is not None:
        cargs.extend(["-dz", str(dz)])
    ret = AlignPartialObliqueOutputs(
        root=execution.output_file("."),
        aligned_output=execution.output_file(f"{pathlib.Path(base).name}_alnd_{pathlib.Path(input_).name}.nii.gz"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "AlignPartialObliqueOutputs",
    "_ALIGN_PARTIAL_OBLIQUE_METADATA",
    "_align_partial_oblique",
]
