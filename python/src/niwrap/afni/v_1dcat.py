# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_1DCAT_METADATA = Metadata(
    id="9af96f5a182c0cba2a60dec446df1651e25840c8",
    name="1dcat",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V1dcatOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_1dcat(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    concatenated_output: OutputPathType
    """Concatenated output in specified format"""


def v_1dcat(
    input_files: list[InputPathType],
    tsv_output: bool = False,
    csv_output: bool = False,
    nonconst_output: bool = False,
    nonfixed_output: bool = False,
    number_format: str | None = None,
    stack_output: bool = False,
    column_row_selection: str | None = None,
    ok_empty: bool = False,
    runner: Runner | None = None,
) -> V1dcatOutputs:
    """
    1dcat by AFNI Team.
    
    Concatenates columns of multiple 1D or TSV/CSV files.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/1dcat.html
    
    Args:
        input_files: Input 1D or TSV/CSV files to concatenate.
        tsv_output: Output in TSV format with tabs as separators and a header\
            line.
        csv_output: Output in CSV format with commas as separators and a header\
            line.
        nonconst_output: Omit columns that are identically constant from the\
            output.
        nonfixed_output: Keep only columns marked as 'free' in the 3dAllineate\
            header.
        number_format: Specify the format of the numbers to be output.
        stack_output: Stack the columns of the resulting matrix in the output.
        column_row_selection: Apply the same column/row selection string to all\
            filenames on the command line.
        ok_empty: Exit quietly when encountering an empty file on disk.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V1dcatOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_1DCAT_METADATA)
    cargs = []
    cargs.append("1dcat")
    cargs.append("[OPTIONS]")
    cargs.extend([execution.input_file(f) for f in input_files])
    ret = V1dcatOutputs(
        root=execution.output_file("."),
        concatenated_output=execution.output_file(f"stdout"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V1dcatOutputs",
    "V_1DCAT_METADATA",
    "v_1dcat",
]
