# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_REORDER_METADATA = Metadata(
    id="ffe8738d074fad51ebbb2634dbd36246f5da8ccc",
    name="@Reorder",
)


class ReorderOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_reorder(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dataset: OutputPathType
    """Reordered output dataset"""


def _reorder(
    input_dataset: InputPathType,
    mapfile: InputPathType,
    prefix: str,
    offset: float | int | None = None,
    save_work: bool = False,
    test: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> ReorderOutputs:
    """
    @Reorder by R Reynolds (for J Bjork).
    
    Reorder sub-bricks of a dataset based on event mapping. Works similarly to
    the Reorder plugin.
    
    More information: http://example.com/reorder_plugin_help
    
    Args:
        input_dataset: Input dataset to reorder (e.g. EPI+tlrc).
        mapfile: TR to event mapping file (e.g. events.txt).
        prefix: Prefix for the output dataset.
        offset: Offset mapfile TR indices by OFFSET (in TRs).
        save_work: Do not delete work directory (reorder.work.dir) at the end.
        test: Just report sub-bricks, do not create datasets.
        help_: Show help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ReorderOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(_REORDER_METADATA)
    cargs = []
    cargs.append("@Reorder")
    cargs.append(execution.input_file(input_dataset))
    cargs.append(execution.input_file(mapfile))
    cargs.append(prefix)
    if offset is not None:
        cargs.extend(["-offset", str(offset)])
    if save_work:
        cargs.append("-save_work")
    if test:
        cargs.append("-test")
    ret = ReorderOutputs(
        root=execution.output_file("."),
        output_dataset=execution.output_file(f"{prefix}+tlrc"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "ReorderOutputs",
    "_REORDER_METADATA",
    "_reorder",
]
