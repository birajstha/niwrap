# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

CLIP_VOLUME_METADATA = Metadata(
    id="0f85cb73e5b4d1c8fc70c2d2617e10e83b9f9ed8",
    name="clip_volume",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="some/docker-image:latest",
)


class ClipVolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `clip_volume(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_clipped_volume: OutputPathType | None
    """Output clipped or cropped volume"""
    output_followers: OutputPathType | None
    """Output for follower datasets after clipping/cropping"""


def clip_volume(
    input_volume: InputPathType,
    below_zmm: float | int | None = None,
    above_zmm: float | int | None = None,
    left_xmm: float | int | None = None,
    right_xmm: float | int | None = None,
    anterior_ymm: float | int | None = None,
    posterior_ymm: float | int | None = None,
    box: list[float | int] | None = None,
    mask_box: list[float | int] | None = None,
    and_logic: bool = False,
    or_logic: bool = False,
    verbosity: bool = False,
    crop_allzero: bool = False,
    crop_greedy: bool = False,
    crop: bool = False,
    crop_npad: float | int | None = None,
    output_prefix: str | None = None,
    followers: list[InputPathType] | None = None,
    runner: Runner | None = None,
) -> ClipVolumeOutputs:
    """
    clip_volume by Ziad S. Saad.
    
    A tool to clip regions of a volume in various ways, such as above/below
    certain coordinates or within a specified box.
    
    Args:
        input_volume: Volume to clip.
        below_zmm: Set to 0 slices below Zmm.
        above_zmm: Set to 0 slices above Zmm.
        left_xmm: Set to 0 slices left of Xmm.
        right_xmm: Set to 0 slices right of Xmm.
        anterior_ymm: Set to 0 slices anterior to Ymm.
        posterior_ymm: Set to 0 slices posterior to Ymm.
        box: Clip the volume to a box centered at Cx, Cy, Cz (RAI mm), and of\
            dimensions Dx Dy Dz (RAI mm).
        mask_box: Set all values inside the box to 1. Box centered at Cx, Cy,\
            Cz (RAI mm), and of dimensions Dx Dy Dz (RAI mm).
        and_logic: Combine with next clipping planes using 'and'.
        or_logic: Combine with next clipping planes using 'or'.
        verbosity: Show command details (verbose output).
        crop_allzero: Crop the output volume with 3dAutobox -noclust.
        crop_greedy: Crop the output volume with 3dAutobox.
        crop: Same as -crop_greedy, kept for backward compatibility.
        crop_npad: Set 3dAutobox's -npad option to NPAD. NPAD fattens the\
            volume a little after cropping.
        output_prefix: Output prefix for the resultant volume. Default is the\
            input prefix with _clp suffixed to it.
        followers: Apply the same clipping or cropping treatment to the\
            follower datasets.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ClipVolumeOutputs`).
    """
    runner = runner or get_global_runner()
    if box is not None and (len(box) != 6): 
        raise ValueError(f"Length of 'box' must be 6 but was {len(box)}")
    if mask_box is not None and (len(mask_box) != 6): 
        raise ValueError(f"Length of 'mask_box' must be 6 but was {len(mask_box)}")
    execution = runner.start_execution(CLIP_VOLUME_METADATA)
    cargs = []
    cargs.append("@clip_volume")
    cargs.append("-input")
    cargs.append(execution.input_file(input_volume))
    cargs.append("[CLIPPING_OPTIONS]")
    cargs.append("[LOGIC_OPTIONS]")
    cargs.append("[CROP_OPTIONS]")
    cargs.append("-prefix")
    if output_prefix is not None:
        cargs.extend(["-prefix", output_prefix])
    ret = ClipVolumeOutputs(
        root=execution.output_file("."),
        output_clipped_volume=execution.output_file(f"{output_prefix}_clp.nii.gz") if output_prefix is not None else None,
        output_followers=execution.output_file(f"{output_prefix}_follow_clp.nii.gz", optional=True) if output_prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CLIP_VOLUME_METADATA",
    "ClipVolumeOutputs",
    "clip_volume",
]
