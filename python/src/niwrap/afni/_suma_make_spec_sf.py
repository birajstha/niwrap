# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_SUMA_MAKE_SPEC_SF_METADATA = Metadata(
    id="73b9cbdb7c10a3694766daeecd4d9f250cd70c2b",
    name="@SUMA_Make_Spec_SF",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni:latest",
)


class SumaMakeSpecSfOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_suma_make_spec_sf(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_files: OutputPathType
    """All created files are stored in SURFACES directory"""


def _suma_make_spec_sf(
    subject_id: str,
    debug_level: int | None = None,
    surface_path: str | None = None,
    runner: Runner | None = None,
) -> SumaMakeSpecSfOutputs:
    """
    @SUMA_Make_Spec_SF by R. Reynolds (rickr@codon.nih.gov), Z. Saad
    (saadz@mail.nih.gov).
    
    Prepare for surface viewing in SUMA.
    
    More information: https://afni.nimh.nih.gov/ssc/ziad/SUMA/SUMA_doc.htm
    
    Args:
        subject_id: Required subject ID for file naming.
        debug_level: Print debug information along the way.
        surface_path: Path to directory containing 'SURFACES' and AFNI volume\
            used in creating the surfaces.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SumaMakeSpecSfOutputs`).
    """
    runner = runner or get_global_runner()
    if debug_level is not None and not (debug_level <= 2): 
        raise ValueError(f"'debug_level' must be less than x <= 2 but was {debug_level}")
    execution = runner.start_execution(_SUMA_MAKE_SPEC_SF_METADATA)
    cargs = []
    cargs.append("@SUMA_Make_Spec_SF")
    if debug_level is not None:
        cargs.extend(["-debug", str(debug_level)])
    if surface_path is not None:
        cargs.extend(["-sfpath", surface_path])
    cargs.append("-sid")
    cargs.extend(["-sid", subject_id])
    ret = SumaMakeSpecSfOutputs(
        root=execution.output_file("."),
        output_files=execution.output_file(f"SURFACES/*", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SumaMakeSpecSfOutputs",
    "_SUMA_MAKE_SPEC_SF_METADATA",
    "_suma_make_spec_sf",
]
