# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

R_PKGS_INSTALL_METADATA = Metadata(
    id="d1edf6a7d296aa8e85844771af872bd37c29a627",
    name="rPkgsInstall",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class RPkgsInstallOutputs(typing.NamedTuple):
    """
    Output object returned when calling `r_pkgs_install(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_packages: OutputPathType
    """Output R packages after installation, update, or removal"""


def r_pkgs_install(
    packages: str,
    download_site: str | None = None,
    check: bool = False,
    update_: bool = False,
    remove: bool = False,
    runner: Runner | None = None,
) -> RPkgsInstallOutputs:
    """
    rPkgsInstall by AFNI Team.
    
    A tool for installing, checking, updating, or removing R packages for AFNI.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/rPkgsInstall.html
    
    Args:
        packages: List of R packages to install, update, or remove. Use 'ALL'\
            to refer to all AFNI-required packages.
        download_site: Specify the package repository website. Default is\
            'http://cloud.r-project.org'.
        check: Verify whether the specified R packages are installed on the\
            computer without installing/updating/removing them.
        update_: Update the specified R packages. If packages are not\
            installed, they will be installed.
        remove: Remove the specified R packages from the system.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RPkgsInstallOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(R_PKGS_INSTALL_METADATA)
    cargs = []
    cargs.append("rPkgsInstall")
    cargs.extend(["-pkgs", packages])
    if download_site is not None:
        cargs.extend(["-site", download_site])
    if check:
        cargs.append("-check")
    if update_:
        cargs.append("-update")
    if remove:
        cargs.append("-remove")
    ret = RPkgsInstallOutputs(
        root=execution.output_file("."),
        output_packages=execution.output_file(f"{packages}", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "RPkgsInstallOutputs",
    "R_PKGS_INSTALL_METADATA",
    "r_pkgs_install",
]
