# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

QUICKSPEC_METADATA = Metadata(
    id="0c9f3d2bdc2440dc331863abcff23630b3201a5d",
    name="quickspec",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class QuickspecOutputs(typing.NamedTuple):
    """
    Output object returned when calling `quickspec(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_specfile: OutputPathType | None
    """The spec file output."""


def quickspec(
    tn: list[str],
    tsn: list[str],
    tsnad: list[str] | None = None,
    tsnadm: list[str] | None = None,
    tsnadl: list[str] | None = None,
    spec: str | None = None,
    help_: bool = False,
    runner: Runner | None = None,
) -> QuickspecOutputs:
    """
    quickspec by AFNI Team.
    
    A quick and dirty way of loading a surface into SUMA or command line
    programs using a spec file.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/quickspec.html
    
    Args:
        tn: Specify surface type and name.
        tsn: Specify surface type, state, and name.
        tsnad: Specify surface type, state, name, anatomical correctness, and\
            Local Domain Parent.
        tsnadm: Specify surface type, state, name, anatomical correctness,\
            Local Domain Parent, and node marker file.
        tsnadl: Specify surface type, state, name, anatomical correctness,\
            Local Domain Parent, and label dataset file.
        spec: Name of spec file output. Default is quick.spec.
        help_: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `QuickspecOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(QUICKSPEC_METADATA)
    cargs = []
    cargs.append("quickspec")
    cargs.append("[PARAMS...]")
    ret = QuickspecOutputs(
        root=execution.output_file("."),
        out_specfile=execution.output_file(f"{spec}", optional=True) if spec is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "QUICKSPEC_METADATA",
    "QuickspecOutputs",
    "quickspec",
]
