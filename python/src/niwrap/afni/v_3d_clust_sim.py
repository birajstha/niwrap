# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_CLUST_SIM_METADATA = Metadata(
    id="976020da68a316631107fb86056b5093281803d2",
    name="3dClustSim",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni_linux_xorg7_64:latest",
)


class V3dClustSimOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_clust_sim(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_nn1_1sided: OutputPathType | None
    """Output file for NN1 with 1-sided thresholding"""
    output_nn1_2sided: OutputPathType | None
    """Output file for NN1 with 2-sided thresholding"""
    output_nn1_bisided: OutputPathType | None
    """Output file for NN1 with bi-sided thresholding"""
    output_nn2_1sided: OutputPathType | None
    """Output file for NN2 with 1-sided thresholding"""
    output_nn2_2sided: OutputPathType | None
    """Output file for NN2 with 2-sided thresholding"""
    output_nn2_bisided: OutputPathType | None
    """Output file for NN2 with bi-sided thresholding"""
    output_nn3_1sided: OutputPathType | None
    """Output file for NN3 with 1-sided thresholding"""
    output_nn3_2sided: OutputPathType | None
    """Output file for NN3 with 2-sided thresholding"""
    output_nn3_bisided: OutputPathType | None
    """Output file for NN3 with bi-sided thresholding"""
    mask_compressed: OutputPathType | None
    """Compressed ASCII encoding of the mask volume"""


def v_3d_clust_sim(
    nxyz: str | None = None,
    dxyz: str | None = None,
    ball: bool = False,
    mask: InputPathType | None = None,
    oksmallmask: bool = False,
    inset: list[InputPathType] | None = None,
    fwhm: float | int | None = None,
    acf: str | None = None,
    nopad: bool = False,
    pthr: str | None = None,
    athr: str | None = None,
    lots: bool = False,
    mega: bool = False,
    iter_: float | int | None = None,
    nodec: bool = False,
    seed: float | int | None = None,
    niml: bool = False,
    both: bool = False,
    prefix: str | None = None,
    cmd_: str | None = None,
    quiet: bool = False,
    ssave: str | None = None,
    runner: Runner | None = None,
) -> V3dClustSimOutputs:
    """
    3dClustSim by AFNI (Analysis of Functional NeuroImages).
    
    Program to estimate the probability of false positive (noise-only) clusters.
    
    More information: https://afni.nimh.nih.gov/
    
    Args:
        nxyz: Size of 3D grid to use for simulation.
        dxyz: Voxel sizes along each dimension.
        ball: Mask off points outside a ball at the center of the grid.
        mask: Use the 0 sub-brick of this dataset as a mask.
        oksmallmask: Allow small masks with less than 128 nonzero voxels.
        inset: Use these dataset(s) as the simulations to threshold and\
            clusterize.
        fwhm: Gaussian filter width in mm (use -fwhmxyz for different values\
            per axis).
        acf: Parameters a, b, c for the autocorrelation function.
        nopad: Turn off padding slices added for edge effects.
        pthr: List of uncorrected per voxel p-values.
        athr: List of corrected whole volume alpha-values.
        lots: Use a longer list of values for pthr and athr.
        mega: Add even more values to the pthr and athr grids.
        iter_: Number of Monte Carlo simulations.
        nodec: Print the cluster size threshold as an integer.
        seed: Random number seed.
        niml: Output the table in XML/NIML format.
        both: Output the table in both XML/NIML format and in .1D format.
        prefix: Specify prefix for the output files.
        cmd_: Write command for putting results into a file's header.
        quiet: Don't print out progress reports.
        ssave: Save un-thresholded generated random volumes.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dClustSimOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_CLUST_SIM_METADATA)
    cargs = []
    cargs.append("3dClustSim")
    cargs.append("[OPTIONS]")
    ret = V3dClustSimOutputs(
        root=execution.output_file("."),
        output_nn1_1sided=execution.output_file(f"{prefix}.NN1_1sided.1D", optional=True) if prefix is not None else None,
        output_nn1_2sided=execution.output_file(f"{prefix}.NN1_2sided.1D", optional=True) if prefix is not None else None,
        output_nn1_bisided=execution.output_file(f"{prefix}.NN1_bisided.1D", optional=True) if prefix is not None else None,
        output_nn2_1sided=execution.output_file(f"{prefix}.NN2_1sided.1D", optional=True) if prefix is not None else None,
        output_nn2_2sided=execution.output_file(f"{prefix}.NN2_2sided.1D", optional=True) if prefix is not None else None,
        output_nn2_bisided=execution.output_file(f"{prefix}.NN2_bisided.1D", optional=True) if prefix is not None else None,
        output_nn3_1sided=execution.output_file(f"{prefix}.NN3_1sided.1D", optional=True) if prefix is not None else None,
        output_nn3_2sided=execution.output_file(f"{prefix}.NN3_2sided.1D", optional=True) if prefix is not None else None,
        output_nn3_bisided=execution.output_file(f"{prefix}.NN3_bisided.1D", optional=True) if prefix is not None else None,
        mask_compressed=execution.output_file(f"{prefix}.mask", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dClustSimOutputs",
    "V_3D_CLUST_SIM_METADATA",
    "v_3d_clust_sim",
]
