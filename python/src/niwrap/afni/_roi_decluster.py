# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

ROI_DECLUSTER_METADATA = Metadata(
    id="ca1707bc1d6ffb4befbd1e40030bcf468f59de01",
    name="ROI decluster",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="example/roi-decluster:latest",
)


class RoiDeclusterOutputs(typing.NamedTuple):
    """
    Output object returned when calling `roi_decluster(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType | None
    """Final output dataset"""


def roi_decluster(
    input_dset: InputPathType,
    output_dir: str | None = None,
    nvox_thresh: float | int | None = None,
    frac_thresh: float | int | None = None,
    prefix: str | None = None,
    neighborhood_type: int | None = None,
    runner: Runner | None = None,
) -> RoiDeclusterOutputs:
    """
    ROI decluster.
    
    Script to remove small clusters or standalone voxels from an ROI/atlas
    dataset.
    
    Args:
        input_dset: Required input dataset. This dataset should be set of\
            integer values. The program mostly assumes approximate isotropic\
            voxels.
        output_dir: Directory name for output. All output goes to this\
            directory.
        nvox_thresh: Number of voxels in a cluster to keep.
        frac_thresh: Fraction of voxels in a cluster to keep [0.0-1.0].
        prefix: Base name of final output dataset, i.e. baseprefix.nii.gz.
        neighborhood_type: Neighborhood type using in finding mode: 1 - facing\
            neighbors, 2 - edges, 3 - corners.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RoiDeclusterOutputs`).
    """
    runner = runner or get_global_runner()
    if neighborhood_type is not None and not (1 <= neighborhood_type <= 3): 
        raise ValueError(f"'neighborhood_type' must be between 1 <= x <= 3 but was {neighborhood_type}")
    execution = runner.start_execution(ROI_DECLUSTER_METADATA)
    cargs = []
    cargs.append("@ROI_decluster")
    cargs.append("-input")
    cargs.append("<input>")
    cargs.append("-outdir")
    cargs.append("<outdir>")
    cargs.append("-prefix")
    cargs.append("<prefix>")
    cargs.append("-nvox_thresh")
    cargs.append("<nvox_thresh>")
    cargs.append("-frac_thresh")
    cargs.append("<frac_thresh>")
    cargs.append("-NN")
    cargs.append("<NN>")
    ret = RoiDeclusterOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(f"{prefix}.nii.gz", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "ROI_DECLUSTER_METADATA",
    "RoiDeclusterOutputs",
    "roi_decluster",
]
