# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3DEDGE3_METADATA = Metadata(
    id="0432779795db18a4dfa86745a1f8dc2d6ecfe4c7",
    name="3dedge3",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dedge3Outputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3dedge3(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType | None
    """Output dataset"""


def v_3dedge3(
    input_file: InputPathType,
    verbose: bool = False,
    prefix: str | None = None,
    datum: str | None = None,
    fscale: bool = False,
    gscale: bool = False,
    nscale: bool = False,
    scale_floats: float | int | None = None,
    automask: bool = False,
    runner: Runner | None = None,
) -> V3dedge3Outputs:
    """
    3dedge3 by AFNI Team.
    
    Does 3D Edge detection using the library 3DEdge.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dedge3.html
    
    Args:
        input_file: Input dataset.
        verbose: Print out some information along the way.
        prefix: Sets the prefix of the output dataset.
        datum: Sets the datum of the output dataset.
        fscale: Force scaling of the output to the maximum integer range.
        gscale: Same as '-fscale', but also forces each output sub-brick to get\
            the same scaling factor.
        nscale: Don't do any scaling on output to byte or short datasets.
        scale_floats: Multiply input by VAL, but only if the input datum is\
            float.
        automask: For automatic internal calculation of a mask in the usual\
            AFNI way.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dedge3Outputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3DEDGE3_METADATA)
    cargs = []
    cargs.append("3dedge3")
    cargs.extend(["-input", execution.input_file(input_file)])
    cargs.append("[VERBOSE_FLAG]")
    if prefix is not None:
        cargs.extend(["-prefix", prefix])
    if datum is not None:
        cargs.extend(["-datum", datum])
    cargs.append("[FSCALE_FLAG]")
    cargs.append("[GSCALE_FLAG]")
    cargs.append("[NSCALE_FLAG]")
    if scale_floats is not None:
        cargs.extend(["-scale_floats", str(scale_floats)])
    cargs.append("[AUTOMASK_FLAG]")
    ret = V3dedge3Outputs(
        root=execution.output_file("."),
        output_file=execution.output_file(f"{prefix}.nii.gz") if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dedge3Outputs",
    "V_3DEDGE3_METADATA",
    "v_3dedge3",
]
