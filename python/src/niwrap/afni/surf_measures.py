# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

SURF_MEASURES_METADATA = Metadata(
    id="7027bb31979f083709bb184581c8da1da4411653",
    name="SurfMeasures",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="docker-registry.image/surfs:latest",
)


class SurfMeasuresOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surf_measures(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_1_d: OutputPathType | None
    """Output in 1D format"""
    output_dset: OutputPathType
    """Output in specified dataset format"""


def surf_measures(
    spec_file: InputPathType,
    surf_a: str,
    out_dset: str,
    surf_b: str | None = None,
    out_1_d: str | None = None,
    func: list[str] | None = None,
    surf_volume: InputPathType | None = None,
    cmask: str | None = None,
    debug: int | None = None,
    dnode: float | int | None = None,
    nodes_1_d: InputPathType | None = None,
    info_all: bool = False,
    info_area: bool = False,
    info_norms: bool = False,
    info_thick: bool = False,
    info_vol: bool = False,
    info_volg: bool = False,
    ver: bool = False,
    runner: Runner | None = None,
) -> SurfMeasuresOutputs:
    """
    SurfMeasures by R. Reynolds.
    
    Compute measures from surface dataset(s).
    
    Args:
        spec_file: SUMA spec file containing a list of related surfaces.
        surf_a: Surface name (in spec file) for the first surface.
        out_dset: Output filename with dataset format.
        surf_b: Surface name (in spec file) for the second surface.
        out_1_d: Output filename in 1D format.
        func: Measure function to be applied.
        surf_volume: AFNI volume dataset associated with the surface.
        cmask: Restrict nodes with a mask.
        debug: Display extra run-time information with specified debug level\
            (0-5).
        dnode: Display extra information for specified node.
        nodes_1_d: Restrict output to specific nodes listed in a file.
        info_all: Display all final info.
        info_area: Display total area of each triangulated surface.
        info_norms: Display info about the normals.
        info_thick: Display minimum and maximum thickness between surfaces.
        info_vol: Display total computed volume between surfaces.
        info_volg: Display total computed volume estimated via Gauss' theorem.
        ver: Show program version and compile date.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfMeasuresOutputs`).
    """
    runner = runner or get_global_runner()
    if debug is not None and not (0 <= debug <= 5): 
        raise ValueError(f"'debug' must be between 0 <= x <= 5 but was {debug}")
    execution = runner.start_execution(SURF_MEASURES_METADATA)
    cargs = []
    cargs.append("SurfMeasures")
    cargs.append("[OPTIONS]")
    cargs.append("-spec")
    cargs.append("SPEC_FILE")
    cargs.append("-out")
    cargs.append("OUTFILE")
    ret = SurfMeasuresOutputs(
        root=execution.output_file("."),
        output_1_d=execution.output_file(f"{out_1_d}.1D", optional=True) if out_1_d is not None else None,
        output_dset=execution.output_file(f"{out_dset}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SURF_MEASURES_METADATA",
    "SurfMeasuresOutputs",
    "surf_measures",
]
