# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_DTEIG_METADATA = Metadata(
    id="147b76fcc0786f0fd6a8ae9e9981ccccb8a722ce",
    name="3dDTeig",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni_latest:23.1.10",
)


class V3dDteigOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_dteig(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dataset: OutputPathType | None
    """Output dataset with computed eigenvalues, eigenvectors, FA, and MD"""
    output_lambda: OutputPathType | None
    """Output dataset for eigenvalues"""
    output_eigvec: OutputPathType | None
    """Output dataset for eigenvectors"""
    output_fa: OutputPathType | None
    """Output dataset for fractional anisotropy"""
    output_md: OutputPathType | None
    """Output dataset for mean diffusivity"""


def v_3d_dteig(
    input_dataset: str,
    prefix: str | None = None,
    datum: typing.Literal["byte", "short", "float"] | None = None,
    sep_dsets: bool = False,
    uddata: bool = False,
    runner: Runner | None = None,
) -> V3dDteigOutputs:
    """
    3dDTeig by AFNI Developers.
    
    Computes eigenvalues and eigenvectors for an input dataset of tensors.
    
    More information: https://afni.nimh.nih.gov/
    
    Args:
        input_dataset: Input dataset of Dxx, Dxy, Dyy, Dxz, Dyz, Dzz sub-bricks.
        prefix: Use the given prefix for the output dataset.
        datum: Coerce the output data to be stored as the given type (byte,\
            short, or float).
        sep_dsets: Save eigenvalues, vectors, FA, and MD in separate datasets.
        uddata: Tensor data is stored as upper diagonal instead of lower\
            diagonal.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dDteigOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_DTEIG_METADATA)
    cargs = []
    cargs.append("3dDTeig")
    cargs.append("[OPTIONS]")
    cargs.append(input_dataset)
    ret = V3dDteigOutputs(
        root=execution.output_file("."),
        output_dataset=execution.output_file(f"{prefix}.nii.gz") if prefix is not None else None,
        output_lambda=execution.output_file(f"{prefix}_lambda.nii.gz", optional=True) if prefix is not None else None,
        output_eigvec=execution.output_file(f"{prefix}_eigvec.nii.gz", optional=True) if prefix is not None else None,
        output_fa=execution.output_file(f"{prefix}_FA.nii.gz", optional=True) if prefix is not None else None,
        output_md=execution.output_file(f"{prefix}_MD.nii.gz", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dDteigOutputs",
    "V_3D_DTEIG_METADATA",
    "v_3d_dteig",
]
