# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_NLFIM_METADATA = Metadata(
    id="3fe29140fbfa9087a97f35534db01060957dbd9a",
    name="3dNLfim",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dNlfimOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_nlfim(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    freg_outfile: OutputPathType | None
    """F-test for significance of the regression"""
    frsqr_outfile: OutputPathType | None
    """R^2 calculation for regression"""
    fsmax_outfile: OutputPathType | None
    """Signed maximum signal estimate"""
    ftmax_outfile: OutputPathType | None
    """Time of signed maximum estimate"""
    fpsmax_outfile: OutputPathType | None
    """Maximum percentage change estimate"""
    farea_outfile: OutputPathType | None
    """Area between signal and baseline"""
    fparea_outfile: OutputPathType | None
    """Percentage area of signal estimate"""
    fscoef_outfile: OutputPathType | None
    """Signal parameter estimate"""
    fncoef_outfile: OutputPathType | None
    """Noise parameter estimate"""
    tscoef_outfile: OutputPathType | None
    """T-test for significance of signal parameter"""
    tncoef_outfile: OutputPathType | None
    """T-test for significance of noise parameter"""
    bucket_outfile: OutputPathType | None
    """AFNI 'bucket' dataset"""
    sfit_outfile: OutputPathType | None
    """Output 3d+time signal model fit"""
    snfit_outfile: OutputPathType | None
    """Output 3d+time signal+noise fit"""


def v_3d_nlfim(
    input_file: InputPathType,
    signal_model: str,
    noise_model: str,
    mask: InputPathType | None = None,
    ignore: int | None = None,
    intr: int | None = None,
    tr: int | None = None,
    time_file: InputPathType | None = None,
    sconstr: str | None = None,
    nconstr: str | None = None,
    nabs: bool = False,
    nrand: int | None = None,
    nbest: int | None = None,
    rmsmin: float | int | None = None,
    fdisp: float | int | None = None,
    progress: int | None = None,
    voxel_count: bool = False,
    simplex: bool = False,
    powell: bool = False,
    both: bool = False,
    freg: str | None = None,
    frsqr: str | None = None,
    fsmax: str | None = None,
    ftmax: str | None = None,
    fpsmax: str | None = None,
    farea: str | None = None,
    fparea: str | None = None,
    fscoef: str | None = None,
    fncoef: str | None = None,
    tscoef: str | None = None,
    tncoef: str | None = None,
    bucket: str | None = None,
    brick: str | None = None,
    nofdr: bool = False,
    sfit: str | None = None,
    snfit: str | None = None,
    jobs: int | None = None,
    runner: Runner | None = None,
) -> V3dNlfimOutputs:
    """
    3dNLfim by AFNI Team.
    
    Nonlinear regression for each voxel of the input AFNI 3d+time data set.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dNLfim.html
    
    Args:
        input_file: Filename of 3d+time data file for input.
        signal_model: Name of the nonlinear signal model.
        noise_model: Name of the linear noise model.
        mask: Use the 0 sub-brick of dataset 'mset' as a mask to indicate which\
            voxels to analyze.
        ignore: Skip this number of initial images in the time series for\
            regression analysis; default = 0.
        intr: Set the TR of the input 3d+time dataset.
        tr: Directly set the TR of the time series model.
        time_file: ASCII file containing each time point in the time series.
        sconstr: Constraints for signal parameters; c <= gs[k] <= d.
        nconstr: Constraints for noise parameters; c+b[k] <= gn[k] <= d+b[k].
        nabs: Use absolute constraints for noise parameters; c <= gn[k] <= d.
        nrand: Number of random test points; default=19999.
        nbest: Use b best test points to start; default=9.
        rmsmin: Minimum RMS error to reject reduced model.
        fdisp: Display results for those voxels whose F-statistic is greater\
            than fval; default=999.0.
        progress: Display results every ival number of voxels.
        voxel_count: Display the current voxel index.
        simplex: Use Nelder-Mead simplex method for least-square minimization\
            (default).
        powell: Use Powell's NEWUOA method instead of Nelder-Mead simplex\
            method.
        both: Use both Powell's and Nelder-Mead method.
        freg: Perform F-test for significance of the regression; output 'fift'\
            is written to prefix filename fname.
        frsqr: Calculate R^2 (coef. of multiple determination); store along\
            with F-test for regression; output 'fift' is written to prefix filename\
            fname.
        fsmax: Estimate signed maximum of signal; store along with F-test for\
            regression; output 'fift' is written to prefix filename fname.
        ftmax: Estimate time of signed maximum; store along with F-test for\
            regression; output 'fift' is written to prefix filename fname.
        fpsmax: Calculate (signed) maximum percentage change of signal from\
            baseline; output 'fift' is written to prefix filename fname.
        farea: Calculate area between signal and baseline; store with F-test\
            for regression; output 'fift' is written to prefix filename fname.
        fparea: Percentage area of signal relative to baseline; store with\
            F-test for regression; output 'fift' is written to prefix filename\
            fname.
        fscoef: Estimate kth signal parameter gs[k]; store along with F-test\
            for regression; output 'fift' is written to prefix filename fname.
        fncoef: Estimate kth noise parameter gn[k]; store along with F-test for\
            regression; output 'fift' is written to prefix filename fname.
        tscoef: Perform t-test for significance of kth signal parameter gs[k];\
            output 'fitt' is written to prefix filename fname.
        tncoef: Perform t-test for significance of kth noise parameter gn[k];\
            output 'fitt' is written to prefix filename fname.
        bucket: Create one AFNI 'bucket' dataset containing n sub-bricks; n=0\
            creates default output; output 'bucket' is written to prefixname.
        brick: Specify sub-brick contents for 'bucket' dataset.
        nofdr: Don't write the FDR (q vs. threshold) curves into the output\
            dataset.
        sfit: Prefix for output 3d+time signal model fit.
        snfit: Prefix for output 3d+time signal+noise fit.
        jobs: Run the program with 'J' jobs (sub-processes). 1 to 32.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dNlfimOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_NLFIM_METADATA)
    cargs = []
    cargs.append("3dNLfim")
    cargs.append("-input")
    cargs.append(execution.input_file(input_file))
    cargs.append("-signal")
    cargs.append(signal_model)
    cargs.append("-noise")
    cargs.append(noise_model)
    cargs.append("[ADDITIONAL_OPTIONS]")
    ret = V3dNlfimOutputs(
        root=execution.output_file("."),
        freg_outfile=execution.output_file(f"{freg}.fift", optional=True) if freg is not None else None,
        frsqr_outfile=execution.output_file(f"{frsqr}.fift", optional=True) if frsqr is not None else None,
        fsmax_outfile=execution.output_file(f"{fsmax}.fift", optional=True) if fsmax is not None else None,
        ftmax_outfile=execution.output_file(f"{ftmax}.fift", optional=True) if ftmax is not None else None,
        fpsmax_outfile=execution.output_file(f"{fpsmax}.fift", optional=True) if fpsmax is not None else None,
        farea_outfile=execution.output_file(f"{farea}.fift", optional=True) if farea is not None else None,
        fparea_outfile=execution.output_file(f"{fparea}.fift", optional=True) if fparea is not None else None,
        fscoef_outfile=execution.output_file(f"{fscoef}.fift", optional=True) if fscoef is not None else None,
        fncoef_outfile=execution.output_file(f"{fncoef}.fift", optional=True) if fncoef is not None else None,
        tscoef_outfile=execution.output_file(f"{tscoef}.fitt", optional=True) if tscoef is not None else None,
        tncoef_outfile=execution.output_file(f"{tncoef}.fitt", optional=True) if tncoef is not None else None,
        bucket_outfile=execution.output_file(f"{bucket}.bucket", optional=True) if bucket is not None else None,
        sfit_outfile=execution.output_file(f"{sfit}.sfit", optional=True) if sfit is not None else None,
        snfit_outfile=execution.output_file(f"{snfit}.snfit", optional=True) if snfit is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dNlfimOutputs",
    "V_3D_NLFIM_METADATA",
    "v_3d_nlfim",
]
