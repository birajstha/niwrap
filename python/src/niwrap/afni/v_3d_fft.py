# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_FFT_METADATA = Metadata(
    id="0e755bc53e13a5a7734c22467a080ffc9f656806",
    name="3dFFT",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni:latest",
)


class V3dFftOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_fft(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dataset: OutputPathType | None
    """Output dataset generated by 3dFFT."""


def v_3d_fft(
    dataset: InputPathType,
    abs_: bool = False,
    phase: bool = False,
    complex_: bool = False,
    inverse: bool = False,
    lx: float | int | None = None,
    ly: float | int | None = None,
    lz: float | int | None = None,
    alt_in: bool = False,
    alt_out: bool = False,
    input_: InputPathType | None = None,
    prefix: str | None = None,
    runner: Runner | None = None,
) -> V3dFftOutputs:
    """
    3dFFT by AFNI Team.
    
    Performs the FFT of the input dataset in 3 directions (x, y, z) and produces
    the output dataset.
    
    More information: https://afni.nimh.nih.gov
    
    Args:
        dataset: Input dataset (e.g., dataset.nii).
        abs_: Outputs the magnitude of the FFT (default).
        phase: Outputs the phase of the FFT (-PI..PI).
        complex_: Outputs the complex-valued FFT.
        inverse: Does the inverse FFT instead of the forward FFT.
        lx: Use FFT of length 'xx' in the x-direction.
        ly: Use FFT of length 'yy' in the y-direction.
        lz: Use FFT of length 'zz' in the z-direction.
        alt_in: Alternate signs of input data before FFT to bring zero\
            frequency from edge of FFT-space to center of grid for cosmetic\
            purposes.
        alt_out: Alternate signs of output data after FFT. Use '-altOUT' with\
            '-altIN' on the forward transform to get the signs of the recovered\
            image correct.
        input_: Read the input dataset from specified file instead of from the\
            last argument on the command line.
        prefix: Use specified prefix for the output dataset.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dFftOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_FFT_METADATA)
    cargs = []
    cargs.append("3dFFT")
    cargs.append("[--abs]")
    cargs.append("[--phase]")
    cargs.append("[--complex]")
    cargs.append("[--inverse]")
    cargs.append("[--Lx")
    cargs.append("X_LENGTH]")
    cargs.append("[--Ly")
    cargs.append("Y_LENGTH]")
    cargs.append("[--Lz")
    cargs.append("Z_LENGTH]")
    cargs.append("[--altIN]")
    cargs.append("[--altOUT]")
    cargs.append("[--input")
    cargs.append("INPUT_FILE]")
    cargs.append("[--prefix")
    cargs.append("PREFIX]")
    cargs.append(execution.input_file(dataset))
    ret = V3dFftOutputs(
        root=execution.output_file("."),
        output_dataset=execution.output_file(f"{prefix}.nii.gz") if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dFftOutputs",
    "V_3D_FFT_METADATA",
    "v_3d_fft",
]
