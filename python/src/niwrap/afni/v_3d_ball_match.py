# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_BALL_MATCH_METADATA = Metadata(
    id="3557523a60884c94ea8e3984c704dafd15f4a19c",
    name="3dBallMatch",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="example/3dballmatch:latest",
)


class V3dBallMatchOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_ball_match(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_stdout: OutputPathType
    """Output containing matching coordinates and related data"""


def v_3d_ball_match(
    input_dataset: InputPathType,
    radius: float | int | None = None,
    dataset_option: str | None = None,
    ball_radius: float | int | None = None,
    spheroid_axes: list[float | int] | None = None,
    runner: Runner | None = None,
) -> V3dBallMatchOutputs:
    """
    3dBallMatch by RWCox.
    
    A tool to find a good match between a ball (filled sphere) of the given
    radius and a dataset to determine a crude approximate center of the brain
    quickly.
    
    More information: https://example.com/3dBallMatch
    
    Args:
        input_dataset: Input dataset (e.g., Fred.nii).
        radius: Radius of the 3D ball to match (in mm).
        dataset_option: Specifies the input dataset.
        ball_radius: Set the radius of the 3D ball to match (mm).
        spheroid_axes: Match with a spheroid of revolution, with principal axis\
            radius 'a' and secondary axes radii 'b'.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dBallMatchOutputs`).
    """
    runner = runner or get_global_runner()
    if spheroid_axes is not None and (len(spheroid_axes) != 2): 
        raise ValueError(f"Length of 'spheroid_axes' must be 2 but was {len(spheroid_axes)}")
    execution = runner.start_execution(V_3D_BALL_MATCH_METADATA)
    cargs = []
    cargs.append("3dBallMatch")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(input_dataset))
    if radius is not None:
        cargs.append(str(radius))
    ret = V3dBallMatchOutputs(
        root=execution.output_file("."),
        output_stdout=execution.output_file(f"stdout"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dBallMatchOutputs",
    "V_3D_BALL_MATCH_METADATA",
    "v_3d_ball_match",
]
