# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

PLUGOUT_DRIVE_METADATA = Metadata(
    id="221cc59ab796d9f61b7bb69841ce40fa2ee8463d",
    name="plugout_drive",
)


class PlugoutDriveOutputs(typing.NamedTuple):
    """
    Output object returned when calling `plugout_drive(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def plugout_drive(
    host: str | None = None,
    shm: bool = False,
    verbose: bool = False,
    port: float | int | None = None,
    maxwait: float | int | None = None,
    name: str | None = None,
    command: list[str] | None = None,
    quit_: bool = False,
    np: float | int | None = None,
    npq: float | int | None = None,
    npb: float | int | None = None,
    max_port_bloc: bool = False,
    max_port_bloc_quiet: bool = False,
    num_assigned_ports: bool = False,
    num_assigned_ports_quiet: bool = False,
    runner: Runner | None = None,
) -> PlugoutDriveOutputs:
    """
    plugout_drive by AFNI Development Team.
    
    This program connects to AFNI and sends commands that the user specifies
    interactively or on command line over to AFNI to be executed.
    
    Args:
        host: Connect to AFNI running on the specified host using TCP/IP.\
            Default is 'localhost'.
        shm: Connect to the current host using shared memory for large data\
            transfers.
        verbose: Verbose mode.
        port: Use TCP/IP port number. Default is 8099.
        maxwait: Maximum wait time in seconds for AFNI to connect. Default is 9\
            seconds.
        name: Name that AFNI assigns to this plugout. Default is a pre-defined\
            name.
        command: Command to be executed on AFNI. Example: '-com "SET_FUNCTION\
            SomeFunction"'.
        quit_: Quit after executing all -com commands. Default is to wait for\
            more commands.
        np: Provide a port offset to allow multiple instances of AFNI <-->\
            SUMA, etc., on the same machine.
        npq: Like -np but quieter in the face of adversity.
        npb: Similar to -np, but using a block for easier usage.
        max_port_bloc: Print the current value of MAX_BLOC and exit.
        max_port_bloc_quiet: Print MAX_BLOC value and exit quietly.
        num_assigned_ports: Print the number of assigned ports used by AFNI and\
            exit.
        num_assigned_ports_quiet: Print the number of assigned ports used by\
            AFNI and exit quietly.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PlugoutDriveOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(PLUGOUT_DRIVE_METADATA)
    cargs = []
    cargs.append("plugout_drive")
    if host is not None:
        cargs.extend(["-host", host])
    if verbose:
        cargs.append("-v")
    if port is not None:
        cargs.extend(["-port", str(port)])
    if maxwait is not None:
        cargs.extend(["-maxwait", str(maxwait)])
    if name is not None:
        cargs.extend(["-name", name])
    if command is not None:
        cargs.extend(["-com", *command])
    if quit_:
        cargs.append("-quit")
    ret = PlugoutDriveOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "PLUGOUT_DRIVE_METADATA",
    "PlugoutDriveOutputs",
    "plugout_drive",
]
