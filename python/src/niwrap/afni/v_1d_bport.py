# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_1D_BPORT_METADATA = Metadata(
    id="901e49cbd6e07fa5bd6f65eedd339082f09ebc12",
    name="1dBport",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni:latest",
)


class V1dBportOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_1d_bport(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    stdout: OutputPathType
    """Standard output file written by the tool"""


def v_1d_bport(
    band: list[float | int],
    invert: bool = False,
    nozero: bool = False,
    noconst: bool = False,
    quad: bool = False,
    input_dataset: InputPathType | None = None,
    input_1d_file: InputPathType | None = None,
    nodata: list[float | int] | None = None,
    tr: float | int | None = None,
    concat: InputPathType | None = None,
    runner: Runner | None = None,
) -> V1dBportOutputs:
    """
    1dBport by RWCox.
    
    Creates a set of columns of sines and cosines for bandpassing via
    regression.
    
    Args:
        band: Specify lowest and highest frequencies in the passband.
        invert: Invert the selection after computing which frequency indexes\
            correspond to the input band(s).
        nozero: Do NOT generate the 0 frequency (constant) component when fbot\
            = 0.
        noconst: Same as -nozero. Do NOT generate the 0 frequency (constant)\
            component when fbot = 0.
        quad: Add regressors for linear and quadratic trends.
        input_dataset: Specify the dataset input.
        input_1d_file: Specify the 1D input file.
        nodata: Specify the number of time points and optionally TR value for\
            the simulation.
        tr: Set the time step duration.
        concat: Specify the list of start indexes for concatenated runs.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V1dBportOutputs`).
    """
    runner = runner or get_global_runner()
    if (len(band) != 2): 
        raise ValueError(f"Length of 'band' must be 2 but was {len(band)}")
    if nodata is not None and not (1 <= len(nodata) <= 2): 
        raise ValueError(f"Length of 'nodata' must be between 1 and 2 but was {len(nodata)}")
    execution = runner.start_execution(V_1D_BPORT_METADATA)
    cargs = []
    cargs.append("1dBport")
    cargs.extend(["-band", *map(str, band)])
    if invert:
        cargs.append("-invert")
    if noconst:
        cargs.append("-noconst")
    if quad:
        cargs.append("-quad")
    if input_dataset is not None:
        cargs.extend(["-input", execution.input_file(input_dataset)])
    if input_1d_file is not None:
        cargs.extend(["-input1D", execution.input_file(input_1d_file)])
    if nodata is not None:
        cargs.extend(["-nodata", *map(str, nodata)])
    if tr is not None:
        cargs.extend(["-TR", str(tr)])
    if concat is not None:
        cargs.extend(["-concat", execution.input_file(concat)])
    ret = V1dBportOutputs(
        root=execution.output_file("."),
        stdout=execution.output_file(f"stdout"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V1dBportOutputs",
    "V_1D_BPORT_METADATA",
    "v_1d_bport",
]
