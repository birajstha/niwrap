# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_MEASURE_IN2OUT_METADATA = Metadata(
    id="ed2c9684d7e9c13f6316d050f1f2cc31fd9bf230",
    name="@measure_in2out",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class MeasureIn2outOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_measure_in2out(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    inout_dist: OutputPathType
    """Volumetric thickness/distance from in to out"""
    in_and_out: OutputPathType
    """Volumetric distance to inside and outside in 2 volumes"""
    inout_thick: OutputPathType
    """Unsmoothed thickness mapped to surface nodes"""
    inout_thick_smooth: OutputPathType
    """Smoothed thickness mapped to surface nodes"""
    maskset_output: OutputPathType
    """Mask file"""
    maskset_rs: OutputPathType
    """Resampled mask file"""
    anat_gii: OutputPathType
    """Surface representation of mask volume"""
    quick_spec: OutputPathType
    """Simple specification file for surface to use with suma commands"""


def _measure_in2out(
    maskset: InputPathType,
    surfset: InputPathType,
    outdir: str,
    resample: str | None = None,
    increment: float | int | None = None,
    surfsmooth: float | int | None = None,
    maxthick: float | int | None = None,
    depthsearch: float | int | None = None,
    maskinoutvals: list[float | int] | None = None,
    keep_temp_files: bool = False,
    surfsmooth_method: str | None = None,
    fs_cort_dir: str | None = None,
    runner: Runner | None = None,
) -> MeasureIn2outOutputs:
    """
    @measure_in2out by AFNI Team.
    
    Compute thickness of mask using in2out method.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/@measure_in2out.html
    
    Args:
        maskset: Mask dataset for input.
        surfset: Surface dataset onto which to map thickness (probably a\
            pial/gray matter surface).
        outdir: Output directory. If not specified, in2out_thickdir is used.
        resample: Resample input to mm in millimeters (put a number here). Set\
            this to half a voxel or "auto". No resampling is done by default.\
            Resampling is highly recommended for most 1mm data.
        increment: Test thickness at increments of sub-voxel distance. Default\
            is 1/4 voxel minimum distance (in-plane).
        surfsmooth: Smooth surface map of thickness by mm millimeters. Default\
            is 6 mm.
        maxthick: Search for maximum thickness value of mm millimeters. Default\
            is 6 mm.
        depthsearch: Map to surface by looking for max along mm millimeter\
            normal vectors. Default is 3 mm.
        maskinoutvals: Use v1 for value of mask, v2 and v3 for inside and\
            outside mask values (e.g., '1 -2 -1').
        keep_temp_files: Do not delete the intermediate files (for testing).
        surfsmooth_method: Heat method used for smoothing surfaces. Default is\
            HEAT_07 but HEAT_05 is also useful for some models.
        fs_cort_dir: Use FreeSurfer SUMA directory from @SUMA_Make_Spec_FS for\
            processing.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MeasureIn2outOutputs`).
    """
    runner = runner or get_global_runner()
    if maskinoutvals is not None and not (len(maskinoutvals) <= 3): 
        raise ValueError(f"Length of 'maskinoutvals' must be less than 3 but was {len(maskinoutvals)}")
    execution = runner.start_execution(_MEASURE_IN2OUT_METADATA)
    cargs = []
    cargs.append("@measure_in2out")
    cargs.append("-maskset")
    cargs.append(execution.input_file(maskset))
    cargs.append("-surfset")
    cargs.append(execution.input_file(surfset))
    cargs.append("-outdir")
    cargs.append(outdir)
    if resample is not None:
        cargs.extend(["-resample", resample])
    if increment is not None:
        cargs.extend(["-increment", str(increment)])
    if surfsmooth is not None:
        cargs.extend(["-surfsmooth", str(surfsmooth)])
    if maxthick is not None:
        cargs.extend(["-maxthick", str(maxthick)])
    if depthsearch is not None:
        cargs.extend(["-depthsearch", str(depthsearch)])
    if maskinoutvals is not None:
        cargs.extend(["-maskinoutvals", *map(str, maskinoutvals)])
    if keep_temp_files:
        cargs.append("-keep_temp_files")
    if surfsmooth_method is not None:
        cargs.extend(["-surfsmooth_method", surfsmooth_method])
    if fs_cort_dir is not None:
        cargs.extend(["-fs_cort_dir", fs_cort_dir])
    ret = MeasureIn2outOutputs(
        root=execution.output_file("."),
        inout_dist=execution.output_file(f"inout_dist.nii.gz"),
        in_and_out=execution.output_file(f"in_and_out.nii.gz"),
        inout_thick=execution.output_file(f"inout_thick.niml.dset"),
        inout_thick_smooth=execution.output_file(f"inout_thick_smooth.niml.dset"),
        maskset_output=execution.output_file(f"maskset.nii.gz"),
        maskset_rs=execution.output_file(f"maskset_rs.nii.gz"),
        anat_gii=execution.output_file(f"anat.gii"),
        quick_spec=execution.output_file(f"quick.spec"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "MeasureIn2outOutputs",
    "_MEASURE_IN2OUT_METADATA",
    "_measure_in2out",
]
