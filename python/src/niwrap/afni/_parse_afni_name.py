# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_PARSE_AFNI_NAME_METADATA = Metadata(
    id="02098a914dc0b8a7bd33a33958804cc790e11c4f",
    name="@parse_afni_name",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class ParseAfniNameOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_parse_afni_name(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_path: OutputPathType
    """Output path parsed from the AFNI name"""
    output_prefix: OutputPathType
    """Output prefix parsed from the AFNI name"""
    output_view: OutputPathType
    """Output view parsed from the AFNI name"""
    output_subbrick: OutputPathType
    """Output sub-brick selection string parsed from the AFNI name"""


def _parse_afni_name(
    afni_name: str,
    runner: Runner | None = None,
) -> ParseAfniNameOutputs:
    """
    @parse_afni_name by AFNI Team.
    
    A script to parse an AFNI name, outputting the path, prefix, view, and
    sub-brick selection string.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/@parse_afni_name.html
    
    Args:
        afni_name: The AFNI name to be parsed.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ParseAfniNameOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(_PARSE_AFNI_NAME_METADATA)
    cargs = []
    cargs.append("@parse_afni_name")
    cargs.append(afni_name)
    ret = ParseAfniNameOutputs(
        root=execution.output_file("."),
        output_path=execution.output_file(f"parsed_name_path.txt", optional=True),
        output_prefix=execution.output_file(f"parsed_name_prefix.txt", optional=True),
        output_view=execution.output_file(f"parsed_name_view.txt", optional=True),
        output_subbrick=execution.output_file(f"parsed_name_subbrick.txt", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "ParseAfniNameOutputs",
    "_PARSE_AFNI_NAME_METADATA",
    "_parse_afni_name",
]
