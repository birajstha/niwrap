# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_DJUNCT_EDGY_ALIGN_CHECK_METADATA = Metadata(
    id="7e080747e2b4c5a6e5f96126419d0e5e8ee55117",
    name="@djunct_edgy_align_check",
)


class DjunctEdgyAlignCheckOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_djunct_edgy_align_check(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def _djunct_edgy_align_check(
    ulay: str,
    olay: str,
    prefix: str,
    set_dicom_xyz: list[float | int] | None = None,
    box_focus_slices: str | None = None,
    montgap: float | int | None = None,
    montcolor: str | None = None,
    cbar: str | None = None,
    save_ftype: str | None = None,
    umin_fac: float | int | None = None,
    montx: float | int | None = None,
    monty: float | int | None = None,
    use_olay_grid: str | None = None,
    label_mode: str | None = None,
    ulay_range: list[float | int] | None = None,
    ulay_range_nz: list[float | int] | None = None,
    ulay_range_am: list[float | int] | None = None,
    help_flag: bool = False,
    ver_flag: bool = False,
    echo_flag: bool = False,
    sharpen_ulay_off_flag: bool = False,
    mask_olay_edges_flag: bool = False,
    no_cor_flag: bool = False,
    no_sag_flag: bool = False,
    no_axi_flag: bool = False,
    no_clean_flag: bool = False,
    runner: Runner | None = None,
) -> DjunctEdgyAlignCheckOutputs:
    """
    @djunct_edgy_align_check.
    
    Helper script for various tasks, heavily modeled on RW Cox's
    '@snapshot_volreg' script.
    
    Args:
        ulay: ULAY dataset.
        olay: OLAY dataset.
        prefix: Prefix for output files.
        set_dicom_xyz: DICOM coordinates {XX YY ZZ}.
        box_focus_slices: Dataset to focus slices.
        montgap: Gap between slices in montage.
        montcolor: Color for montage.
        cbar: Color bar for overlay.
        save_ftype: File type to save.
        umin_fac: Scaling factor for underlay minimum.
        montx: Number of slices in X-direction for montage.
        monty: Number of slices in Y-direction for montage.
        use_olay_grid: Grid interpolation method for overlay.
        label_mode: Mode for labeling.
        ulay_range: Range for underlay {umin umax}.
        ulay_range_nz: Range for non-zero underlay {umin umax}.
        ulay_range_am: Range for auto-mask underlay {umin umax}.
        help_flag: Display help message.
        ver_flag: Show version.
        echo_flag: Echo commands.
        sharpen_ulay_off_flag: Disable underlay sharpening.
        mask_olay_edges_flag: Mask overlay edges.
        no_cor_flag: Exclude coronal plane.
        no_sag_flag: Exclude sagittal plane.
        no_axi_flag: Exclude axial plane.
        no_clean_flag: Disable cleaning temporary files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DjunctEdgyAlignCheckOutputs`).
    """
    runner = runner or get_global_runner()
    if set_dicom_xyz is not None and (len(set_dicom_xyz) != 3): 
        raise ValueError(f"Length of 'set_dicom_xyz' must be 3 but was {len(set_dicom_xyz)}")
    if ulay_range is not None and (len(ulay_range) != 2): 
        raise ValueError(f"Length of 'ulay_range' must be 2 but was {len(ulay_range)}")
    if ulay_range_nz is not None and (len(ulay_range_nz) != 2): 
        raise ValueError(f"Length of 'ulay_range_nz' must be 2 but was {len(ulay_range_nz)}")
    if ulay_range_am is not None and (len(ulay_range_am) != 2): 
        raise ValueError(f"Length of 'ulay_range_am' must be 2 but was {len(ulay_range_am)}")
    execution = runner.start_execution(_DJUNCT_EDGY_ALIGN_CHECK_METADATA)
    cargs = []
    cargs.append("@djunct_edgy_align_check")
    cargs.append(ulay)
    cargs.append(olay)
    cargs.append(prefix)
    if set_dicom_xyz is not None:
        cargs.extend(map(str, set_dicom_xyz))
    if box_focus_slices is not None:
        cargs.append(box_focus_slices)
    if montgap is not None:
        cargs.append(str(montgap))
    if montcolor is not None:
        cargs.append(montcolor)
    if cbar is not None:
        cargs.append(cbar)
    if save_ftype is not None:
        cargs.append(save_ftype)
    if umin_fac is not None:
        cargs.append(str(umin_fac))
    if montx is not None:
        cargs.append(str(montx))
    if monty is not None:
        cargs.append(str(monty))
    if use_olay_grid is not None:
        cargs.append(use_olay_grid)
    if label_mode is not None:
        cargs.append(label_mode)
    cargs.append("[help_flag]")
    cargs.append("[ver_flag]")
    cargs.append("[echo_flag]")
    cargs.append("[sharpen_ulay_off_flag]")
    cargs.append("[mask_olay_edges_flag]")
    cargs.append("[no_cor_flag]")
    cargs.append("[no_sag_flag]")
    cargs.append("[no_axi_flag]")
    cargs.append("[no_clean_flag]")
    if ulay_range is not None:
        cargs.extend(map(str, ulay_range))
    if ulay_range_nz is not None:
        cargs.extend(map(str, ulay_range_nz))
    if ulay_range_am is not None:
        cargs.extend(map(str, ulay_range_am))
    ret = DjunctEdgyAlignCheckOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "DjunctEdgyAlignCheckOutputs",
    "_DJUNCT_EDGY_ALIGN_CHECK_METADATA",
    "_djunct_edgy_align_check",
]
