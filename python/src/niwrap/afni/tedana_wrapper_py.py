# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

TEDANA_WRAPPER_METADATA = Metadata(
    id="aa27fb0fbe80bc26ea7e73f0072d3b5c409ddd7c",
    name="tedana_wrapper",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/tedana:latest",
)


class TedanaWrapperOutputs(typing.NamedTuple):
    """
    Output object returned when calling `tedana_wrapper(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    tedana_output: OutputPathType | None
    """Output directory for tedana results."""
    tedana_report: OutputPathType | None
    """Tedana report file."""


def tedana_wrapper(
    input_files: list[InputPathType],
    echo_times: list[float | int],
    mask: InputPathType,
    results_dir: str | None = None,
    prefix: str | None = None,
    save_all: bool = False,
    prep_only: bool = False,
    tedana_prog: str | None = None,
    tedana_is_exec: bool = False,
    ted_label: str | None = None,
    tedana_opts: str | None = None,
    help_: bool = False,
    detailed_help: bool = False,
    runner: Runner | None = None,
) -> TedanaWrapperOutputs:
    """
    tedana_wrapper by Justin Rajendra.
    
    Internal wrapper to run tedana.py, typically used within afni_proc.py.
    
    Args:
        input_files: 4D dataset for each echo.
        echo_times: Echo time (ms) for each echo.
        mask: Mask in same space/grid as the input datasets.
        results_dir: Folder to be created for all outputs. Default\
            [./Bunnymen].
        prefix: Prefix for dataset names. Default [Bunnymen].
        save_all: Save intermediate datasets. Default is to save only the\
            3dZcat stacked dataset (and tedana stuff).
        prep_only: Do not run tedana.py, stop at 3dZcat.
        tedana_prog: Path and name of the version of tedana.py that will be\
            run. Default is meica.libs/tedana.py in the afni binaries directory.
        tedana_is_exec: Run 'tedana.py' rather than 'python tedana.py'.
        ted_label: Suffix for output folder. Adds suffix like TED.LABEL (NOT A\
            PATH).
        tedana_opts: Additional options to pass to tedana.py. (In quotes)\
            Example: '--initcost=tanh --conv=2.5e-5'.
        help_: Show help message and exit.
        detailed_help: Show detailed help and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TedanaWrapperOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TEDANA_WRAPPER_METADATA)
    cargs = []
    cargs.append("/opt/afni/src/../install/tedana_wrapper.py")
    cargs.extend(["-input", *[execution.input_file(f) for f in input_files]])
    cargs.extend(["-TE", *map(str, echo_times)])
    cargs.extend(["-mask", execution.input_file(mask)])
    if results_dir is not None:
        cargs.extend(["-results_dir", results_dir])
    if prefix is not None:
        cargs.extend(["-prefix", prefix])
    if save_all:
        cargs.append("-save_all")
    if prep_only:
        cargs.append("-prep_only")
    if tedana_prog is not None:
        cargs.extend(["-tedana_prog", tedana_prog])
    if tedana_is_exec:
        cargs.append("-tedana_is_exec")
    if ted_label is not None:
        cargs.extend(["-ted_label", ted_label])
    if tedana_opts is not None:
        cargs.extend(["-tedana_opts", tedana_opts])
    ret = TedanaWrapperOutputs(
        root=execution.output_file("."),
        tedana_output=execution.output_file(f"{results_dir}/{prefix}_ted_output", optional=True) if results_dir is not None and prefix is not None else None,
        tedana_report=execution.output_file(f"{results_dir}/{prefix}_tedana_report.txt", optional=True) if results_dir is not None and prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "TEDANA_WRAPPER_METADATA",
    "TedanaWrapperOutputs",
    "tedana_wrapper",
]
