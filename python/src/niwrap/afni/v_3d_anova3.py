# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_ANOVA3_METADATA = Metadata(
    id="a5caef09918798b903d5940784f2c0366e5b2960",
    name="3dANOVA3",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dAnova3Outputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_anova3(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile_fa: OutputPathType | None
    """Output file for the main ANOVA result."""
    outfile_fb: OutputPathType | None
    """Output file for the main B ANOVA result."""
    outfile_fc: OutputPathType | None
    """Output file for the main C ANOVA result."""
    outfile_fab: OutputPathType | None
    """Output file for the interaction between A and B."""
    outfile_fac: OutputPathType | None
    """Output file for the interaction between A and C."""
    outfile_fbc: OutputPathType | None
    """Output file for the interaction between B and C."""
    outfile_fabc: OutputPathType | None
    """Output file for the interaction between A, B, and C."""
    outfile_amean: OutputPathType | None
    """Output file for the A mean results."""
    outfile_bmean: OutputPathType | None
    """Output file for the B mean results."""


def v_3d_anova3(
    type_: int,
    alevels: int,
    blevels: int,
    clevels: int,
    dsets: list[str],
    voxel_num: int | None = None,
    diskspace: bool = False,
    mask: InputPathType | None = None,
    outfile_fa: str | None = None,
    outfile_fb: str | None = None,
    outfile_fc: str | None = None,
    outfile_fab: str | None = None,
    outfile_fac: str | None = None,
    outfile_fbc: str | None = None,
    outfile_fabc: str | None = None,
    outfile_amean: str | None = None,
    outfile_bmean: str | None = None,
    outfile_cmean: str | None = None,
    outfile_xmean: str | None = None,
    outfile_adiff: str | None = None,
    outfile_bdiff: str | None = None,
    outfile_cdiff: str | None = None,
    outfile_xdiff: str | None = None,
    outfile_acontr: str | None = None,
    outfile_bcontr: str | None = None,
    outfile_ccontr: str | None = None,
    outfile_abcontr: str | None = None,
    outfile_abcontr_: str | None = None,
    outfile_abdiff: str | None = None,
    outfile_abdiff_: str | None = None,
    outfile_abmean: str | None = None,
    outfile_bucket: str | None = None,
    anova_options: list[str] | None = None,
    runner: Runner | None = None,
) -> V3dAnova3Outputs:
    """
    3dANOVA3 by AFNI Team.
    
    Performs three-factor ANOVA on 3D data sets.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dANOVA3.html
    
    Args:
        type_: Type of ANOVA model to be used. k = 1: A,B,C fixed; AxBxC, k =\
            2: A,B,C random; AxBxC, k = 3: A fixed; B,C random; AxBxC, k = 4: A,B\
            fixed; C random; AxBxC, k = 5: A,B fixed; C random; AxB,BxC,C(A).
        alevels: Number of levels for factor A.
        blevels: Number of levels for factor B.
        clevels: Number of levels for factor C.
        dsets: Input data sets for specific levels of factors A, B, and C.
        voxel_num: Screen output for specified voxel number.
        diskspace: Print out disk space required for program execution.
        mask: Use sub-brick #0 of dataset to define which voxels to process.
        outfile_fa: Specify the output file for the main ANOVA result.
        outfile_fb: Specify the output file for the main B ANOVA result.
        outfile_fc: Specify the output file for the main C ANOVA result.
        outfile_fab: Specify the output file for the interaction between A and\
            B.
        outfile_fac: Specify the output file for the interaction between A and\
            C.
        outfile_fbc: Specify the output file for the interaction between B and\
            C.
        outfile_fabc: Specify the output file for the interaction between A, B,\
            and C.
        outfile_amean: Specify the output file for the A mean results.
        outfile_bmean: Specify the output file for the B mean results.
        outfile_cmean: Specify the output file for the C mean results.
        outfile_xmean: Specify the output file for the overall mean results.
        outfile_adiff: Specify the output file for the A difference results.
        outfile_bdiff: Specify the output file for the B difference results.
        outfile_cdiff: Specify the output file for the C difference results.
        outfile_xdiff: Specify the output file for the overall difference\
            results.
        outfile_acontr: Specify the output file for the A contrast results.
        outfile_bcontr: Specify the output file for the B contrast results.
        outfile_ccontr: Specify the output file for the C contrast results.
        outfile_abcontr: Specify the output file for the interaction contrast\
            results between A and B.
        outfile_abcontr_: Specify the output file for the interaction contrast\
            results between A and B (case-sensitive).
        outfile_abdiff: Specify the output file for the interaction difference\
            results between A and B.
        outfile_abdiff_: Specify the output file for the interaction difference\
            results between A and B (case-sensitive).
        outfile_abmean: Specify the output file for the mean results of the\
            interaction between A and B.
        outfile_bucket: Specify the output file for the bucket (combined)\
            results.
        anova_options: Modified ANOVA computation options. See:\
            https://afni.nimh.nih.gov/sscc/gangc/ANOVA_Mod.html.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dAnova3Outputs`).
    """
    runner = runner or get_global_runner()
    if not (1 <= type_ <= 5): 
        raise ValueError(f"'type_' must be between 1 <= x <= 5 but was {type_}")
    execution = runner.start_execution(V_3D_ANOVA3_METADATA)
    cargs = []
    cargs.append("3dANOVA3")
    cargs.append("-type")
    cargs.extend(["-type", str(type_)])
    cargs.append("-alevels")
    cargs.extend(["-alevels", str(alevels)])
    cargs.append("-blevels")
    cargs.extend(["-blevels", str(blevels)])
    cargs.append("-clevels")
    cargs.extend(["-clevels", str(clevels)])
    cargs.extend(["-dset", *dsets])
    if voxel_num is not None:
        cargs.extend(["-voxel", str(voxel_num)])
    if diskspace:
        cargs.append("-diskspace")
    if mask is not None:
        cargs.extend(["-mask", execution.input_file(mask)])
    cargs.append("[OUTFILES]")
    if anova_options is not None:
        cargs.extend(["-old_method -OK -assume_sph", *anova_options])
    ret = V3dAnova3Outputs(
        root=execution.output_file("."),
        outfile_fa=execution.output_file(f"{outfile_fa}", optional=True) if outfile_fa is not None else None,
        outfile_fb=execution.output_file(f"{outfile_fb}", optional=True) if outfile_fb is not None else None,
        outfile_fc=execution.output_file(f"{outfile_fc}", optional=True) if outfile_fc is not None else None,
        outfile_fab=execution.output_file(f"{outfile_fab}", optional=True) if outfile_fab is not None else None,
        outfile_fac=execution.output_file(f"{outfile_fac}", optional=True) if outfile_fac is not None else None,
        outfile_fbc=execution.output_file(f"{outfile_fbc}", optional=True) if outfile_fbc is not None else None,
        outfile_fabc=execution.output_file(f"{outfile_fabc}", optional=True) if outfile_fabc is not None else None,
        outfile_amean=execution.output_file(f"{outfile_amean}", optional=True) if outfile_amean is not None else None,
        outfile_bmean=execution.output_file(f"{outfile_bmean}", optional=True) if outfile_bmean is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dAnova3Outputs",
    "V_3D_ANOVA3_METADATA",
    "v_3d_anova3",
]
