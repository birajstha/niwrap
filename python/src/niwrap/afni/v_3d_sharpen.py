# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_SHARPEN_METADATA = Metadata(
    id="b7cde717065fa070dd0f4cc4855029e0f66a2f4d",
    name="3dSharpen",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="your-docker-image",
)


class V3dSharpenOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_sharpen(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dataset: OutputPathType
    """Sharpened output dataset."""


def v_3d_sharpen(
    input_dataset: InputPathType,
    output_prefix: str,
    sharpening_factor: float | int | None = None,
    runner: Runner | None = None,
) -> V3dSharpenOutputs:
    """
    3dSharpen by RWCox.
    
    Applies a simple 3D sharpening filter to the positive values in the #0
    volume of the input dataset, and writes out a new dataset.
    
    Args:
        input_dataset: Input dataset (e.g., input.nii.gz).
        output_prefix: Name of the output dataset (e.g., output.nii.gz) which\
            will be in floating point format.
        sharpening_factor: Sharpening factor, between 0.1 and 0.9 (inclusive).\
            Larger values mean more sharpening.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dSharpenOutputs`).
    """
    runner = runner or get_global_runner()
    if sharpening_factor is not None and not (0.1 <= sharpening_factor <= 0.9): 
        raise ValueError(f"'sharpening_factor' must be between 0.1 <= x <= 0.9 but was {sharpening_factor}")
    execution = runner.start_execution(V_3D_SHARPEN_METADATA)
    cargs = []
    cargs.append("3dSharpen")
    if sharpening_factor is not None:
        cargs.extend(["-phi", str(sharpening_factor)])
    cargs.append(execution.input_file(input_dataset))
    cargs.extend(["-prefix", output_prefix])
    ret = V3dSharpenOutputs(
        root=execution.output_file("."),
        output_dataset=execution.output_file(f"{output_prefix}.nii.gz"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dSharpenOutputs",
    "V_3D_SHARPEN_METADATA",
    "v_3d_sharpen",
]
