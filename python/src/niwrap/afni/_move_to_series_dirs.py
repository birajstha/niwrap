# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_MOVE_TO_SERIES_DIRS_METADATA = Metadata(
    id="724830750ffbe82224b0ca6d89c61329a782e57c",
    name="@move.to.series.dirs",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class MoveToSeriesDirsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_move_to_series_dirs(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def _move_to_series_dirs(
    dicom_files: list[InputPathType],
    action: typing.Literal["copy", "move"] | None = None,
    dprefix: str | None = None,
    tag: str | None = None,
    test: bool = False,
    help_: bool = False,
    hist: bool = False,
    ver: bool = False,
    runner: Runner | None = None,
) -> MoveToSeriesDirsOutputs:
    """
    @move.to.series.dirs by AFNI Team.
    
    Partition DICOM files into series directories by copying or moving them to
    new series directories.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/@move.to.series.dirs.html
    
    Args:
        dicom_files: Specify input DICOM files (e.g., IMG*).
        action: Specify action to perform: copy or move. Default is copy.
        dprefix: Specify directory root for output series directories. Default\
            is current directory.
        tag: Specify the DICOM tag to use for partitioning. Default is\
            0020,0011 (REL Series Number).
        test: Run in test mode, only show what would be done without actually\
            moving any files.
        help_: Show help information.
        hist: Show modification history.
        ver: Show version number.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MoveToSeriesDirsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(_MOVE_TO_SERIES_DIRS_METADATA)
    cargs = []
    cargs.append("@move.to.series.dirs")
    cargs.append("[OPTIONS]")
    cargs.append("DICOM_FILES")
    ret = MoveToSeriesDirsOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "MoveToSeriesDirsOutputs",
    "_MOVE_TO_SERIES_DIRS_METADATA",
    "_move_to_series_dirs",
]
