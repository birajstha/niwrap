# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_1D_SEM_METADATA = Metadata(
    id="bb886ee79d5c64aabe77f5b0d3475ae5316bd264",
    name="1dSEM",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="your-container-image:latest",
)


class V1dSemOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_1d_sem(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output printed to the terminal. This file may be redirected."""


def v_1d_sem(
    theta: InputPathType,
    correlation_matrix: InputPathType,
    residual_variance: InputPathType,
    degrees_of_freedom: float | int,
    max_iterations: int | None = None,
    number_random_trials: int | None = None,
    limits: list[float | int] | None = None,
    calculate_cost: bool = False,
    verbose: int | None = None,
    tree_growth: bool = False,
    model_search: bool = False,
    max_paths: int | None = None,
    stop_cost: float | int | None = None,
    forest_growth: bool = False,
    grow_all: bool = False,
    leafpicker: bool = False,
    runner: Runner | None = None,
) -> V1dSemOutputs:
    """
    1dSEM by Gang Chen, Daniel R. Glen, Jason L. Stein, Andreas S. Meyer-Lindenberg,
    Ziad S. Saad, Robert W. Cox.
    
    Computes path coefficients for connection matrix in Structural Equation
    Modeling (SEM).
    
    More information: https://afni.nimh.nih.gov/sscc/gangc/PathAna.html
    
    Args:
        theta: Connection matrix 1D file with initial representation.
        correlation_matrix: Correlation matrix 1D file.
        residual_variance: Residual variance vector 1D file.
        degrees_of_freedom: Degrees of freedom.
        max_iterations: Maximum number of iterations for convergence\
            (Default=10000). Values can range from 1 to any positive integer less\
            than 10000.
        number_random_trials: Number of random trials before optimization\
            (Default = 100).
        limits: Lower and upper limits for connection coefficients (Default =\
            -1.0 to 1.0).
        calculate_cost: No modeling at all, just calculate the cost function\
            for the coefficients as given in the theta file.
        verbose: Print info every nnnnn steps.
        tree_growth: Search for best model by growing a model for one\
            additional coefficient from the previous model for n-1 coefficients.
        model_search: Search for best model by growing a model for one\
            additional coefficient from the previous model for n-1 coefficients.
        max_paths: Maximum number of paths to include (Default = 1000).
        stop_cost: Stop searching for paths when cost function is below this\
            value (Default = 0.1).
        forest_growth: Search over all possible models by comparing models at\
            incrementally increasing number of path coefficients.
        grow_all: Search over all possible models by comparing models at\
            incrementally increasing number of path coefficients.
        leafpicker: Expands the search optimization to look at multiple paths\
            to avoid local minimum. This method is the default technique for tree\
            growth and standard coefficient searches.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V1dSemOutputs`).
    """
    runner = runner or get_global_runner()
    if limits is not None and (len(limits) != 2): 
        raise ValueError(f"Length of 'limits' must be 2 but was {len(limits)}")
    execution = runner.start_execution(V_1D_SEM_METADATA)
    cargs = []
    cargs.append("1dSEM")
    cargs.append("-theta")
    cargs.append(execution.input_file(theta))
    cargs.append("-C")
    cargs.append(execution.input_file(correlation_matrix))
    cargs.append("-psi")
    cargs.append(execution.input_file(residual_variance))
    cargs.append("-DF")
    cargs.append(str(degrees_of_freedom))
    cargs.append("[OPTIONS]")
    ret = V1dSemOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(f"output.txt", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V1dSemOutputs",
    "V_1D_SEM_METADATA",
    "v_1d_sem",
]
