# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

ELECTRO_GRID_METADATA = Metadata(
    id="a17b1e16989f787aaad3a2ec35c0c37f5b0469f1",
    name="ElectroGrid",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class ElectroGridOutputs(typing.NamedTuple):
    """
    Output object returned when calling `electro_grid(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_surface: OutputPathType | None
    """Output surface file"""


def electro_grid(
    strip: int | None = None,
    grid: list[int] | None = None,
    prefix: str | None = None,
    coords: InputPathType | None = None,
    with_markers: bool = False,
    echo: bool = False,
    runner: Runner | None = None,
) -> ElectroGridOutputs:
    """
    ElectroGrid by AFNI Team.
    
    Creates a mesh representation of an electrode grid for use with SUMA.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/@ElectroGrid.html
    
    Args:
        strip: Make an Nx strip (array) of electrodes.
        grid: Make an Nx by Ny grid of electrodes. A node at (i,j) has a node\
            ID = i+Nx*j with 0<=i<Nx and 0<=j<=Ny.
        prefix: Use PREFIX for the output surface.
        coords: Specify the coordinates of the nodes on the grid, or the array.\
            XYZ.1D should have three columns, with each row specifying the\
            coordinates of one node.
        with_markers: Add markers to the surface at each electrode.
        echo: Set echo.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ElectroGridOutputs`).
    """
    runner = runner or get_global_runner()
    if grid is not None and (len(grid) != 2): 
        raise ValueError(f"Length of 'grid' must be 2 but was {len(grid)}")
    execution = runner.start_execution(ELECTRO_GRID_METADATA)
    cargs = []
    cargs.append("@ElectroGrid")
    cargs.append("[[-strip")
    cargs.append("Nx]")
    cargs.append("|")
    cargs.append("[-grid")
    cargs.append("Nx")
    cargs.append("Ny]]")
    cargs.append("[-prefix")
    cargs.append("PREFIX]")
    cargs.append("[-coords")
    cargs.append("XYZ.1D]")
    cargs.append("[-with_markers]")
    cargs.append("[-echo]")
    ret = ElectroGridOutputs(
        root=execution.output_file("."),
        output_surface=execution.output_file(f"{prefix}.gii", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "ELECTRO_GRID_METADATA",
    "ElectroGridOutputs",
    "electro_grid",
]
