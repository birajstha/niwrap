# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V__NOISY_SKULL_STRIP_METADATA = Metadata(
    id="218e177b783c87f71467c5fa72eeac090660310d",
    name="@NoisySkullStrip",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class VNoisySkullStripOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v__noisy_skull_strip(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    anat_ns: OutputPathType
    """Skull stripped version of ANAT"""
    anat_air: OutputPathType
    """Special mask output - air"""
    anat_skl: OutputPathType
    """Special mask output - skull"""
    anat_lsp: OutputPathType
    """Volume used to threshold 'air' out of the volume to be stripped"""


def v__noisy_skull_strip(
    input_file: InputPathType,
    keep_tmp: bool = False,
    v_3dskullstrip_opts: str | None = None,
    runner: Runner | None = None,
) -> VNoisySkullStripOutputs:
    """
    @NoisySkullStrip by AFNI Team.
    
    Strips the skull of anatomical datasets with low SNR.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/@NoisySkullStrip.html
    
    Args:
        input_file: The anatomical dataset.
        keep_tmp: Do not erase temporary files at the end.
        v_3dskullstrip_opts: Anything following this option is passed to\
            3dSkullStrip.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VNoisySkullStripOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V__NOISY_SKULL_STRIP_METADATA)
    cargs = []
    cargs.append("@NoisySkullStrip")
    cargs.append("-input")
    cargs.append(execution.input_file(input_file))
    if keep_tmp:
        cargs.append("-keep_tmp")
    if v_3dskullstrip_opts is not None:
        cargs.extend(["-3dSkullStrip_opts", v_3dskullstrip_opts])
    ret = VNoisySkullStripOutputs(
        root=execution.output_file("."),
        anat_ns=execution.output_file(f"{pathlib.Path(input_file).name}.ns"),
        anat_air=execution.output_file(f"{pathlib.Path(input_file).name}.air", optional=True),
        anat_skl=execution.output_file(f"{pathlib.Path(input_file).name}.skl", optional=True),
        anat_lsp=execution.output_file(f"{pathlib.Path(input_file).name}.lsp", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "VNoisySkullStripOutputs",
    "V__NOISY_SKULL_STRIP_METADATA",
    "v__noisy_skull_strip",
]
