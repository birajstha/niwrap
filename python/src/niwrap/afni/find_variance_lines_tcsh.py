# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FIND_VARIANCE_LINES_METADATA = Metadata(
    id="070b4ae01ad6db47144832edcb787f0ae727bb4e",
    name="find_variance_lines",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class FindVarianceLinesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `find_variance_lines(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    variance_maps: OutputPathType
    """Variance maps per run"""
    scaled_variance_maps: OutputPathType
    """Scaled variance maps per run"""
    cluster_reports: OutputPathType
    """Cluster reports"""
    jpeg_images: OutputPathType
    """JPEG images showing locations of high variance"""


def find_variance_lines(
    input_files: list[InputPathType],
    mask: str | None = None,
    min_cvox: int | None = None,
    min_nt: int | None = None,
    nerode: int | None = None,
    nfirst: int | None = None,
    percentile: int | None = None,
    polort: str | None = None,
    output_dir: str | None = None,
    do_clean: int | None = None,
    do_img: int | None = None,
    echo: bool = False,
    help_: bool = False,
    hist: bool = False,
    ver: bool = False,
    runner: Runner | None = None,
) -> FindVarianceLinesOutputs:
    """
    find_variance_lines by AFNI Team.
    
    Look for bars of high variance that might suggest scanner interference in
    EPI datasets.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/find_variance_lines.tcsh.html
    
    Args:
        input_files: Input EPI datasets.
        mask: Mask for computations (default=AUTO).
        min_cvox: Minimum voxels for valid mask column (default=5).
        min_nt: Minimum number of time points required (default=10).
        nerode: How much to erode input or auto-mask (default=0).
        nfirst: Discard the first VAL time points (default=0).
        percentile: Percentile of variance values to scale to (default=90).
        polort: Polynomial detrending degree (default=A).
        output_dir: Name of the output directory (default=vlines.result).
        do_clean: Do we clean up a little? (default=1).
        do_img: Make vline images? (default=1).
        echo: Run script with shell 'echo' set (default=no).
        help_: Show this help.
        hist: Show the version history.
        ver: Show the current version.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FindVarianceLinesOutputs`).
    """
    runner = runner or get_global_runner()
    if percentile is not None and not (0 <= percentile <= 99): 
        raise ValueError(f"'percentile' must be between 0 <= x <= 99 but was {percentile}")
    if do_clean is not None and not (0 <= do_clean <= 1): 
        raise ValueError(f"'do_clean' must be between 0 <= x <= 1 but was {do_clean}")
    if do_img is not None and not (0 <= do_img <= 1): 
        raise ValueError(f"'do_img' must be between 0 <= x <= 1 but was {do_img}")
    execution = runner.start_execution(FIND_VARIANCE_LINES_METADATA)
    cargs = []
    cargs.append("find_variance_lines.tcsh")
    cargs.extend([execution.input_file(f) for f in input_files])
    cargs.append("[OPTIONS]")
    ret = FindVarianceLinesOutputs(
        root=execution.output_file("."),
        variance_maps=execution.output_file(f"[OUTPUT_DIR]/variance_map_run*.nii.gz"),
        scaled_variance_maps=execution.output_file(f"[OUTPUT_DIR]/scaled_variance_map_run*.nii.gz"),
        cluster_reports=execution.output_file(f"[OUTPUT_DIR]/cluster_report_run*.txt"),
        jpeg_images=execution.output_file(f"[OUTPUT_DIR]/*.jpg", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FIND_VARIANCE_LINES_METADATA",
    "FindVarianceLinesOutputs",
    "find_variance_lines",
]
