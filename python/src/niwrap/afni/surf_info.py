# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

SURF_INFO_METADATA = Metadata(
    id="c9463aec07c88b23b2f01eca70a34e228766aecb",
    name="SurfInfo",
)


class SurfInfoOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surf_info(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    metrics_output: OutputPathType
    """Output file containing calculated surface metrics."""


def surf_info(
    surface: InputPathType,
    detail_level: float | int | None = None,
    debug_level: float | int | None = None,
    n_node: bool = False,
    n_faceset: bool = False,
    n_tri: bool = False,
    com: bool = False,
    quiet: bool = False,
    separator: str | None = None,
    input_surface: str | None = None,
    surface_state: str | None = None,
    surface_volume: InputPathType | None = None,
    spec_file: InputPathType | None = None,
    novolreg: bool = False,
    noxform: bool = False,
    setenv: str | None = None,
    trace_: bool = False,
    extreme_trace: bool = False,
    nomall: bool = False,
    yesmall: bool = False,
    runner: Runner | None = None,
) -> SurfInfoOutputs:
    """
    SurfInfo by Ziad S. Saad SSCC/NIMH/NIH.
    
    Tool to gather information about surface files.
    
    More information: https://afni.nimh.nih.gov
    
    Args:
        surface: Input surface file.
        detail_level: Calculate surface metrics. 1=yes, 0=no.
        debug_level: Debugging level (2 turns LocalHead ON).
        n_node: Output the number of nodes.
        n_faceset: Output the number of face sets.
        n_tri: Output the number of triangles.
        com: Output the center of mass.
        quiet: Do not include the name of the parameter in output.
        separator: Use string SEP to separate parameter values. Default is ' ;\
            '.
        input_surface: Specify the input surface type and file.
        surface_state: Specify surface type, state, and name.
        surface_volume: Specify a surface volume file.
        spec_file: Specify a surface specification (spec) file.
        novolreg: Ignore any Rotate, Volreg, Tagalign, or WarpDrive\
            transformations present in the Surface Volume.
        noxform: Same as -novolreg.
        setenv: Set environment variable ENVname to be ENVvalue. Quotes are\
            necessary.
        trace_: Turns on In/Out debug and Memory tracing.
        extreme_trace: Turns on extreme tracing.
        nomall: Turn off memory tracing.
        yesmall: Turn on memory tracing (default).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfInfoOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURF_INFO_METADATA)
    cargs = []
    cargs.append("SurfInfo")
    cargs.append("[options]")
    cargs.append(execution.input_file(surface))
    if com:
        cargs.append("-COM")
    if debug_level is not None:
        cargs.extend(["-debug", str(debug_level)])
    if detail_level is not None:
        cargs.extend(["-detail", str(detail_level)])
    if quiet:
        cargs.append("-quiet")
    if separator is not None:
        cargs.extend(["-sep", separator])
    if input_surface is not None:
        cargs.extend(["-i_TYPE", input_surface])
    if surface_state is not None:
        cargs.extend(["-tsn", surface_state])
    if surface_volume is not None:
        cargs.extend(["-sv", execution.input_file(surface_volume)])
    if spec_file is not None:
        cargs.extend(["-spec", execution.input_file(spec_file)])
    ret = SurfInfoOutputs(
        root=execution.output_file("."),
        metrics_output=execution.output_file(f"{pathlib.Path(surface).name}_metrics.txt", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SURF_INFO_METADATA",
    "SurfInfoOutputs",
    "surf_info",
]
