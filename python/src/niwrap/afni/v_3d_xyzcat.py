# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_XYZCAT_METADATA = Metadata(
    id="baf493bd157da1cbd10655c8eff3555b42a8f9ee",
    name="3dXYZcat",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni_latest",
)


class V3dXyzcatOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_xyzcat(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_brainfile: OutputPathType | None
    """Output concatenated dataset."""
    output_headerfile: OutputPathType | None
    """Output concatenated dataset header."""


def v_3d_xyzcat(
    datasets: list[InputPathType],
    prefix: str | None = None,
    verbose: bool = False,
    direction: str | None = None,
    runner: Runner | None = None,
) -> V3dXyzcatOutputs:
    """
    3dXYZcat by RW Cox.
    
    Catenates datasets spatially.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dXYZcat.html
    
    Args:
        datasets: Input datasets to concatenate.
        prefix: Use 'pname' for the output dataset prefix name.
        verbose: Print out some verbositiness as the program proceeds.
        direction: Catenate along direction 'Q' (X, Y, Z, or their synonyms I,\
            J, K).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dXyzcatOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_XYZCAT_METADATA)
    cargs = []
    cargs.append("3dXYZcat")
    if direction is not None:
        cargs.extend(["-dir", direction])
    if prefix is not None:
        cargs.extend(["-prefix", prefix])
    if verbose:
        cargs.append("-verb")
    cargs.extend([execution.input_file(f) for f in datasets])
    ret = V3dXyzcatOutputs(
        root=execution.output_file("."),
        output_brainfile=execution.output_file(f"{prefix}+orig.BRIK") if prefix is not None else None,
        output_headerfile=execution.output_file(f"{prefix}+orig.HEAD") if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dXyzcatOutputs",
    "V_3D_XYZCAT_METADATA",
    "v_3d_xyzcat",
]
