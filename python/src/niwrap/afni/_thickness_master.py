# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

_THICKNESS_MASTER_METADATA = Metadata(
    id="aa0ef908aa48b3504e403b8bd7397a162e291e07",
    name="@thickness_master",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="your-docker-image:latest",
)


class ThicknessMasterOutputs(typing.NamedTuple):
    """
    Output object returned when calling `_thickness_master(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_bb_dir: OutputPathType | None
    """Output directory for ball and box method"""
    output_erode_dir: OutputPathType | None
    """Output directory for erosion method"""
    output_in2out_dir: OutputPathType | None
    """Output directory for in2out method"""


def _thickness_master(
    maskset: InputPathType,
    surfset: InputPathType,
    outdir: str | None = None,
    runner: Runner | None = None,
) -> ThicknessMasterOutputs:
    """
    @thickness_master.
    
    Compute cortical thickness using mask and surface datasets.
    
    Args:
        maskset: Mask dataset to find thickness.
        surfset: Surface dataset to use for normals into the volume.
        outdir: Output directory base name. The output will be placed in a\
            directory with thick_base in its name (e.g., mmmm_bb, mmmm_erode,\
            mmmm_in2out).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ThicknessMasterOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(_THICKNESS_MASTER_METADATA)
    cargs = []
    cargs.append("@thickness_master")
    cargs.append("-maskset")
    cargs.append(execution.input_file(maskset))
    cargs.append("-surfset")
    cargs.append(execution.input_file(surfset))
    cargs.append("-outdir")
    if outdir is not None:
        cargs.append(outdir)
    ret = ThicknessMasterOutputs(
        root=execution.output_file("."),
        output_bb_dir=execution.output_file(f"{outdir}_bb/", optional=True) if outdir is not None else None,
        output_erode_dir=execution.output_file(f"{outdir}_erode/", optional=True) if outdir is not None else None,
        output_in2out_dir=execution.output_file(f"{outdir}_in2out/", optional=True) if outdir is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "ThicknessMasterOutputs",
    "_THICKNESS_MASTER_METADATA",
    "_thickness_master",
]
