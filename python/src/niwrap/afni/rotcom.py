# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

ROTCOM_METADATA = Metadata(
    id="7c1f0710e04c11bbbf98ee767851512aaea1b19d",
    name="rotcom",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni:latest",
)


class RotcomOutputs(typing.NamedTuple):
    """
    Output object returned when calling `rotcom(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    stdout: OutputPathType
    """The 4x3 transformation matrix+vector output"""


def rotcom(
    rotate_ashift: str,
    dataset: InputPathType | None = None,
    runner: Runner | None = None,
) -> RotcomOutputs:
    """
    rotcom by RWCox.
    
    Prints to stdout the 4x3 transformation matrix+vector that would be applied
    by 3drotate to the given dataset.
    
    Args:
        rotate_ashift: Combination of rotate and ashift options in a single\
            quoted string (e.g., '-rotate 10I 0R 0A -ashift 5S 0 0').
        dataset: Input dataset for determining coordinate order.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RotcomOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ROTCOM_METADATA)
    cargs = []
    cargs.append("rotcom")
    cargs.append(rotate_ashift)
    if dataset is not None:
        cargs.append(execution.input_file(dataset))
    ret = RotcomOutputs(
        root=execution.output_file("."),
        stdout=execution.output_file(f"stdout"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "ROTCOM_METADATA",
    "RotcomOutputs",
    "rotcom",
]
