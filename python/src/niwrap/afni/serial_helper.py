# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

SERIAL_HELPER_METADATA = Metadata(
    id="705162585b05cbd8b6b077a0b1d2147191d45171",
    name="serial_helper",
)


class SerialHelperOutputs(typing.NamedTuple):
    """
    Output object returned when calling `serial_helper(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def serial_helper(
    serial_port: str,
    sock_num: float | int | None = None,
    mp_max: float | int | None = None,
    mp_min: float | int | None = None,
    num_extra: float | int | None = None,
    disp_all: float | int | None = None,
    debug: float | int | None = None,
    show_times: bool = False,
    help_: bool = False,
    hist: bool = False,
    no_serial: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> SerialHelperOutputs:
    """
    serial_helper by R. Reynolds, T. Ross.
    
    Passes motion parameters from socket to serial port.
    
    Args:
        serial_port: Output serial port filename.
        sock_num: Specify socket number to serve.
        mp_max: Limit the maximum value of the MP data.
        mp_min: Limit the minimum value of the MP data.
        num_extra: Receive additional floats per TR.
        disp_all: Receive NVOX*8 extra floats per TR.
        debug: Set the debugging level (0-3).
        show_times: Show communication times.
        help_: Display this help information.
        hist: Show the module history.
        no_serial: Turn off serial port output.
        version: Show the current version number.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SerialHelperOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SERIAL_HELPER_METADATA)
    cargs = []
    cargs.append("serial_helper")
    cargs.append("[OPTIONS]")
    ret = SerialHelperOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SERIAL_HELPER_METADATA",
    "SerialHelperOutputs",
    "serial_helper",
]
