# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_AMP_TO_RSFC_METADATA = Metadata(
    id="7fe24ca4b682ef0ab3fc8c99aa5d83b1df4c4740",
    name="3dAmpToRSFC",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dAmpToRsfcOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_amp_to_rsfc(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_alff: OutputPathType
    """Amplitude of low frequency fluctuations (L1 sum)."""
    output_malff: OutputPathType
    """ALFF divided by the mean value within the input/estimated whole brain mask (mean-scaled ALFF)."""
    output_falff: OutputPathType
    """ALFF divided by sum of full amplitude spectrum (fractional ALFF)."""
    output_rsfa: OutputPathType
    """Square-root of summed square of low frequency fluctuations (L2 sum)."""
    output_mrsfa: OutputPathType
    """RSFA divided by the mean value within the input/estimated whole brain mask (mean-scaled RSFA)."""
    output_frsfa: OutputPathType
    """ALFF divided by sum of full amplitude spectrum (fractional RSFA)."""


def v_3d_amp_to_rsfc(
    prefix: str,
    band: list[float | int],
    in_amp: InputPathType | None = None,
    in_pow: InputPathType | None = None,
    mask: InputPathType | None = None,
    nifti: bool = False,
    runner: Runner | None = None,
) -> V3dAmpToRsfcOutputs:
    """
    3dAmpToRSFC by AFNI Team.
    
    Convert spectral amplitudes into standard RSFC parameters.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dAmpToRSFC.html
    
    Args:
        prefix: Output file prefix; file names will be: PREFIX_ALFF,\
            PREFIX_FALFF, etc.
        band: Lower and upper boundaries of the low frequency fluctuations\
            (LFFs), within the interval [FBOT, FTOP].
        in_amp: Input file of one-sided spectral amplitudes, such as output by\
            3dLombScargle.
        in_pow: Input file of a one-sided power spectrum, such as output by\
            3dLombScargle.
        mask: Volume mask of voxels to include for calculations.
        nifti: Output files as *.nii.gz (default is BRIK/HEAD).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dAmpToRsfcOutputs`).
    """
    runner = runner or get_global_runner()
    if (len(band) != 2): 
        raise ValueError(f"Length of 'band' must be 2 but was {len(band)}")
    execution = runner.start_execution(V_3D_AMP_TO_RSFC_METADATA)
    cargs = []
    cargs.append("3dAmpToRSFC")
    cargs.append("{")
    cargs.append("-in_amp")
    if in_amp is not None:
        cargs.extend(["-in_amp", execution.input_file(in_amp)])
    cargs.append("|")
    cargs.append("-in_pow")
    if in_pow is not None:
        cargs.extend(["-in_pow", execution.input_file(in_pow)])
    cargs.append("}")
    cargs.append("-prefix")
    cargs.extend(["-prefix", prefix])
    cargs.append("-band")
    cargs.append("[FBOT]")
    cargs.append("[FTOP]")
    cargs.append("{")
    cargs.append("-mask")
    if mask is not None:
        cargs.extend(["-mask", execution.input_file(mask)])
    cargs.append("}")
    cargs.append("{")
    cargs.append("-nifti")
    cargs.append("}")
    ret = V3dAmpToRsfcOutputs(
        root=execution.output_file("."),
        output_alff=execution.output_file(f"{prefix}_ALFF*", optional=True),
        output_malff=execution.output_file(f"{prefix}_MALFF*", optional=True),
        output_falff=execution.output_file(f"{prefix}_FALFF*", optional=True),
        output_rsfa=execution.output_file(f"{prefix}_RSFA*", optional=True),
        output_mrsfa=execution.output_file(f"{prefix}_MRSFA*", optional=True),
        output_frsfa=execution.output_file(f"{prefix}_FRSFA*", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dAmpToRsfcOutputs",
    "V_3D_AMP_TO_RSFC_METADATA",
    "v_3d_amp_to_rsfc",
]
