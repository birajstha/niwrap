# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

T1SCALE_METADATA = Metadata(
    id="dec254737b5505df919d67aff1de883e1cfda75f",
    name="T1scale",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="user/t1scale:latest",
)


class T1scaleOutputs(typing.NamedTuple):
    """
    Output object returned when calling `t1scale(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    uniformized_t1_output: OutputPathType
    """Uniformized T1 volume output file"""
    masked_uniformized_t1_output: OutputPathType
    """Masked Uniformized T1 volume output file"""
    aligned_pd_output: OutputPathType
    """Aligned PD volume output file in alignment with T1+orig"""


def t1scale(
    t1_volume: InputPathType,
    pd_volume: InputPathType | None = None,
    output_directory: str | None = None,
    align: bool = False,
    mask: InputPathType | None = None,
    head_mask: bool = False,
    unmasked_uni: bool = False,
    masked_uni: bool = False,
    echo: bool = False,
    help_: bool = False,
    h_web: bool = False,
    h_view: bool = False,
    all_opts: bool = False,
    h_find_word: str | None = None,
    runner: Runner | None = None,
) -> T1scaleOutputs:
    """
    T1scale by Unknown.
    
    Fix bias field shading in T1 by scaling it with PD image. You can also get a
    decent result even without the PD volume.
    
    Args:
        t1_volume: The T1 volume.
        pd_volume: The PD volume (aligned to T1).
        output_directory: Directory where output gets dumped. Default is\
            T1scale/.
        align: Align PD volume to T1. Without this option, PDvol is assumed in\
            alignment with T1vol.
        mask: Create mask for the output. If not specified, the script will\
            generate one with 3dAutomask on fattened PDvol.
        head_mask: Create mask using 3dSkullStrip's -head option.
        unmasked_uni: Do not apply masking to uniformized volume (default).
        masked_uni: Apply masking to uniformized volume.
        echo: Set echo.
        help_: Display this help message and exit.
        h_web: Open webpage with help for this program.
        h_view: Open -help output in a GUI editor.
        all_opts: List all of the options for this script.
        h_find_word: Search for lines containing WORD in -help output. Search\
            is approximate.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `T1scaleOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(T1SCALE_METADATA)
    cargs = []
    cargs.append("@T1scale")
    cargs.append("<-T1")
    cargs.append("T1vol>")
    cargs.append("<-PD")
    cargs.append("PDvol>")
    cargs.append("[OUTPUT_DIR]")
    if align:
        cargs.append("-align")
    cargs.append("[MASK_FILE]")
    if head_mask:
        cargs.append("-head_mask")
    if unmasked_uni:
        cargs.append("-unmasked_uni")
    if masked_uni:
        cargs.append("-masked_uni")
    if echo:
        cargs.append("-echo")
    if help_:
        cargs.append("-help")
    if h_web:
        cargs.append("-h_web")
    if h_view:
        cargs.append("-hview")
    if all_opts:
        cargs.append("-all_opts")
    if h_find_word is not None:
        cargs.extend(["-h_find", h_find_word])
    ret = T1scaleOutputs(
        root=execution.output_file("."),
        uniformized_t1_output=execution.output_file(f"T1.uni+orig", optional=True),
        masked_uniformized_t1_output=execution.output_file(f"T1_uni_masked+orig", optional=True),
        aligned_pd_output=execution.output_file(f"PD+orig", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "T1SCALE_METADATA",
    "T1scaleOutputs",
    "t1scale",
]
