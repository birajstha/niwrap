# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

CLUST_EXP_STAT_PARSE_METADATA = Metadata(
    id="2e796ccd9d89807477dc19e9cd6c284b329ddfdc",
    name="ClustExp_StatParse",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class ClustExpStatParseOutputs(typing.NamedTuple):
    """
    Output object returned when calling `clust_exp_stat_parse(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    table_mean: OutputPathType | None
    """Table with all data extracted from all subjects."""
    group_table: OutputPathType | None
    """Table with information parsed from the statistics data set history."""
    v_3dclust_output: OutputPathType | None
    """Output directly from 3dclust."""
    clusters_output: OutputPathType | None
    """Cleaned up version of the whereami output."""
    statinfo_output: OutputPathType | None
    """Summary info for the shiny app."""
    thresholded_dataset: OutputPathType | None
    """A new data set from input statistics, thresholded at uncorrected p value."""
    thresholded_mask_dataset: OutputPathType | None
    """Integer labeled mask of the thresholded image with cluster sizes at least as big as the -MinVox."""
    master_copy: OutputPathType | None
    """A NIfTI copy of the master file provided that may have been resampled."""


def clust_exp_stat_parse(
    statdset: InputPathType,
    meanbrik: float | int,
    threshbrik: float | int,
    subjdset: InputPathType,
    subjtable: InputPathType,
    master: InputPathType,
    prefix: str | None = None,
    pval: float | int | None = None,
    minvox: float | int | None = None,
    atlas: str | None = None,
    session: str | None = None,
    noshiny: bool = False,
    overwrite: bool = False,
    runner: Runner | None = None,
) -> ClustExpStatParseOutputs:
    """
    ClustExp_StatParse by AFNI Team.
    
    Parser for statistical data sets and subject data sets, generating several
    outputs for further analysis.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/ClustExp_StatParse.py.html
    
    Args:
        statdset: Statistics dataset.
        meanbrik: Mean subbrik (integer >= 0).
        threshbrik: Threshold subbrik. Might be the same as MeanBrik (integer\
            >= 0).
        subjdset: Labeled dataset with all subjects (from @ClustExp_CatLab).
        subjtable: Table with subject labels and input datasets.
        master: Master data set for underlay.
        prefix: Name for output (no path).
        pval: Uncorrected p value for thresholding.
        minvox: Minimum voxels in cluster.
        atlas: Atlas name for lookup (list at: whereami -help).
        session: Output parent folder if you don't want the current working\
            directory.
        noshiny: Do not create shiny app.
        overwrite: Remove previous folder with same PREFIX.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ClustExpStatParseOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CLUST_EXP_STAT_PARSE_METADATA)
    cargs = []
    cargs.append("ClustExp_StatParse.py")
    cargs.extend(["-StatDSET", execution.input_file(statdset)])
    cargs.extend(["-MeanBrik", str(meanbrik)])
    cargs.extend(["-ThreshBrik", str(threshbrik)])
    cargs.extend(["-SubjDSET", execution.input_file(subjdset)])
    cargs.extend(["-SubjTable", execution.input_file(subjtable)])
    cargs.extend(["-master", execution.input_file(master)])
    if prefix is not None:
        cargs.extend(["-prefix", prefix])
    if pval is not None:
        cargs.extend(["-p", str(pval)])
    if minvox is not None:
        cargs.extend(["-MinVox", str(minvox)])
    if atlas is not None:
        cargs.extend(["-atlas", atlas])
    if session is not None:
        cargs.extend(["-session", session])
    if noshiny:
        cargs.append("-NoShiny")
    if overwrite:
        cargs.append("-overwrite")
    ret = ClustExpStatParseOutputs(
        root=execution.output_file("."),
        table_mean=execution.output_file(f"{prefix}_p_uncor_{str(pval)}_mean.csv", optional=True) if prefix is not None and pval is not None else None,
        group_table=execution.output_file(f"{prefix}_GroupTable.csv", optional=True) if prefix is not None else None,
        v_3dclust_output=execution.output_file(f"{prefix}_p_uncor_{str(pval)}_3dclust.1D", optional=True) if prefix is not None and pval is not None else None,
        clusters_output=execution.output_file(f"{prefix}_p_uncor_{str(pval)}_clusters.csv", optional=True) if prefix is not None and pval is not None else None,
        statinfo_output=execution.output_file(f"{prefix}_StatInfo.csv", optional=True) if prefix is not None else None,
        thresholded_dataset=execution.output_file(f"{prefix}_p_uncor_{str(pval)}.nii.gz", optional=True) if prefix is not None and pval is not None else None,
        thresholded_mask_dataset=execution.output_file(f"{prefix}_p_uncor_{str(pval)}_mask.nii.gz", optional=True) if prefix is not None and pval is not None else None,
        master_copy=execution.output_file(f"{prefix}_master.nii.gz", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CLUST_EXP_STAT_PARSE_METADATA",
    "ClustExpStatParseOutputs",
    "clust_exp_stat_parse",
]
