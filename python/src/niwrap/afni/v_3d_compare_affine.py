# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_COMPARE_AFFINE_METADATA = Metadata(
    id="848c982592a9276c001ccbdf810fbbc7fdfffca5",
    name="3dCompareAffine",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="your_docker_image_repository/your_image_name:latest",
)


class V3dCompareAffineOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_compare_affine(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Output file containing comparison results of affine transformations"""


def v_3d_compare_affine(
    mask: str | None = None,
    dset: InputPathType | None = None,
    affine: list[str] | None = None,
    runner: Runner | None = None,
) -> V3dCompareAffineOutputs:
    """
    3dCompareAffine by RWCox - Mar 2020 at the Tulsa bootcamp.
    
    Compares two (or more) affine spatial transformations on a dataset and
    outputs measurements of their differences in spatial displacements.
    
    Args:
        mask: Dataset containing non-zero voxels used as the region over which\
            to compare the affine transformations.
        dset: Dataset to compute an automask from it and use that mask as the\
            spatial region for comparison.
        affine: Input an affine transformation (file or 'MATRIX'). Multiple\
            '-affine' options can be used to input multiple files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dCompareAffineOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_COMPARE_AFFINE_METADATA)
    cargs = []
    cargs.append("3dCompareAffine")
    cargs.append("[OPTIONS]")
    ret = V3dCompareAffineOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(f"[OUTPUT_PREFIX]_comparison.txt"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dCompareAffineOutputs",
    "V_3D_COMPARE_AFFINE_METADATA",
    "v_3d_compare_affine",
]
