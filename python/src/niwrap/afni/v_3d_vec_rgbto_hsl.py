# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

V_3D_VEC_RGBTO_HSL_METADATA = Metadata(
    id="232ebab54a001ae268cd3c9f605929ce3a7b7267.boutiques",
    name="3dVecRGBtoHSL",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


class V3dVecRgbtoHslOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_vec_rgbto_hsl(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_hsl_dataset: OutputPathType
    """Output HSL dataset"""


def v_3d_vec_rgbto_hsl(
    prefix: str,
    in_vec: InputPathType,
    mask: InputPathType | None = None,
    in_scal: InputPathType | None = None,
    runner: Runner | None = None,
) -> V3dVecRgbtoHslOutputs:
    """
    Convert a 3-brick RGB (red, green, blue) data set to an HSL (hue, saturation,
    luminance) one.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        prefix: Output file name part.
        in_vec: Input RGB vector file of three bricks, presumably each having\
            values in the interval [0,1].
        mask: Whole brain mask within which to calculate things. Otherwise,\
            data should be masked already.
        in_scal: Scalar file (single brick) which will be appended to the\
            output file, mainly aimed at loading in an FA data set for tract volume\
            coloration.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dVecRgbtoHslOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_VEC_RGBTO_HSL_METADATA)
    cargs = []
    cargs.append("3dVecRGBtoHSL")
    cargs.extend([
        "-prefix",
        prefix
    ])
    cargs.extend([
        "-in_vec",
        execution.input_file(in_vec)
    ])
    if mask is not None:
        cargs.extend([
            "-mask",
            execution.input_file(mask)
        ])
    if in_scal is not None:
        cargs.extend([
            "-in_scal",
            execution.input_file(in_scal)
        ])
    ret = V3dVecRgbtoHslOutputs(
        root=execution.output_file("."),
        output_hsl_dataset=execution.output_file(prefix + "_HSL+*.HEAD"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dVecRgbtoHslOutputs",
    "V_3D_VEC_RGBTO_HSL_METADATA",
    "v_3d_vec_rgbto_hsl",
]
