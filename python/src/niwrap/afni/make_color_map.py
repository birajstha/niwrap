# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

MAKE_COLOR_MAP_METADATA = Metadata(
    id="064d1eb4179e91c01d248248dfa29726fd51d4c4",
    name="MakeColorMap",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="custom/makecolormap:latest",
)


class MakeColorMapOutputs(typing.NamedTuple):
    """
    Output object returned when calling `make_color_map(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    afni_hex_output_prefix: OutputPathType | None
    """Prefix for individual color values in AFNI Hex format."""
    palette_file_output: OutputPathType
    """Example palette file output."""


def make_color_map(
    fiducials_ncol: InputPathType | None = None,
    fiducials: InputPathType | None = None,
    num_colors: float | int | None = None,
    std_mapname: str | None = None,
    palette_file: InputPathType | None = None,
    cmap_name: str | None = None,
    fscolut_labels: list[float | int] | None = None,
    fscolut_file: InputPathType | None = None,
    afni_hex: str | None = None,
    afni_hex_complete: str | None = None,
    suma_colormap: str | None = None,
    user_colut_file: InputPathType | None = None,
    sdset: InputPathType | None = None,
    sdset_prefix: str | None = None,
    flipupdown: bool = False,
    skip_last: bool = False,
    show_fscolut: bool = False,
    help_flag: bool = False,
    help_full_flag: bool = False,
    flip_map_updside_down: bool = False,
    runner: Runner | None = None,
) -> MakeColorMapOutputs:
    """
    MakeColorMap by Ziad S. Saad & Rick R. Reynolds SSCC/NIMH/NIH.
    
    Utility for creating and modifying colormaps with various formats and
    fiducial points.
    
    Args:
        fiducials_ncol: Fiducial colors and their indices in the color map are\
            listed in file Fiducials_Ncol.
        fiducials: Fiducial colors are listed in an ascii file Fiducials.
        num_colors: Total number of colors in the color map.
        std_mapname: Returns one of SUMA's standard colormaps.
        palette_file: Specify the palette file for colormap.
        cmap_name: Specify the colormap name.
        fscolut_labels: Get AFNI/SUMA colormaps of FreeSurfer colors indexed\
            between lbl0 and lbl1.
        fscolut_file: Use color LUT file FS_COL_LUT.
        afni_hex: Afni Hex format. Use this option if you want a color map\
            formatted to fit in AFNI's .afnirc file.
        afni_hex_complete: Afni Hex format, ready to go into pbardefs.h.
        suma_colormap: Write colormap in SUMA's format.
        user_colut_file: Provide a user's own color lookup file.
        sdset: Add colormap to surface-based dataset DSET, making it a labeled\
            dataset.
        sdset_prefix: Prefix of dset for writing labeled version of DSET.
        flipupdown: Flip the map upside down.
        skip_last: If used, the last color in the Fiducial list is omitted.
        show_fscolut: Show all of the FreeSurfer LUT.
        help_flag: Displays the help message.
        help_full_flag: Displays the help message.
        flip_map_updside_down: Flip the map upside down.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakeColorMapOutputs`).
    """
    runner = runner or get_global_runner()
    if fscolut_labels is not None and (len(fscolut_labels) != 2): 
        raise ValueError(f"Length of 'fscolut_labels' must be 2 but was {len(fscolut_labels)}")
    execution = runner.start_execution(MAKE_COLOR_MAP_METADATA)
    cargs = []
    cargs.append("MakeColorMap")
    cargs.append("[OPTIONS]")
    ret = MakeColorMapOutputs(
        root=execution.output_file("."),
        afni_hex_output_prefix=execution.output_file(f"{afni_hex}_01", optional=True) if afni_hex is not None and afni_hex_complete is not None else None,
        palette_file_output=execution.output_file(f"TestPalette.pal", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "MAKE_COLOR_MAP_METADATA",
    "MakeColorMapOutputs",
    "make_color_map",
]
