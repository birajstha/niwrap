# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

SURF_MESH_METADATA = Metadata(
    id="3d5e733be2ff494861e48de4eba7edc3c02ead0a",
    name="SurfMesh",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="user/surfmesh:latest",
)


class SurfMeshOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surf_mesh(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_surface_file: OutputPathType
    """Output surface file"""


def surf_mesh(
    input_surface: str,
    output_surface: str,
    edge_fraction: float | int,
    surface_volume: InputPathType | None = None,
    one_state: bool = False,
    anatomical_label: bool = False,
    no_volume_registration: bool = False,
    set_env: str | None = None,
    runner: Runner | None = None,
) -> SurfMeshOutputs:
    """
    SurfMesh by Jakub Otwinowski, maintained by Ziad S. Saad SSCC/NIMH/NIH.
    
    Surface mesh manipulation tool.
    
    Args:
        input_surface: Input surface file with specified type.
        output_surface: Output surface file with specified type.
        edge_fraction: Fraction of edges to simplify the surface.
        surface_volume: Surface volume file.
        one_state: Make all input surfaces have the same state.
        anatomical_label: Label all input surfaces as anatomically correct.
        no_volume_registration: Ignore any Rotate, Volreg, Tagalign, or\
            WarpDrive transformations present in the Surface Volume.
        set_env: Set environment variable.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfMeshOutputs`).
    """
    runner = runner or get_global_runner()
    if not (0 <= edge_fraction <= 1): 
        raise ValueError(f"'edge_fraction' must be between 0 <= x <= 1 but was {edge_fraction}")
    execution = runner.start_execution(SURF_MESH_METADATA)
    cargs = []
    cargs.append("SurfMesh")
    cargs.append("<-i_TYPE")
    cargs.append("SURFACE>")
    cargs.append("<-o_TYPE")
    cargs.append("OUTPUT>")
    cargs.append("<-edges")
    cargs.append("FRAC>")
    cargs.append("[-sv")
    cargs.append("SURF_VOL]")
    ret = SurfMeshOutputs(
        root=execution.output_file("."),
        output_surface_file=execution.output_file(f"{output_surface}.surface", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SURF_MESH_METADATA",
    "SurfMeshOutputs",
    "surf_mesh",
]
