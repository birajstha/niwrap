# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V__TO_MNI_QWARPAR_METADATA = Metadata(
    id="1ef5d6f1fb1e02bb6da071aa6647473a679ffd3d",
    name="@toMNI_Qwarpar",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class VToMniQwarparOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v__to_mni_qwarpar(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output dataset created after processing."""


def v__to_mni_qwarpar(
    numcpu: float | int,
    numjob: float | int,
    runner: Runner | None = None,
) -> VToMniQwarparOutputs:
    """
    @toMNI_Qwarpar by AFNI Team.
    
    Transforms datasets to MNI space, then collectively re-transforms them to
    produce a refined average.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/@toMNI_Qwarpar.html
    
    Args:
        numcpu: TOTAL NUMBER OF CPUS TO USE; should not exceed the number of\
            CPUs (cores) on the system.
        numjob: MAX NUMBER OF JOBS TO USE; often set to the same value as\
            numcpu so that 1 dataset is processed in 1 core.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VToMniQwarparOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V__TO_MNI_QWARPAR_METADATA)
    cargs = []
    cargs.append("@toMNI_Qwarpar")
    ret = VToMniQwarparOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(f"*_uni+tlrc.HEAD"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "VToMniQwarparOutputs",
    "V__TO_MNI_QWARPAR_METADATA",
    "v__to_mni_qwarpar",
]
