# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

AFNI_PYTHON_WRAPPER_METADATA = Metadata(
    id="a88df47e02873d810dd3cddab5b92bf1e1bc84f6",
    name="afni_python_wrapper",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni:latest",
)


class AfniPythonWrapperOutputs(typing.NamedTuple):
    """
    Output object returned when calling `afni_python_wrapper(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def afni_python_wrapper(
    module: str | None = None,
    module_dir: bool = False,
    eval_: str | None = None,
    exec_: str | None = None,
    funchelp: str | None = None,
    print_: str | None = None,
    lprint: str | None = None,
    listfunc: str | None = None,
    help_: bool = False,
    runner: Runner | None = None,
) -> AfniPythonWrapperOutputs:
    """
    afni_python_wrapper by R Reynolds.
    
    Python wrapper to call AFNI functions from the shell.
    
    Args:
        module: Specify the python module to import.
        module_dir: Show the elements returned by dir().
        eval_: Evaluate STRING in context of MODULE.
        exec_: Execute STRING in context of MODULE.
        funchelp: Print the help for module function FUNC.
        print_: Print the result of executing STRING.
        lprint: Line print: print result list, one element per line.
        listfunc: Execute FUNC(LIST) with sub-options.
        help_: Show this help text.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AfniPythonWrapperOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(AFNI_PYTHON_WRAPPER_METADATA)
    cargs = []
    cargs.append("afni_python_wrapper.py")
    cargs.append("[FLAGS]")
    cargs.append("[ARGUMENTS]")
    ret = AfniPythonWrapperOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "AFNI_PYTHON_WRAPPER_METADATA",
    "AfniPythonWrapperOutputs",
    "afni_python_wrapper",
]
