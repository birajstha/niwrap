# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

PROMPT_POPUP_METADATA = Metadata(
    id="98bd167ed596604ba119f7fa728f43bd7b70ddef",
    name="prompt_popup",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class PromptPopupOutputs(typing.NamedTuple):
    """
    Output object returned when calling `prompt_popup(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def prompt_popup(
    message: str,
    message_pause: str | None = None,
    buttons: list[str] | None = None,
    buttons_b: list[str] | None = None,
    timeout: float | int | None = None,
    timeout_to: float | int | None = None,
    runner: Runner | None = None,
) -> PromptPopupOutputs:
    """
    prompt_popup by AFNI Team.
    
    A command-line tool that pops up a window prompting user interaction with a
    message and buttons.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/prompt_popup.html
    
    Args:
        message: Pops a window prompting the user with MESSAGE. If MESSAGE is\
            '-', it is read from stdin.
        message_pause: Same as -message to match the old prompt_user.
        buttons: What do you want the buttons to say? You can give up to three\
            -button for three buttons. Returns integer 1, 2, or 3. If there is no\
            -button, there will be one button 'Ok'.
        buttons_b: Same as -button.
        timeout: Timeout in seconds of prompt message. Default answer is\
            returned if TT seconds elapse without user input.
        timeout_to: Same as -timeout TT.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PromptPopupOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(PROMPT_POPUP_METADATA)
    cargs = []
    cargs.append("prompt_popup")
    cargs.append("-message")
    if message_pause is not None:
        cargs.extend(["-pause", message_pause])
    cargs.append("-button")
    if buttons_b is not None:
        cargs.extend(["-b", *buttons_b])
    cargs.append("-timeout")
    if timeout_to is not None:
        cargs.extend(["-to", str(timeout_to)])
    ret = PromptPopupOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "PROMPT_POPUP_METADATA",
    "PromptPopupOutputs",
    "prompt_popup",
]
