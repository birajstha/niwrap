# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_EDU_01_SCALE_METADATA = Metadata(
    id="ce7d535f0c9acb6bde53f8f956bcb3576bbda790",
    name="3dEdu_01_scale",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dEdu01ScaleOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_edu_01_scale(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Output scaled and/or masked copy of the [0]th volume of the input dataset"""


def v_3d_edu_01_scale(
    input_: InputPathType,
    mask: InputPathType | None = None,
    mult_factors: list[float | int] | None = None,
    option_flag: bool = False,
    runner: Runner | None = None,
) -> V3dEdu01ScaleOutputs:
    """
    3dEdu_01_scale by AFNI Team.
    
    Educational program to create a new AFNI program. Scales and masks dataset
    volumes.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dEdu_01_scale.html
    
    Args:
        input_: Input dataset.
        mask: Mask dataset on same grid/data structure as the input dataset.
        mult_factors: Numerical factors for multiplying each voxel; each voxel\
            is multiplied by both A and B.
        option_flag: Option flag to do something.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dEdu01ScaleOutputs`).
    """
    runner = runner or get_global_runner()
    if mult_factors is not None and (len(mult_factors) != 2): 
        raise ValueError(f"Length of 'mult_factors' must be 2 but was {len(mult_factors)}")
    execution = runner.start_execution(V_3D_EDU_01_SCALE_METADATA)
    cargs = []
    cargs.append("3dEdu_01_scale")
    cargs.append(execution.input_file(input_))
    if mask is not None:
        cargs.extend(["-mask", execution.input_file(mask)])
    if mult_factors is not None:
        cargs.extend(["-mult_facs", *map(str, mult_factors)])
    if option_flag:
        cargs.append("-some_opt")
    ret = V3dEdu01ScaleOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(f"OUT_edu_[1-9]*", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dEdu01ScaleOutputs",
    "V_3D_EDU_01_SCALE_METADATA",
    "v_3d_edu_01_scale",
]
