# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_TWOTO_COMPLEX_METADATA = Metadata(
    id="d4ba5b6cbfa3c4396c25f2f78d2e4533ed6f9ed8",
    name="3dTwotoComplex",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni:latest",
)


class V3dTwotoComplexOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_twoto_complex(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_brick: OutputPathType | None
    """Output complex-valued dataset with prefix"""
    out_head: OutputPathType | None
    """Header for the complex-valued dataset"""


def v_3d_twoto_complex(
    dataset1: InputPathType,
    dataset2: InputPathType | None = None,
    prefix: str | None = None,
    ri: bool = False,
    mp: bool = False,
    mask: InputPathType | None = None,
    runner: Runner | None = None,
) -> V3dTwotoComplexOutputs:
    """
    3dTwotoComplex by R. W. Cox.
    
    Converts 2 sub-bricks of input to a complex-valued dataset.
    
    Args:
        dataset1: Input dataset (either as 1 dataset with 2 sub-bricks or 2\
            separate datasets).
        dataset2: Second input dataset (optional if 2 sub-bricks in the first\
            dataset).
        prefix: Prefix for the output dataset [default='cmplx'].
        ri: Specify that the 2 inputs are real and imaginary parts [this is the\
            default].
        mp: Specify that the 2 inputs are magnitude and phase [phase is in\
            radians].
        mask: Only output nonzero values where the mask dataset is nonzero.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dTwotoComplexOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_TWOTO_COMPLEX_METADATA)
    cargs = []
    cargs.append("3dTwotoComplex")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(dataset1))
    if dataset2 is not None:
        cargs.append(execution.input_file(dataset2))
    ret = V3dTwotoComplexOutputs(
        root=execution.output_file("."),
        out_brick=execution.output_file(f"{prefix}+orig.BRIK", optional=True) if prefix is not None else None,
        out_head=execution.output_file(f"{prefix}+orig.HEAD", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dTwotoComplexOutputs",
    "V_3D_TWOTO_COMPLEX_METADATA",
    "v_3d_twoto_complex",
]
