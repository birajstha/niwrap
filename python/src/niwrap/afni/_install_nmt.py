# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

INSTALL_NMT_METADATA = Metadata(
    id="a5768d5fca94796db29fb14e23fbef82fdf7f0fc",
    name="Install_NMT",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class InstallNmtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `install_nmt(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def install_nmt(
    install_dir: str | None = None,
    version: str | None = None,
    variant: str | None = None,
    overwrite: bool = False,
    wget: bool = False,
    curl: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> InstallNmtOutputs:
    """
    Install_NMT by AFNI Team.
    
    Installs the NIMH Macaque Template (NMT) with the accompanying Cortical
    Hierarchy Atlas of the Rhesus Macaque (CHARM).
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/@Install_NMT.html
    
    Args:
        install_dir: The install location for the NMT.
        version: The version of the NMT you wish to install (valid options:\
            2.1, 2.0, 1.3, 1.2).
        variant: The NMT v2 has both a symmetric and asymmetric variant.\
            Specify as either 'sym' or 'asym'. Valid for NMT v2 only.
        overwrite: Allows the script to remove a pre-existing NMT directory.
        wget: Use wget to download archive. Script chooses by default with\
            preference for curl.
        curl: Use curl to download archive. Script chooses by default with\
            preference for curl.
        help_: Displays the help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `InstallNmtOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(INSTALL_NMT_METADATA)
    cargs = []
    cargs.append("Install_NMT")
    if install_dir is not None:
        cargs.append(install_dir)
    if version is not None:
        cargs.extend(["-nmt_ver", version])
    if variant is not None:
        cargs.extend(["-sym", variant])
    if overwrite:
        cargs.append("-overwrite")
    if wget:
        cargs.append("-wget")
    if curl:
        cargs.append("-curl")
    if help_:
        cargs.append("-help")
    ret = InstallNmtOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "INSTALL_NMT_METADATA",
    "InstallNmtOutputs",
    "install_nmt",
]
