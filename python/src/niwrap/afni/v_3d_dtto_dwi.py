# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_DTTO_DWI_METADATA = Metadata(
    id="e4d267cdbe32c1ab0f44d402ec5c2c8a1f9ad023",
    name="3dDTtoDWI",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni:latest",
)


class V3dDttoDwiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_dtto_dwi(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dwi: OutputPathType | None
    """Computed DWI images including sub-brick for each gradient vector."""


def v_3d_dtto_dwi(
    gradient_file: InputPathType,
    i0_dataset: InputPathType,
    dt_dataset: InputPathType,
    prefix: str | None = None,
    automask: bool = False,
    datum_type: str | None = None,
    scale_out_1000: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> V3dDttoDwiOutputs:
    """
    3dDTtoDWI by AFNI Development Team.
    
    Tool to compute multiple gradient images from tensors and gradient vector
    coordinates applied to the I0-dataset.
    
    Args:
        gradient_file: 1D file containing the gradient vectors (ASCII floats)\
            for non-zero gradients.
        i0_dataset: Volume without any gradient applied.
        dt_dataset: 6-sub-brick dataset containing the diffusion tensor data\
            (Dxx, Dxy, Dyy, Dxz, Dyz, Dzz).
        prefix: Prefix for the output dataset name.
        automask: Compute gradient images only for high-intensity (brain)\
            voxels.
        datum_type: Type of the output dataset (float, short, or byte).
        scale_out_1000: Match with 3dDWItoDT's '-scale_out_1000' functionality.
        help_: Show help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dDttoDwiOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_DTTO_DWI_METADATA)
    cargs = []
    cargs.append("3dDTtoDWI")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(gradient_file))
    cargs.append(execution.input_file(i0_dataset))
    cargs.append(execution.input_file(dt_dataset))
    ret = V3dDttoDwiOutputs(
        root=execution.output_file("."),
        output_dwi=execution.output_file(f"{prefix}*.HEAD", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dDttoDwiOutputs",
    "V_3D_DTTO_DWI_METADATA",
    "v_3d_dtto_dwi",
]
