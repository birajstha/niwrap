# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3D_PVMAP_METADATA = Metadata(
    id="c9c0f7bdcef01d199fecf0d69a9e74341706ea9a",
    name="3dPVmap",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="afni/afni_latest",
)


class V3dPvmapOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_pvmap(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outbrik: OutputPathType | None
    """Output PVmap file"""
    outhead: OutputPathType | None
    """Output PVmap header file"""
    pc_vectors: OutputPathType | None
    """Principal component time series vectors"""


def v_3d_pvmap(
    inputdataset: InputPathType,
    prefix: str | None = None,
    mask: InputPathType | None = None,
    automask: bool = False,
    runner: Runner | None = None,
) -> V3dPvmapOutputs:
    """
    3dPVmap by Zhark the Unprincipaled.
    
    Computes the first two principal component vectors of a time series dataset,
    then outputs the R-squared coefficient of each voxel time series with these
    first two components.
    
    Args:
        inputdataset: Input dataset (e.g., fred.nii).
        prefix: Output prefix for generated files.
        mask: Mask dataset (e.g., brainmask.nii).
        automask: Automatically generate a mask from the input dataset.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dPvmapOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_PVMAP_METADATA)
    cargs = []
    cargs.append("3dPVmap")
    if prefix is not None:
        cargs.extend(["-prefix", prefix])
    if mask is not None:
        cargs.extend(["-mask", execution.input_file(mask)])
    if automask:
        cargs.append("-automask")
    cargs.append(execution.input_file(inputdataset))
    ret = V3dPvmapOutputs(
        root=execution.output_file("."),
        outbrik=execution.output_file(f"{prefix}+orig.BRIK", optional=True) if prefix is not None else None,
        outhead=execution.output_file(f"{prefix}+orig.HEAD", optional=True) if prefix is not None else None,
        pc_vectors=execution.output_file(f"{prefix}.1D", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3dPvmapOutputs",
    "V_3D_PVMAP_METADATA",
    "v_3d_pvmap",
]
