# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

XYZ_TO_IJK_METADATA = Metadata(
    id="3e9343f139d0defe33841347c54faca4132d8d29",
    name="xyz_to_ijk",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class XyzToIjkOutputs(typing.NamedTuple):
    """
    Output object returned when calling `xyz_to_ijk(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType | None
    """Output file containing the translated indices"""


def xyz_to_ijk(
    inset: InputPathType,
    x_coord: float | int,
    y_coord: float | int,
    z_coord: float | int,
    prefix: str | None = None,
    runner: Runner | None = None,
) -> XyzToIjkOutputs:
    """
    xyz_to_ijk by AFNI Team.
    
    Helper script to convert (x, y, z) coordinates to (i, j, k) indices for a
    volumetric dataset.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/@xyz_to_ijk.html
    
    Args:
        inset: Volumetric file name (e.g. FILE.nii.gz).
        x_coord: Three coordinates (in units of the dataset, like mm).
        y_coord: Three coordinates (in units of the dataset, like mm).
        z_coord: Three coordinates (in units of the dataset, like mm).
        prefix: File name (including path) to output the three indices.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `XyzToIjkOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(XYZ_TO_IJK_METADATA)
    cargs = []
    cargs.append("@xyz_to_ijk")
    cargs.append("-inset")
    cargs.append(execution.input_file(inset))
    cargs.append("-xyz")
    cargs.append(str(x_coord))
    cargs.append(str(y_coord))
    cargs.append(str(z_coord))
    if prefix is not None:
        cargs.extend(["-prefix", prefix])
    ret = XyzToIjkOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(f"{prefix}", optional=True) if prefix is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "XYZ_TO_IJK_METADATA",
    "XyzToIjkOutputs",
    "xyz_to_ijk",
]
