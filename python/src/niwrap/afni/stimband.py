# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

STIMBAND_METADATA = Metadata(
    id="195d334fb770bcd0400c07f238da38f00f9eaeb7",
    name="stimband",
)


class StimbandOutputs(typing.NamedTuple):
    """
    Output object returned when calling `stimband(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_band: OutputPathType
    """The frequency band covering at least 90% of the power of the stimulus columns."""


def stimband(
    matrixfiles: list[InputPathType],
    verbose_flag: bool = False,
    additional_matrixfiles: list[InputPathType] | None = None,
    min_freq: float | int | None = None,
    min_bwidth: float | int | None = None,
    min_pow: float | int | None = None,
    runner: Runner | None = None,
) -> StimbandOutputs:
    """
    stimband by RWCox.
    
    Determines frequency band covering at least 90% of the 'power' (|FFT|^2) of
    stimulus columns from X.nocensor.xmat.1D files.
    
    Args:
        matrixfiles: Path to matrix files.
        verbose_flag: Print the power band for each individual stimulus column\
            from each matrix.
        additional_matrixfiles: Another way to read 1 or more matrix files.
        min_freq: Set the minimum frequency output for the band. Default value\
            is 0.01.
        min_bwidth: Set the minimum bandwidth output (top frequency minus\
            bottom frequency). Default is 0.03.
        min_pow: Set the minimum power fraction (percentage) to 'ff' instead of\
            the default 90%. Value must be in the range 50..99.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `StimbandOutputs`).
    """
    runner = runner or get_global_runner()
    if min_pow is not None and not (50 <= min_pow <= 99): 
        raise ValueError(f"'min_pow' must be between 50 <= x <= 99 but was {min_pow}")
    execution = runner.start_execution(STIMBAND_METADATA)
    cargs = []
    cargs.append("stimband")
    if verbose_flag:
        cargs.append("-verb")
    cargs.append("[MATRIXFILES...]")
    cargs.append("[ADDITIONAL_MATRIXFILES...]")
    if min_freq is not None:
        cargs.extend(["-min_freq", str(min_freq)])
    if min_bwidth is not None:
        cargs.extend(["-min_bwidth", str(min_bwidth)])
    if min_pow is not None:
        cargs.extend(["-min_pow", str(min_pow)])
    ret = StimbandOutputs(
        root=execution.output_file("."),
        output_band=execution.output_file(f"stdout"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "STIMBAND_METADATA",
    "StimbandOutputs",
    "stimband",
]
