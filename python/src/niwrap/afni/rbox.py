# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

RBOX_METADATA = Metadata(
    id="4a95fe277a2eeb4e1d40b09f17696f0834550003",
    name="rbox",
)


class RboxOutputs(typing.NamedTuple):
    """
    Output object returned when calling `rbox(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def rbox(
    number_points: str,
    dimension: str | None = None,
    unit_cube: bool = False,
    unit_diamond: bool = False,
    spiral: bool = False,
    regular_polygon: bool = False,
    cospherical_points: bool = False,
    simplex_points: bool = False,
    simplex_plus_points: bool = False,
    add_point: list[str] | None = None,
    lens_distribution: str | None = None,
    mesh_lattice: list[str] | None = None,
    random_within: bool = False,
    random_disk: str | None = None,
    bounding_box: float | int | None = None,
    homogeneous_coordinates: bool = False,
    remove_command_line: bool = False,
    offset: float | int | None = None,
    time_seed: bool = False,
    user_seed: float | int | None = None,
    integer_coordinates: bool = False,
    runner: Runner | None = None,
) -> RboxOutputs:
    """
    rbox.
    
    Generate various point distributions. Default is random in cube.
    
    Args:
        number_points: Number of random points in cube, lens, spiral, sphere or\
            grid.
        dimension: Dimension (e.g., D3 for 3-d).
        unit_cube: Add a unit cube to the output (optional: 'c G2.0' sets size).
        unit_diamond: Add a unit diamond to the output (optional: 'd G2.0' sets\
            size).
        spiral: Generate a regular 3-d spiral.
        regular_polygon: Generate a regular polygon (optional: 'r s Z1 G0.1'\
            makes a cone).
        cospherical_points: Generate cospherical points.
        simplex_points: Generate random points in simplex, may use 'r' or 'Wn'.
        simplex_plus_points: Same as 'x', plus simplex.
        add_point: Add point [n,m,r] first, pads with 0.
        lens_distribution: Lens distribution of radius n. Also 's', 'r', 'G',\
            'W'.
        mesh_lattice: Lattice (Mesh) rotated by [n,-m,0], [m,n,0], [0,0,r], ...
        random_within: Random distribution within 0.1 of the cube's or sphere's\
            surface.
        random_disk: Random points in a 0.5 disk projected to a sphere,\
            optional gap size (e.g., 'Z0.5 s G0.6').
        bounding_box: Bounding box coordinates, default 0.5.
        homogeneous_coordinates: Output as homogeneous coordinates for cdd.
        remove_command_line: Remove command line from the first line of output.
        offset: Offset coordinates by n.
        time_seed: Use time as the random number seed (default is command line).
        user_seed: Use n as the random number seed.
        integer_coordinates: Print integer coordinates, default 'Bn' is 1e+06.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RboxOutputs`).
    """
    runner = runner or get_global_runner()
    if add_point is not None and not (1 <= len(add_point)): 
        raise ValueError(f"Length of 'add_point' must be greater than 1 but was {len(add_point)}")
    if mesh_lattice is not None and not (3 <= len(mesh_lattice)): 
        raise ValueError(f"Length of 'mesh_lattice' must be greater than 3 but was {len(mesh_lattice)}")
    execution = runner.start_execution(RBOX_METADATA)
    cargs = []
    cargs.append("rbox")
    cargs.append(number_points)
    if dimension is not None:
        cargs.append(dimension)
    if integer_coordinates:
        cargs.append("z")
    if bounding_box is not None:
        cargs.extend(["B", str(bounding_box)])
    if offset is not None:
        cargs.extend(["O", str(offset)])
    if user_seed is not None:
        cargs.extend(["t", str(user_seed)])
    if mesh_lattice is not None:
        cargs.extend(["M", *mesh_lattice])
    ret = RboxOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "RBOX_METADATA",
    "RboxOutputs",
    "rbox",
]
