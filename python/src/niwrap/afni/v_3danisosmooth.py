# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

V_3DANISOSMOOTH_METADATA = Metadata(
    id="9e7900e8c0f3ee921e7ad7598786b9e3a00cdbcb",
    name="3danisosmooth",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3danisosmoothOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3danisosmooth(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dataset: OutputPathType | None
    """Output dataset after anisotropic smoothing"""
    gradient_data: OutputPathType
    """Gradient dataset saved at each iteration"""
    eigens_data: OutputPathType
    """Eigens dataset saved at each iteration"""
    phi_data: OutputPathType
    """Phi dataset saved at each iteration"""
    dtensor_data: OutputPathType
    """Dtensor dataset saved at each iteration"""
    ematrix_data: OutputPathType
    """Ematrix dataset saved at the first sub-brick iteration"""
    flux_data: OutputPathType
    """Flux dataset saved at the first sub-brick iteration"""
    gmatrix_data: OutputPathType
    """Gmatrix dataset saved at the first sub-brick iteration"""
    diff_measures_data: OutputPathType
    """Dataset containing FA, MD, Cl, Cp, and Cs values saved at each iteration"""


def v_3danisosmooth(
    input_dataset: InputPathType,
    prefix: str | None = None,
    iterations: float | int | None = None,
    v_2d_flag: bool = False,
    v_3d_flag: bool = False,
    mask_dataset: InputPathType | None = None,
    automask_flag: bool = False,
    viewer_flag: bool = False,
    nosmooth_flag: bool = False,
    sigma1: float | int | None = None,
    sigma2: float | int | None = None,
    deltat: float | int | None = None,
    savetempdata_flag: bool = False,
    save_temp_with_diff_measures_flag: bool = False,
    phiding_flag: bool = False,
    phiexp_flag: bool = False,
    noneg_flag: bool = False,
    setneg_value: float | int | None = None,
    edgefraction: float | int | None = None,
    datum_type: str | None = None,
    matchorig_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> V3danisosmoothOutputs:
    """
    3danisosmooth by AFNI Team.
    
    Smooths a dataset using an anisotropic smoothing technique.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/3danisosmooth.html
    
    Args:
        input_dataset: Input dataset to be smoothed.
        prefix: Output dataset prefix name.
        iterations: Number of iterations (default=10).
        v_2d_flag: Smooth a slice at a time (default).
        v_3d_flag: Smooth through slices.
        mask_dataset: Use specified dataset as mask to include/exclude voxels.
        automask_flag: Automatically compute mask for dataset.
        viewer_flag: Show central axial slice image every iteration.
        nosmooth_flag: Do not do intermediate smoothing of gradients.
        sigma1: Gaussian smoothing sigma before gradient computation\
            (default=0.5).
        sigma2: Gaussian smoothing sigma after gradient computation\
            (default=1.0).
        deltat: Pseudo-time step (default=0.25).
        savetempdata_flag: Save temporary datasets each iteration.
        save_temp_with_diff_measures_flag: Save temporary datasets with\
            different measures in a dataset.
        phiding_flag: Use Ding method for computing phi (default).
        phiexp_flag: Use exponential method for computing phi.
        noneg_flag: Set negative voxels to 0.
        setneg_value: Set negative voxels to specified value.
        edgefraction: Adjust the fraction of the anisotropic component added (0\
            to 1, default=0.5).
        datum_type: Specify type for output data (byte, short, float)\
            [default=float].
        matchorig_flag: Match datum type and clip min/max to input data.
        help_flag: Print help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3danisosmoothOutputs`).
    """
    runner = runner or get_global_runner()
    if edgefraction is not None and not (0 <= edgefraction <= 1): 
        raise ValueError(f"'edgefraction' must be between 0 <= x <= 1 but was {edgefraction}")
    execution = runner.start_execution(V_3DANISOSMOOTH_METADATA)
    cargs = []
    cargs.append("3danisosmooth")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(input_dataset))
    ret = V3danisosmoothOutputs(
        root=execution.output_file("."),
        output_dataset=execution.output_file(f"{prefix}+smooth", optional=True) if prefix is not None else None,
        gradient_data=execution.output_file(f"Gradient.ITER", optional=True),
        eigens_data=execution.output_file(f"Eigens.ITER", optional=True),
        phi_data=execution.output_file(f"phi.ITER", optional=True),
        dtensor_data=execution.output_file(f"Dtensor.ITER", optional=True),
        ematrix_data=execution.output_file(f"Ematrix.ITER", optional=True),
        flux_data=execution.output_file(f"Flux.ITER", optional=True),
        gmatrix_data=execution.output_file(f"Gmatrix.ITER", optional=True),
        diff_measures_data=execution.output_file(f"Diff_measures.ITER", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "V3danisosmoothOutputs",
    "V_3DANISOSMOOTH_METADATA",
    "v_3danisosmooth",
]
