# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

SPHARM_DECO_METADATA = Metadata(
    id="736cc426b32afa9f45af45a7cf3d0b090c27d0b8",
    name="SpharmDeco",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class SpharmDecoOutputs(typing.NamedTuple):
    """
    Output object returned when calling `spharm_deco(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    harmonics_file: OutputPathType
    """File for harmonics of each order l."""
    beta_coefficients: OutputPathType
    """Beta coefficients for each data column."""
    reconstructed_data: OutputPathType
    """Reconstructed data or surface files named based on PREFIX."""


def spharm_deco(
    i_type_s: InputPathType,
    unit_sph_label: str,
    order_l: float | int,
    i_type_sd: list[InputPathType] | None = None,
    data_d: InputPathType | None = None,
    bases_prefix: str | None = None,
    prefix: str | None = None,
    o_type_sdr: list[InputPathType] | None = None,
    debug: float | int | None = None,
    sigma: float | int | None = None,
    runner: Runner | None = None,
) -> SpharmDecoOutputs:
    """
    SpharmDeco by AFNI Team.
    
    Spherical Harmonics Decomposition of a surface's coordinates or data.
    
    More information:
    https://afni.nimh.nih.gov/pub/dist/doc/program_help/SpharmDeco.html
    
    Args:
        i_type_s: Unit sphere, isotopic to the surface domain over which the\
            data to be decomposed is defined.
        unit_sph_label: Label of the unit sphere.
        order_l: Decomposition order.
        i_type_sd: A surface whose node coordinates provide data vectors (X, Y,\
            Z) to be decomposed or a dataset whose columns are to be individually\
            decomposed. You can specify multiple surfaces to be processed.
        data_d: Data vectors to be decomposed.
        bases_prefix: Save the basis functions under the prefix BASES_PREFIX.
        prefix: Write out the reconstructed data into dataset PREFIX and write\
            the beta coefficients for each processed data column.
        o_type_sdr: Write out a new surface with reconstructed coordinates.
        debug: Debug levels (1-3).
        sigma: Smoothing parameter (0 .. 0.001) which weighs down the\
            contribution of higher order harmonics.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SpharmDecoOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SPHARM_DECO_METADATA)
    cargs = []
    cargs.append("SpharmDeco")
    cargs.append("<-i_TYPE")
    cargs.append("S>")
    cargs.append("-unit_sph")
    cargs.append("UNIT_SPH_LABEL>")
    cargs.append("<-l")
    cargs.append("L>")
    cargs.append("[<-i_TYPE")
    cargs.append("SD>")
    cargs.append("...")
    cargs.append("|")
    cargs.append("<-data")
    cargs.append("D>]")
    cargs.append("[-bases_prefix")
    cargs.append("BASES]")
    cargs.append("[<-prefix")
    cargs.append("PREFIX>]")
    cargs.append("[<-o_TYPE")
    cargs.append("SDR>")
    cargs.append("...]")
    cargs.append("[-debug")
    cargs.append("DBG]")
    cargs.append("[-sigma")
    cargs.append("s]")
    ret = SpharmDecoOutputs(
        root=execution.output_file("."),
        harmonics_file=execution.output_file(f"BASES_PREFIX.sph*.1D", optional=True),
        beta_coefficients=execution.output_file(f"PREFIX.beta.col*.1D.dset", optional=True),
        reconstructed_data=execution.output_file(f"<PREFIX>_reconstructed", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SPHARM_DECO_METADATA",
    "SpharmDecoOutputs",
    "spharm_deco",
]
