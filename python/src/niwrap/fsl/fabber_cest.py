# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FABBER_CEST_METADATA = Metadata(
    id="f41f994205ab0577e2024e6f867e363dc66df9aa",
    name="fabber_cest",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="fsl/fabber:latest",
)


class FabberCestOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fabber_cest(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    logfile: OutputPathType
    """Log file"""
    modelfit_out: OutputPathType
    """Model fit output as a 4d volume"""
    residuals_out: OutputPathType
    """Residuals output as a 4d volume"""
    modelextras_out: OutputPathType
    """Model extras output"""
    mvn_out: OutputPathType
    """Final MVN distributions output"""
    mean_out: OutputPathType
    """Parameter means output"""
    std_out: OutputPathType
    """Parameter standard deviations output"""
    var_out: OutputPathType
    """Parameter variances output"""
    zstat_out: OutputPathType
    """Parameter Z statistics output"""
    noise_mean_out: OutputPathType
    """Noise means output"""
    noise_std_out: OutputPathType
    """Noise standard deviations output"""
    free_energy_out: OutputPathType
    """Free energy output"""


def fabber_cest(
    output: str,
    method: str,
    model: str,
    data: InputPathType,
    help_: bool = False,
    listmethods: bool = False,
    listmodels: bool = False,
    listparams: bool = False,
    descparams: bool = False,
    listoutputs: bool = False,
    evaluate: str | None = None,
    evaluate_params: str | None = None,
    evaluate_nt: int | None = None,
    simple_output: bool = False,
    overwrite: bool = False,
    link_to_latest: bool = False,
    loadmodels: InputPathType | None = None,
    data_multi: InputPathType | None = None,
    data_order: str | None = "interleave",
    mask: InputPathType | None = None,
    masked_timepoints: int | None = None,
    suppdata: InputPathType | None = None,
    dump_param_names: bool = False,
    save_model_fit: bool = False,
    save_residuals: bool = False,
    save_model_extras: bool = False,
    save_mvn: bool = False,
    save_mean: bool = False,
    save_std: bool = False,
    save_var: bool = False,
    save_zstat: bool = False,
    save_noise_mean: bool = False,
    save_noise_std: bool = False,
    save_free_energy: bool = False,
    optfile: InputPathType | None = None,
    debug: bool = False,
    runner: Runner = None,
) -> FabberCestOutputs:
    """
    fabber_cest by FMRIB Centre, University of Oxford.
    
    Fabber Model-based Analysis.
    
    More information: https://fabber.gitlab.io
    
    Args:
        output: Directory for output files
        method: Inference method
        model: Forward model
        data: Input data file
        help_: Print usage help
        listmethods: List all known inference methods
        listmodels: List all known forward models
        listparams: List model parameters
        descparams: Describe model parameters
        listoutputs: List additional model outputs
        evaluate: Evaluate model and set to name of output required
        evaluate_params: List of parameter values for evaluation
        evaluate_nt: Number of time points for evaluation
        simple_output: Simple output series of lines each giving progress as
            percentage
        overwrite: Overwrite existing output
        link_to_latest: Create a link to the most recent output directory with
            the prefix _latest
        loadmodels: Load models dynamically from the specified filename
        data_multi: Specify multiple data files (data<n>)
        data_order: Handling of multiple data files (concatenate or interleave)
        mask: Mask file. Inference performed where mask value > 0
        masked_timepoints: List of masked time points to ignore (mt<n>)
        suppdata: Supplemental timeseries data required for some models
        dump_param_names: Write the file paramnames.txt containing the names of
            the model parameters
        save_model_fit: Output the model prediction as a 4d volume
        save_residuals: Output the residuals (difference between the data and
            the model prediction)
        save_model_extras: Output additional model-specific timeseries data
        save_mvn: Output the final MVN distributions.
        save_mean: Output the parameter means.
        save_std: Output the parameter standard deviations.
        save_var: Output the parameter variances.
        save_zstat: Output the parameter Zstats.
        save_noise_mean: Output the noise means.
        save_noise_std: Output the noise standard deviations.
        save_free_energy: Output the free energy, if calculated.
        optfile: File containing additional options, one per line, in the same
            form as specified on the command line
        debug: Output large amounts of debug information. ONLY USE WITH VERY
            SMALL NUMBERS OF VOXELS
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `FabberCestOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FABBER_CEST_METADATA)
    cargs = []
    cargs.append("fabber")
    cargs.append("[--<option>")
    cargs.append("|")
    cargs.append("--<option>=<value>")
    cargs.append("...]")
    ret = FabberCestOutputs(
        root=execution.output_file("."),
        logfile=execution.output_file(f"{output}/logfile.log"),
        modelfit_out=execution.output_file(f"{output}/model_fit.nii.gz", optional=True),
        residuals_out=execution.output_file(f"{output}/residuals.nii.gz", optional=True),
        modelextras_out=execution.output_file(f"{output}/model_extras.nii.gz", optional=True),
        mvn_out=execution.output_file(f"{output}/mvn.nii.gz", optional=True),
        mean_out=execution.output_file(f"{output}/mean.nii.gz", optional=True),
        std_out=execution.output_file(f"{output}/std.nii.gz", optional=True),
        var_out=execution.output_file(f"{output}/var.nii.gz", optional=True),
        zstat_out=execution.output_file(f"{output}/zstat.nii.gz", optional=True),
        noise_mean_out=execution.output_file(f"{output}/noise_mean.nii.gz", optional=True),
        noise_std_out=execution.output_file(f"{output}/noise_std.nii.gz", optional=True),
        free_energy_out=execution.output_file(f"{output}/free_energy.nii.gz", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FABBER_CEST_METADATA",
    "FabberCestOutputs",
    "fabber_cest",
]
