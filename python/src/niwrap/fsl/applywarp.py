# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

APPLYWARP_METADATA = Metadata(
    id="fefcac37cbcbd7863664493533af8c0129a2ea98",
    name="applywarp",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="mcin/docker-fsl:6.0.5",
)


class ApplywarpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `applywarp(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    warped_output_file: OutputPathType
    """Warped output image"""


def applywarp(
    input_file: InputPathType,
    reference_file: InputPathType,
    output_file: str,
    warp_coeff_file: InputPathType | None = None,
    absolute_warp: bool = False,
    relative_warp: bool = False,
    datatype: str | None = None,
    supersampling: bool = False,
    superlevel: str | None = None,
    pre_transform: InputPathType | None = None,
    post_transform: InputPathType | None = None,
    mask: InputPathType | None = None,
    interpolation: str | None = None,
    padding_size: float | int | None = None,
    use_sqform: bool = False,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner = None,
) -> ApplywarpOutputs:
    """
    applywarp by University of Oxford (Jesper Andersson).
    
    Apply a warp to an image using FSL's applywarp utility.
    
    More information: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FNIRT/Applywarp
    
    Args:
        input_file: Filename of input image (to be warped)
        reference_file: Filename for reference image
        output_file: Filename for output (warped) image
        warp_coeff_file: Filename for warp/coefficient (volume)
        absolute_warp: Treat warp field as absolute: x' = w(x)
        relative_warp: Treat warp field as relative: x' = x + w(x)
        datatype: Force output data type [char short int float double]
        supersampling: Intermediary supersampling of output, default is off
        superlevel: Level of intermediary supersampling, 'a' for automatic or
            integer level. Default = 2
        pre_transform: Filename for pre-transform (affine matrix)
        post_transform: Filename for post-transform (affine matrix)
        mask: Filename for mask image (in reference space)
        interpolation: Interpolation method {nn,trilinear,sinc,spline}
        padding_size: Extrapolates outside original volume by n voxels
        use_sqform: Use s/qforms of --ref and --in images
        verbose_flag: Switch on diagnostic messages
        help_flag: Display help message
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `ApplywarpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(APPLYWARP_METADATA)
    cargs = []
    cargs.append("applywarp")
    cargs.append("-i")
    cargs.extend(["-i", execution.input_file(input_file)])
    cargs.append("-o")
    cargs.extend(["-o", output_file])
    cargs.append("-r")
    cargs.extend(["-r", execution.input_file(reference_file)])
    cargs.append("-w")
    if warp_coeff_file is not None:
        cargs.extend(["-w", execution.input_file(warp_coeff_file)])
    cargs.append("--usesqform")
    ret = ApplywarpOutputs(
        root=execution.output_file("."),
        warped_output_file=execution.output_file(f"{output_file}.nii.gz"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "APPLYWARP_METADATA",
    "ApplywarpOutputs",
    "applywarp",
]
