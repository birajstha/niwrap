# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FDR_METADATA = Metadata(
    id="5b6b2db6e51b0609d2379637df25f3975260d983",
    name="fdr",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="mcin/docker-fsl:6.0.5",
)


class FdrOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fdr(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_adjusted: OutputPathType | None
    """Output FDR-adjusted p-values image"""
    output_thresholded: OutputPathType
    """Thresholded output p-value image"""
    output_order: OutputPathType
    """Output order values image"""


def fdr(
    infile: InputPathType,
    maskfile: InputPathType | None = None,
    qvalue: float | int | None = None,
    adjustedimage: str | None = None,
    othresh_flag: bool = False,
    order_flag: bool = False,
    oneminusp_flag: bool = False,
    positive_corr_flag: bool = False,
    independent_flag: bool = False,
    conservative_flag: bool = False,
    debug_flag: bool = False,
    verbose_flag: bool = False,
    runner: Runner = None,
) -> FdrOutputs:
    """
    fdr by University of Oxford (Mark Jenkinson).
    
    False Discovery Rate (FDR) correction tool from FSL.
    
    More information: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        infile: Input p-value image file
        maskfile: Mask image file
        qvalue: Q-value (FDR) threshold
        adjustedimage: Output image with FDR-adjusted p-values
        othresh_flag: Output a thresholded p-value image
        order_flag: Output image of order values
        oneminusp_flag: Treat input as 1-p (also save output like this)
        positive_corr_flag: Use FDR correction factor that assumes positive
            correlation
        independent_flag: Use FDR correction factor that assumes independence
        conservative_flag: Use conservative FDR correction factor (allows for
            any correlation)
        debug_flag: Switch on debugging output
        verbose_flag: Switch on diagnostic messages
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `FdrOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FDR_METADATA)
    cargs = []
    cargs.append("fdr")
    cargs.append("-i")
    cargs.extend(["-i", execution.input_file(infile)])
    if maskfile is not None:
        cargs.extend(["-m", execution.input_file(maskfile)])
    if qvalue is not None:
        cargs.extend(["-q", str(qvalue)])
    if adjustedimage is not None:
        cargs.extend(["-a", adjustedimage])
    if othresh_flag:
        cargs.append("--othresh")
    if order_flag:
        cargs.append("--order")
    if oneminusp_flag:
        cargs.append("--oneminusp")
    if positive_corr_flag:
        cargs.append("--positivecorr")
    if independent_flag:
        cargs.append("--independent")
    if conservative_flag:
        cargs.append("--conservative")
    if debug_flag:
        cargs.append("--debug")
    if verbose_flag:
        cargs.append("-v")
    ret = FdrOutputs(
        root=execution.output_file("."),
        output_adjusted=execution.output_file(f"{adjustedimage}.nii.gz", optional=True) if adjustedimage is not None else None,
        output_thresholded=execution.output_file(f"{pathlib.Path(infile).name}_thr.nii.gz", optional=True),
        output_order=execution.output_file(f"{pathlib.Path(infile).name}_order.nii.gz", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FDR_METADATA",
    "FdrOutputs",
    "fdr",
]
