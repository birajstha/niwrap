# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FEATREGAPPLY_METADATA = Metadata(
    id="5262490489b1d99599c503de01b6543cb9ff852f",
    name="featregapply",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="mcin/docker-fsl:latest",
)


class FeatregapplyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `featregapply(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_directory: OutputPathType
    """Directory where the output files will be stored"""


def featregapply(
    feat_directory: str,
    force_flag: bool = False,
    cleanup_flag: bool = False,
    upsample_trilinear: InputPathType | None = None,
    upsample_spline: InputPathType | None = None,
    standard_space_res: float | int | None = None,
    exclude_filtered_func_flag: bool = False,
    runner: Runner = None,
) -> FeatregapplyOutputs:
    """
    featregapply by Oxford Centre for Functional MRI of the Brain (FMRIB).
    
    Apply registration from FEAT analysis to other images.
    
    More information: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FEAT
    
    Args:
        feat_directory: FEAT directory from which registration will be taken
        force_flag: Force featregapply to run even if it has already been run on
            this FEAT directory
        cleanup_flag: Cleanup, i.e. remove all featregapply output
        upsample_trilinear: Upsample functional-space image to standard space
            using trilinear interpolation
        upsample_spline: Upsample functional-space image to standard space using
            spline (like sinc) interpolation
        standard_space_res: Specify the standard space resolution for melodic
            (e.g. 3 for 3mm)
        exclude_filtered_func_flag: Exclude filtered func when processing
            melodic directories (for FEAT directories filtered func is never
            processed)
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `FeatregapplyOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FEATREGAPPLY_METADATA)
    cargs = []
    cargs.append("featregapply")
    cargs.append(feat_directory)
    if force_flag:
        cargs.append("-f")
    if cleanup_flag:
        cargs.append("-c")
    if upsample_trilinear is not None:
        cargs.extend(["-l", execution.input_file(upsample_trilinear)])
    if upsample_spline is not None:
        cargs.extend(["-s", execution.input_file(upsample_spline)])
    if standard_space_res is not None:
        cargs.extend(["-r", str(standard_space_res)])
    if exclude_filtered_func_flag:
        cargs.append("-e")
    ret = FeatregapplyOutputs(
        root=execution.output_file("."),
        output_directory=execution.output_file(f"{feat_directory}/reg_standard", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FEATREGAPPLY_METADATA",
    "FeatregapplyOutputs",
    "featregapply",
]
