# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

ANATOMICAL_AVERAGE_METADATA = Metadata(
    id="782e6403c6c941da7c074df3059e57b5316836fd",
    name="AnatomicalAverage",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="brainimagingcenter/anatomicalaverage:latest",
)


class AnatomicalAverageOutputs(typing.NamedTuple):
    """
    Output object returned when calling `anatomical_average(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    avg_output: OutputPathType
    """Averaged anatomical image"""


def anatomical_average(
    output_basename: str,
    input_images: list[InputPathType],
    standard_image: InputPathType | None = None,
    standard_brain_mask: InputPathType | None = None,
    no_crop_flag: bool = False,
    work_dir: str | None = None,
    brainsize: float | int | None = None,
    noclean_flag: bool = False,
    verbose_flag: bool = False,
    runner: Runner = None,
) -> AnatomicalAverageOutputs:
    """
    AnatomicalAverage by Brain Imaging Center.
    
    Tool to create an anatomical average of input brain images.
    
    More information: https://example.com/anatomicalaverage
    
    Args:
        output_basename: Output basename
        input_images: List of input images
        standard_image: Standard image (default is MNI152_T1_2mm)
        standard_brain_mask: Standard brain mask (default is
            MNI152_T1_2mm_brain_mask_dil)
        no_crop_flag: Do not crop images
        work_dir: Local, temporary working directory (to be cleaned up - i.e.
            deleted)
        brainsize: Specify brainsize in mm for internal ROI (via robustfov)
        noclean_flag: Do not run the cleanup
        verbose_flag: Verbose output
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `AnatomicalAverageOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ANATOMICAL_AVERAGE_METADATA)
    cargs = []
    cargs.append("AnatomicalAverage")
    cargs.append("[OPTIONAL_ARGS]")
    cargs.append("-o")
    cargs.extend(["-o", output_basename])
    cargs.extend([execution.input_file(f) for f in input_images])
    ret = AnatomicalAverageOutputs(
        root=execution.output_file("."),
        avg_output=execution.output_file(f"{output_basename}_avg.nii.gz", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "ANATOMICAL_AVERAGE_METADATA",
    "AnatomicalAverageOutputs",
    "anatomical_average",
]
