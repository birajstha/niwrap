# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

TTOLOGP_METADATA = Metadata(
    id="ec7bd326f37ef20eb7460f2d41957799c29390d3",
    name="ttologp",
    container_image_type="docker",
    container_image_tag="mcin/fsl:6.0.5",
)


class TtologpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ttologp(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_logpvol: OutputPathType | None
    """Output volume for logp value"""


def ttologp(
    varsfile: InputPathType,
    cbsfile: InputPathType,
    dof: str,
    outputvol: str | None = "logps",
    help_flag: bool = False,
    runner: Runner | None = None,
) -> TtologpOutputs:
    """
    ttologp by Unknown.
    
    Tool for computing logp.
    
    Args:
        varsfile: Path to the vars file.
        cbsfile: Path to the cbs file.
        dof: Degree of freedom.
        outputvol: Output volume for logp value (default is logps).
        help_flag: Display help information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TtologpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TTOLOGP_METADATA)
    cargs = []
    cargs.append("ttologp")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(varsfile))
    cargs.append(execution.input_file(cbsfile))
    cargs.append(dof)
    ret = TtologpOutputs(
        root=execution.output_file("."),
        output_logpvol=execution.output_file(f"{outputvol}.nii.gz", optional=True) if outputvol is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "TTOLOGP_METADATA",
    "TtologpOutputs",
    "ttologp",
]
