# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FABBER_DCE_METADATA = Metadata(
    id="4491a828777b71d609d528943d4ca1a29026fb20",
    name="Fabber DCE",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="example/fabber_dce:latest",
)


class FabberDceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fabber_dce(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_files: OutputPathType
    """Files generated by Fabber DCE"""


def fabber_dce(
    output_directory: str,
    inference_method: str,
    forward_model: str,
    input_data: InputPathType,
    help_flag: bool = False,
    list_methods: bool = False,
    list_models: bool = False,
    list_params: bool = False,
    describe_params: bool = False,
    list_outputs: bool = False,
    evaluate_model: str | None = None,
    evaluate_params: list[float | int] = None,
    evaluate_nt: float | int | None = None,
    simple_output: bool = False,
    overwrite: bool = False,
    link_to_latest: bool = False,
    load_models: InputPathType | None = None,
    multiple_data: list[InputPathType] = None,
    data_order: str | None = "interleave",
    mask: InputPathType | None = None,
    masked_time_points: list[float | int] = None,
    supplemental_data: InputPathType | None = None,
    dump_param_names: bool = False,
    save_model_fit: bool = False,
    save_residuals: bool = False,
    save_model_extras: bool = False,
    save_mvn: bool = False,
    save_mean: bool = False,
    save_std: bool = False,
    save_variances: bool = False,
    save_zstat: bool = False,
    save_noise_mean: bool = False,
    save_noise_std: bool = False,
    save_free_energy: bool = False,
    option_file: InputPathType | None = None,
    debug: bool = False,
    runner: Runner = None,
) -> FabberDceOutputs:
    """
    Fabber DCE by FMRIB Analysis Group, University of Oxford.
    
    Fabber DCE analysis tool for model-based analysis of dynamic
    contrast-enhanced imaging data.
    
    More information: https://fabber-core.readthedocs.io/
    
    Args:
        output_directory: Directory for output files (including logfile).
        inference_method: Inference method to use.
        forward_model: Forward model to use.
        input_data: Single input data file.
        help_flag: Print this usage message.
        list_methods: List all known inference methods.
        list_models: List all known forward models.
        list_params: List model parameters (requires model configuration\
            options to be given).
        describe_params: Describe model parameters (name, description, units) -\
            requires model configuration options to be given.
        list_outputs: List additional model outputs (requires model\
            configuration options to be given).
        evaluate_model: Evaluate model. Set to name of output required or blank\
            for default output. Requires model configuration options,\
            --evaluate-params and --evaluate-nt.
        evaluate_params: List of parameter values for evaluation.
        evaluate_nt: Number of time points for evaluation - must be consistent\
            with model options where appropriate.
        simple_output: Instead of usual output, simply output series of lines\
            each giving progress as percentage.
        overwrite: If set will overwrite existing output. If not set, new\
            output directories will be created by appending '+' to the directory\
            name.
        link_to_latest: Try to create a link to the most recent output\
            directory with the prefix _latest.
        load_models: Load models dynamically from the specified filename, which\
            should be a DLL/shared library.
        multiple_data: Specify multiple data files for n=1, 2, 3...
        data_order: If multiple data files are specified, how they will be\
            handled: concatenate = one after the other, interleave = first record\
            from each file, then second, etc.
        mask: Mask file. Inference will only be performed where mask value > 0.
        masked_time_points: List of masked time points, indexed from 1. These\
            will be ignored in the parameter updates.
        supplemental_data: 'Supplemental' timeseries data, required for some\
            models.
        dump_param_names: Write the file paramnames.txt containing the names of\
            the model parameters.
        save_model_fit: Output the model prediction as a 4D volume.
        save_residuals: Output the residuals (difference between the data and\
            the model prediction).
        save_model_extras: Output any additional model-specific timeseries data.
        save_mvn: Output the final MVN distributions.
        save_mean: Output the parameter means.
        save_std: Output the parameter standard deviations.
        save_variances: Output the parameter variances.
        save_zstat: Output the parameter Z-stats.
        save_noise_mean: Output the noise means. The noise distribution\
            inferred is the precision of a Gaussian noise source.
        save_noise_std: Output the noise standard deviations.
        save_free_energy: Output the free energy, if calculated.
        option_file: File containing additional options, one per line, in the\
            same form as specified on the command line.
        debug: Output large amounts of debug information. ONLY USE WITH VERY\
            SMALL NUMBERS OF VOXELS.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FabberDceOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FABBER_DCE_METADATA)
    cargs = []
    cargs.append("fabber")
    cargs.extend(["--model", forward_model])
    cargs.extend(["--method", inference_method])
    cargs.extend(["--data", execution.input_file(input_data)])
    cargs.append("--output")
    cargs.extend(["--output", output_directory])
    cargs.append("[OPTIONS]")
    ret = FabberDceOutputs(
        root=execution.output_file("."),
        output_files=execution.output_file(f"{output_directory}/*"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FABBER_DCE_METADATA",
    "FabberDceOutputs",
    "fabber_dce",
]
