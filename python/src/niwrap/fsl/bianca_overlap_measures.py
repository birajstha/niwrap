# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

BIANCA_OVERLAP_MEASURES_METADATA = Metadata(
    id="affc13938fb461b4dabef46f4ef653416fe1632f",
    name="bianca_overlap_measures",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="mcin/docker-fsl:latest",
)


class BiancaOverlapMeasuresOutputs(typing.NamedTuple):
    """
    Output object returned when calling `bianca_overlap_measures(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    tp_auto: OutputPathType
    """True positive voxels in automatic mask"""
    tp_manual: OutputPathType
    """True positive voxels in manual mask"""
    fp_vox_tp_overlap: OutputPathType
    """False positive voxels that overlap with true positives"""
    fn_vox_tp_overlap: OutputPathType
    """False negative voxels that overlap with true positives"""
    lesmask_idx: OutputPathType
    """Indexed lesion mask"""
    manualmask_idx: OutputPathType
    """Indexed manual mask"""
    lesmask_idx_tp: OutputPathType
    """True positive indexed lesion mask"""
    manualmask_idx_tp: OutputPathType
    """True positive indexed manual mask"""


def bianca_overlap_measures(
    lesion_mask: InputPathType,
    manual_mask: InputPathType,
    output_dir: str,
    runner: Runner = None,
) -> BiancaOverlapMeasuresOutputs:
    """
    bianca_overlap_measures by Oxford Centre for Functional MRI of the Brain
    (FMRIB).
    
    BIANCA overlap measures script for FSL.
    
    Args:
        lesion_mask: Lesion mask image file.
        manual_mask: Manual mask image file.
        output_dir: Output directory for generated files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BiancaOverlapMeasuresOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(BIANCA_OVERLAP_MEASURES_METADATA)
    cargs = []
    cargs.append("/usr/local/fsl/bin/bianca_overlap_measures")
    cargs.append(execution.input_file(lesion_mask))
    cargs.append(execution.input_file(manual_mask))
    cargs.append(output_dir)
    ret = BiancaOverlapMeasuresOutputs(
        root=execution.output_file("."),
        tp_auto=execution.output_file(f"{OUTPUT_DIR}/TPauto.nii.gz", optional=True),
        tp_manual=execution.output_file(f"{OUTPUT_DIR}/TPmanual.nii.gz", optional=True),
        fp_vox_tp_overlap=execution.output_file(f"{OUTPUT_DIR}/FPvox_TP_overlap.nii.gz", optional=True),
        fn_vox_tp_overlap=execution.output_file(f"{OUTPUT_DIR}/FNvox_TP_overlap.nii.gz", optional=True),
        lesmask_idx=execution.output_file(f"{OUTPUT_DIR}/lesmask_idx.nii.gz", optional=True),
        manualmask_idx=execution.output_file(f"{OUTPUT_DIR}/manualmask_idx.nii.gz", optional=True),
        lesmask_idx_tp=execution.output_file(f"{OUTPUT_DIR}/lesmask_idx_TP.nii.gz", optional=True),
        manualmask_idx_tp=execution.output_file(f"{OUTPUT_DIR}/manualmask_idx_TP.nii.gz", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "BIANCA_OVERLAP_MEASURES_METADATA",
    "BiancaOverlapMeasuresOutputs",
    "bianca_overlap_measures",
]
