# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FSLSTATS_METADATA = Metadata(
    id="bc6783610467620739e841e36e533f0caa40cd6b",
    name="fslstats",
)


class FslstatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fslstats(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_stats: OutputPathType
    """Statistics output file"""


def fslstats(
    input_file: InputPathType,
    index_mask: InputPathType | None = None,
    lower_threshold: float | int | None = None,
    upper_threshold: float | int | None = None,
    robust_intensity_flag: bool = False,
    minmax_intensity_flag: bool = False,
    voxels_volume_flag: bool = False,
    nonzero_voxels_volume_flag: bool = False,
    mean_flag: bool = False,
    nonzero_mean_flag: bool = False,
    std_dev_flag: bool = False,
    nonzero_std_dev_flag: bool = False,
    smallest_roi_flag: bool = False,
    max_coords_flag: bool = False,
    min_coords_flag: bool = False,
    cog_mm_flag: bool = False,
    cog_voxel_flag: bool = False,
    percentile: float | int | None = None,
    nonzero_percentile: float | int | None = None,
    absolute_values_flag: bool = False,
    nan_as_zero_flag: bool = False,
    mask_image: InputPathType | None = None,
    difference_image: InputPathType | None = None,
    hist_bins: float | int | None = None,
    hist_bins_min_max: str | None = None,
    timeseries_flag: bool = False,
    mean_entropy_flag: bool = False,
    nonzero_mean_entropy_flag: bool = False,
    runner: Runner = None,
) -> FslstatsOutputs:
    """
    fslstats by Oxford Centre for Functional MRI of the Brain (FMRIB).
    
    FSL tool for calculating statistics on image data.
    
    More information: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Fslutils
    
    Args:
        input_file: Input image file (e.g., image.nii.gz)
        index_mask: Generate separate n submasks from indexMask, for indexvalues
            1..n where n is the maximum index value in indexMask, and generate
            statistics for each submask
        lower_threshold: Set lower threshold
        upper_threshold: Set upper threshold
        robust_intensity_flag: Output robust min and max intensity
        minmax_intensity_flag: Output min and max intensity
        voxels_volume_flag: Output voxels and volume
        nonzero_voxels_volume_flag: Output voxels and volume (for nonzero
            voxels)
        mean_flag: Output mean
        nonzero_mean_flag: Output mean (for nonzero voxels)
        std_dev_flag: Output standard deviation
        nonzero_std_dev_flag: Output standard deviation (for nonzero voxels)
        smallest_roi_flag: Output smallest ROI containing nonzero voxels
        max_coords_flag: Output coordinates of maximum voxel
        min_coords_flag: Output coordinates of minimum voxel
        cog_mm_flag: Output center-of-gravity (cog) in mm coordinates
        cog_voxel_flag: Output center-of-gravity (cog) in voxel coordinates
        percentile: Output nth percentile
        nonzero_percentile: Output nth percentile (for nonzero voxels)
        absolute_values_flag: Use absolute values of all image intensities
        nan_as_zero_flag: Treat NaN or Inf as zero for subsequent stats
        mask_image: Use the specified image for masking - overrides lower and
            upper thresholds
        difference_image: Take the difference between the base image and the
            image specified here
        hist_bins: Output a histogram for the thresholded/masked voxels only
            with specified number of bins
        hist_bins_min_max: Output a histogram for the thresholded/masked voxels
            only with specified number of bins and histogram limits of min and max
        timeseries_flag: Separate output line for each 3D volume of a 4D
            timeseries
        mean_entropy_flag: Output mean entropy; mean(-i*ln(i))
        nonzero_mean_entropy_flag: Output mean entropy (of nonzero voxels)
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `FslstatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLSTATS_METADATA)
    cargs = []
    cargs.append("fslstats")
    cargs.append("[PREOPTIONS]")
    cargs.append(execution.input_file(input_file))
    cargs.append("[OPTIONS]")
    ret = FslstatsOutputs(
        root=execution.output_file("."),
        output_stats=execution.output_file(f"{pathlib.Path(input_file).name}_stats.txt", optional=True),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FSLSTATS_METADATA",
    "FslstatsOutputs",
    "fslstats",
]
