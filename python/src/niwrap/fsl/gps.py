# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

GPS_METADATA = Metadata(
    id="09432276236e99e168fd27090a0762ca05e0c14d",
    name="gps",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="mcin/docker-fsl:6.0.5",
)


class GpsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `gps(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType | None
    """Output file with generated directions"""


def gps(
    ndir: float | int,
    output: str | None = "bvecs#.txt",
    optws: bool = False,
    ranseed: float | int | None = None,
    init: InputPathType | None = None,
    report: bool = False,
    verbose: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> GpsOutputs:
    """
    gps by University of Oxford (Jesper Andersson).
    
    Generate set of diffusion gradient directions.
    
    More information: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FSL
    
    Args:
        ndir: Number of directions.
        output: Name of output file (default: bvecs#.txt).
        optws: Perform additional optimisation on the whole sphere (needed for\
            eddy).
        ranseed: Seed random generator with supplied number.
        init: File with bvecs to use as initialisation.
        report: Report coulomb forces for initial configuration.
        verbose: Switch on diagnostic messages.
        help_: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GpsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(GPS_METADATA)
    cargs = []
    cargs.append("gps")
    cargs.extend(["--ndir", str(ndir)])
    if optws:
        cargs.append("--optws")
    if output is not None:
        cargs.extend(["--out", output])
    if ranseed is not None:
        cargs.extend(["--ranseed", str(ranseed)])
    if init is not None:
        cargs.extend(["--init", execution.input_file(init)])
    if report:
        cargs.append("--report")
    if verbose:
        cargs.append("-v,--verbose")
    if help_:
        cargs.append("-h,--help")
    ret = GpsOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(f"{output}", optional=True) if output is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "GPS_METADATA",
    "GpsOutputs",
    "gps",
]
