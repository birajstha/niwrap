# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

RUN_MESH_UTILS_METADATA = Metadata(
    id="ed628e4865d678ceabd646a47f2b22f9411f596c",
    name="run_mesh_utils",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="mcin/docker-fsl:latest",
)


class RunMeshUtilsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `run_mesh_utils(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_image_file: OutputPathType
    """Output image file"""


def run_mesh_utils(
    base_mesh: InputPathType,
    output_image: str,
    input_image: InputPathType | None = None,
    second_input_image: InputPathType | None = None,
    weighting_image_force: InputPathType | None = None,
    do_uncentre_model: bool = False,
    do_subtract_constant_from_scalars: bool = False,
    do_vertex_scalars_to_image_volume: bool = False,
    base_mesh2: InputPathType | None = None,
    use_sc2: bool = False,
    flirt_matrix: InputPathType | None = None,
    do_mesh_reg: bool = False,
    threshold: float | int | None = None,
    degrees_of_freedom: float | int | None = None,
    inverse: bool = False,
    verbose: bool = False,
    help_: bool = False,
    runner: Runner = None,
) -> RunMeshUtilsOutputs:
    """
    run_mesh_utils by University of Oxford (Brian Patenaude).
    
    A tool for various mesh operations as part of FSL.
    
    Args:
        base_mesh: Filename of base mesh
        output_image: Filename of output image
        input_image: Filename of input image
        second_input_image: Filename of second input image
        weighting_image_force: Weighting image force
        do_uncentre_model: Do UnCentre Model
        do_subtract_constant_from_scalars: Do Subtract Constant From Scalars
        do_vertex_scalars_to_image_volume: Do Vertex Scalars To Image Volume
        base_mesh2: Filename of base mesh2
        use_sc2: Use SC2
        flirt_matrix: Filename of flirt matrix
        do_mesh_reg: Do Mesh Registration
        threshold: Threshold
        degrees_of_freedom: Degrees of freedom
        inverse: Inverse Operation
        verbose: Switch on diagnostic messages
        help_: Display help message
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `RunMeshUtilsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(RUN_MESH_UTILS_METADATA)
    cargs = []
    cargs.append("run_mesh_utils")
    cargs.append(execution.input_file(base_mesh))
    cargs.extend(["-o", output_image])
    if input_image is not None:
        cargs.extend(["-i", execution.input_file(input_image)])
    if second_input_image is not None:
        cargs.extend(["-j", execution.input_file(second_input_image)])
    if weighting_image_force is not None:
        cargs.extend(["-p", execution.input_file(weighting_image_force)])
    cargs.append("[OPTIONAL_PARAMS...]")
    ret = RunMeshUtilsOutputs(
        root=execution.output_file("."),
        output_image_file=execution.output_file(f"{output_image}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "RUN_MESH_UTILS_METADATA",
    "RunMeshUtilsOutputs",
    "run_mesh_utils",
]
