# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

HALFCOSBASIS_METADATA = Metadata(
    id="f64ff890aab5877ba4922f672dac8f3255b37c49",
    name="halfcosbasis",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="mcin/docker-fsl:latest",
)


class HalfcosbasisOutputs(typing.NamedTuple):
    """
    Output object returned when calling `halfcosbasis(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def halfcosbasis(
    hrf_param_file: InputPathType,
    hrf_param_file_hf: InputPathType,
    verbose_flag: bool = False,
    debug_level: float | int | None = None,
    debug_level_debug: float | int | None = None,
    debug_level_debuglevel: float | int | None = None,
    timing_on_flag: bool = False,
    log_dir: str | None = None,
    log_dir_ld: str | None = None,
    log_dir_logdir: str | None = None,
    num_hrf_samples: float | int | None = 1000,
    num_hrf_basis_funcs: float | int | None = 3,
    num_secs: float | int | None = 40,
    num_secs_nsecs: float | int | None = 40,
    temp_res: float | int | None = 0.05,
    help_flag: bool = False,
    help_flag_long: bool = False,
    runner: Runner | None = None,
) -> HalfcosbasisOutputs:
    """
    halfcosbasis by Oxford Centre for Functional MRI of the Brain (FMRIB).
    
    Tool for handling half-cosine basis functions in FSL.
    
    More information: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/
    
    Args:
        hrf_param_file: Half cosine HRF parameter ranges file.
        hrf_param_file_hf: Half cosine HRF parameter ranges file.
        verbose_flag: Switch on diagnostic messages.
        debug_level: Set debug level.
        debug_level_debug: Set debug level.
        debug_level_debuglevel: Set debug level.
        timing_on_flag: Turn timing on.
        log_dir: Log directory.
        log_dir_ld: Log directory.
        log_dir_logdir: Log directory.
        num_hrf_samples: Number of HRF samples to use (default is 1000).
        num_hrf_basis_funcs: Number of HRF basis functions to use (default is\
            3).
        num_secs: Number of seconds (default is 40).
        num_secs_nsecs: Number of seconds (default is 40).
        temp_res: Temporal resolution (default is 0.05).
        help_flag: Display help message.
        help_flag_long: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HalfcosbasisOutputs`).
    """
    runner = runner or get_global_runner()
    if (
        (hrf_param_file is not None) +
        (hrf_param_file_hf is not None)
    ) > 1:
        raise ValueError(
            "Only one of the following arguments can be specified:\n"
            "hrf_param_file,\n"
            "hrf_param_file_hf"
        )
    execution = runner.start_execution(HALFCOSBASIS_METADATA)
    cargs = []
    cargs.append("halfcosbasis")
    cargs.extend(["--hf", execution.input_file(hrf_param_file_hf)])
    if verbose_flag:
        cargs.append("-V")
    if debug_level_debuglevel is not None:
        cargs.extend(["--debuglevel", str(debug_level_debuglevel)])
    if timing_on_flag:
        cargs.append("--to")
    if log_dir_logdir is not None:
        cargs.extend(["--logdir", log_dir_logdir])
    if num_hrf_samples is not None:
        cargs.extend(["--nhs", str(num_hrf_samples)])
    if num_hrf_basis_funcs is not None:
        cargs.extend(["--nbfs", str(num_hrf_basis_funcs)])
    if num_secs_nsecs is not None:
        cargs.extend(["--nsecs", str(num_secs_nsecs)])
    if temp_res is not None:
        cargs.extend(["--res", str(temp_res)])
    ret = HalfcosbasisOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "HALFCOSBASIS_METADATA",
    "HalfcosbasisOutputs",
    "halfcosbasis",
]
