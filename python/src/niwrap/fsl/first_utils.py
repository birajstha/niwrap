# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FIRT_UTILS_METADATA = Metadata(
    id="157eac23eedcc140d30aa1cf77cfa1c2dec0733b",
    name="firt_utils",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="mcin/docker-fsl:6.0.5",
)


class FirtUtilsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `firt_utils(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def firt_utils(
    input_file: InputPathType,
    output_name: str,
    norm_factors: InputPathType | None = None,
    reference_image: InputPathType | None = None,
    extra_path: InputPathType | None = None,
    flirt_matrices: InputPathType | None = None,
    use_scale: bool = False,
    dice_overlap: bool = False,
    input_mesh: InputPathType | None = None,
    use_norm: bool = False,
    surface_out: bool = False,
    threshold: float | int | None = None,
    mesh_label: str | None = None,
    use_bvars: bool = False,
    use_recon_mni: bool = False,
    vertex_analysis: bool = False,
    use_recon_native: bool = False,
    use_rigid_align: bool = False,
    design_matrix: InputPathType | None = None,
    recon_mesh_from_bvars: bool = False,
    read_bvars: bool = False,
    mesh_to_vol: bool = False,
    centre_origin: bool = False,
    save_vertices: InputPathType | None = None,
    verbose: bool = False,
    use_pca_filter: bool = False,
    num_modes: float | int | None = None,
    single_boundary_corr: bool = False,
    do_mvglm: bool = False,
    concat_bvars: bool = False,
    debug_mode: bool = False,
    help_: bool = False,
    runner: Runner = None,
) -> FirtUtilsOutputs:
    """
    firt_utils by University of Oxford (Brian Patenaude).
    
    Utilities for handling FIRST's input and output files.
    
    Args:
        input_file: Filename of input image/mesh/bvars
        output_name: Output name
        norm_factors: Filename of normalization factors
        reference_image: Filename of reference image
        extra_path: Specifies extra path to image in .bvars file
        flirt_matrices: Text file containing filenames of flirt matrices
        use_scale: Do stats
        dice_overlap: Calculates Dice overlap
        input_mesh: Filename of input mesh
        use_norm: Normalize volumes measurements
        surface_out: Output vertex analysis on the surface
        threshold: Threshold for clean up
        mesh_label: Specifies the label used to fill the mesh
        use_bvars: Operate using the mode parameters output from FIRST
        use_recon_mni: Reconstruct meshes in MNI space
        vertex_analysis: Perform vertex-wise stats from bvars
        use_recon_native: Reconstruct meshes in native space
        use_rigid_align: Register meshes using 6 degree of freedom (7 if
            useScale is used)
        design_matrix: Filename of fsl design matrix
        recon_mesh_from_bvars: Convert bvars to mesh
        read_bvars: Read bvars from binary format
        mesh_to_vol: Convert mesh to an image
        centre_origin: Places origin of mesh at the centre of the image
        save_vertices: Filename for saving matrix of vertex coords: (all x, then
            all y, then all z) by Nsubjects
        verbose: Output F-stats to standard out
        use_pca_filter: Smooths the surface by truncating the mode parameters
        num_modes: Number of modes to retain per structure
        single_boundary_corr: Correct boundary voxels of a single structure
        do_mvglm: Perform multivariate general linear model analysis
        concat_bvars: Concat bvars from binary format
        debug_mode: Turn on debugging mode
        help_: Display help message
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `FirtUtilsOutputs`).
    """
    runner = runner or get_global_runner()
    if threshold is not None and not (0 <= threshold): 
        raise ValueError(f"'threshold' must be greater than 0 <= x but was {threshold}")
    if num_modes is not None and not (0 <= num_modes): 
        raise ValueError(f"'num_modes' must be greater than 0 <= x but was {num_modes}")
    execution = runner.start_execution(FIRT_UTILS_METADATA)
    cargs = []
    cargs.append("first_utils")
    cargs.append("[OPTIONAL_ARGS]")
    cargs.append("-i")
    cargs.extend(["-i", execution.input_file(input_file)])
    cargs.append("-o")
    cargs.extend(["-o", output_name])
    ret = FirtUtilsOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FIRT_UTILS_METADATA",
    "FirtUtilsOutputs",
    "firt_utils",
]
