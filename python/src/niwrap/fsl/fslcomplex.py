# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FSLCOMPLEX_METADATA = Metadata(
    id="04bdecac3ae0becd85cc68c90704b37e0ef54666",
    name="fslcomplex",
    container_image_type="docker",
    container_image_tag="mcin/fsl:6.0.5",
)


class FslcomplexOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fslcomplex(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    result_output_file: OutputPathType
    """The resulting output file from the specified operation."""


def fslcomplex(
    input_file: InputPathType,
    output_file: InputPathType,
    output_type: typing.Literal["-realabs", "-realphase", "-realpolar", "-realcartesian", "-complex", "-complexpolar", "-complexsplit", "-complexmerge", "-copyonly"],
    start_vol: int | None = None,
    end_vol: int | None = None,
    runner: Runner | None = None,
) -> FslcomplexOutputs:
    """
    fslcomplex by FMRIB Analysis Group, Oxford University, UK.
    
    Tool for manipulating complex-valued MR data.
    
    More information: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Fslutils
    
    Args:
        input_file: Input volume (e.g. complexvol.nii.gz).
        output_file: Output volume (e.g. absvol.nii.gz).
        output_type: Output type (determines the operation to perform).
        start_vol: Start volume (optional).
        end_vol: End volume (optional).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslcomplexOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLCOMPLEX_METADATA)
    cargs = []
    cargs.append("fslcomplex")
    cargs.append("<outputtype>")
    cargs.append("<input>")
    cargs.append("<output>")
    cargs.append("[startvol")
    cargs.append("[endvol]]")
    ret = FslcomplexOutputs(
        root=execution.output_file("."),
        result_output_file=execution.output_file(f"{pathlib.Path(output_file).name}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FSLCOMPLEX_METADATA",
    "FslcomplexOutputs",
    "fslcomplex",
]
