# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

DISTANCEMAP_METADATA = Metadata(
    id="5f6cde3f6945359262869c798e41dd631bf056fe",
    name="distancemap",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="mcin/docker-fsl:latest",
)


class DistancemapOutputs(typing.NamedTuple):
    """
    Output object returned when calling `distancemap(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_distancemap: OutputPathType
    """Output distance map image"""
    output_local_maxima: OutputPathType | None
    """Output local maxima image"""
    output_segmented_image: OutputPathType | None
    """Output segmented distance map image"""


def distancemap(
    input_image: InputPathType,
    output_image: InputPathType,
    mask_image: InputPathType | None = None,
    second_image: InputPathType | None = None,
    local_maxima_image: InputPathType | None = None,
    segmented_image: InputPathType | None = None,
    invert_flag: bool = False,
    interpolate_values: InputPathType | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner = None,
) -> DistancemapOutputs:
    """
    distancemap by University of Oxford (Mark Jenkinson).
    
    A tool to calculate distance maps using FSL.
    
    More information: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FSL
    
    Args:
        input_image: Input image filename (calc distance to non-zero voxels).
        output_image: Output image filename.
        mask_image: Mask image filename (only calc values at these voxels).
        second_image: Second image filename (calc closest distance of this and\
            primary input image, using non-zero voxels, negative distances mean\
            this secondary image is the closer one).
        local_maxima_image: Local maxima output image filename.
        segmented_image: Segmented output image filename (unique value per\
            segment is local maxima label).
        invert_flag: Invert input image.
        interpolate_values: Filename for values to interpolate (sparse sampling\
            interpolation).
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DistancemapOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DISTANCEMAP_METADATA)
    cargs = []
    cargs.append("distancemap")
    cargs.append("[OPTIONS]")
    ret = DistancemapOutputs(
        root=execution.output_file("."),
        output_distancemap=execution.output_file(f"{pathlib.Path(output_image).name}"),
        output_local_maxima=execution.output_file(f"{pathlib.Path(local_maxima_image).name}", optional=True) if local_maxima_image is not None else None,
        output_segmented_image=execution.output_file(f"{pathlib.Path(segmented_image).name}", optional=True) if segmented_image is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "DISTANCEMAP_METADATA",
    "DistancemapOutputs",
    "distancemap",
]
