# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FSLSLICE_METADATA = Metadata(
    id="839fa628fdb5ba38a80b0a8a4fc4768f7897040d",
    name="fslslice",
    container_image_type="docker",
    container_image_index="index.docker.io",
    container_image_tag="mcin/docker-fsl:latest",
)


class FslsliceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fslslice(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_slices: OutputPathType | None
    """Extracted 2D slices from the 3D volume"""


def fslslice(
    volume: InputPathType,
    output_basename: str | None = None,
    runner: Runner = None,
) -> FslsliceOutputs:
    """
    fslslice by Oxford Centre for Functional MRI of the Brain (FMRIB).
    
    Tool to extract all slices from a 3D volume and store as 2D images.
    
    More information: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Fslutils
    
    Args:
        volume: Input 3D volume (e.g. volume.nii.gz).
        output_basename: Output basename for extracted slices.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslsliceOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLSLICE_METADATA)
    cargs = []
    cargs.append("fslslice")
    cargs.append(execution.input_file(volume))
    if output_basename is not None:
        cargs.append(output_basename)
    ret = FslsliceOutputs(
        root=execution.output_file("."),
        output_slices=execution.output_file(f"{output_basename}_slice*.nii.gz") if output_basename is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FSLSLICE_METADATA",
    "FslsliceOutputs",
    "fslslice",
]
