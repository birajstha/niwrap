# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

FSLSELECTVOLS_METADATA = Metadata(
    id="4f8a5dc6b32bbda598a8404cf188e6ac52fa62ef",
    name="fslselectvols",
    container_image_type="docker",
    container_image_tag="mcin/fsl:6.0.5",
)


class FslselectvolsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fslselectvols(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_4d_image: OutputPathType
    """Output 4D image with selected volumes"""


def fslselectvols(
    input_file: InputPathType,
    output_file: str,
    vols_list: str,
    output_mean_flag: bool = False,
    output_variance_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> FslselectvolsOutputs:
    """
    fslselectvols by Oxford Centre for Functional MRI of the Brain (FMRIB).
    
    Select volumes from a 4D time series and output a subset 4D volume.
    
    More information: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/
    
    Args:
        input_file: Input file name (4D image).
        output_file: Output file name (4D image).
        vols_list: List of volumes to extract (comma-separated list or ascii\
            file).
        output_mean_flag: Output mean instead of concatenation.
        output_variance_flag: Output variance instead of concatenation.
        help_flag: Display help text.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslselectvolsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLSELECTVOLS_METADATA)
    cargs = []
    cargs.append("fslselectvols")
    cargs.extend(["-i", execution.input_file(input_file)])
    cargs.extend(["-o", output_file])
    cargs.extend(["--vols", vols_list])
    if output_mean_flag:
        cargs.append("-m")
    if output_variance_flag:
        cargs.append("-v")
    ret = FslselectvolsOutputs(
        root=execution.output_file("."),
        output_4d_image=execution.output_file(f"{output_file}"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FSLSELECTVOLS_METADATA",
    "FslselectvolsOutputs",
    "fslselectvols",
]
