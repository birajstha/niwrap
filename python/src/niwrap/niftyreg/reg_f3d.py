# This file was auto generated by Styx.
# Do not edit this file directly.

from styxdefs import *
import pathlib
import typing

REG_F3D_METADATA = Metadata(
    id="f86bdc26d680e7b0574dd2ce54660ffc8012feca",
    name="reg_f3d",
)


class RegF3dOutputs(typing.NamedTuple):
    """
    Output object returned when calling `reg_f3d(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_cpp_file: OutputPathType | None
    """File containing the output control point grid"""
    output_resampled_image_file: OutputPathType | None
    """File containing the resampled image"""


def reg_f3d(
    reference_image: InputPathType,
    floating_image: InputPathType,
    affine_transform: InputPathType | None = None,
    flirt_affine_transform: InputPathType | None = None,
    control_point_grid_input: InputPathType | None = None,
    output_cpp: str | None = None,
    output_resampled_image: str | None = None,
    reference_mask: InputPathType | None = None,
    smooth_reference: float | int | None = None,
    smooth_floating: float | int | None = None,
    num_bins_joint_histogram: float | int | None = None,
    num_bins_floating_joint_histogram: float | int | None = None,
    lower_threshold_reference: float | int | None = None,
    upper_threshold_reference: float | int | None = None,
    lower_threshold_floating: float | int | None = None,
    upper_threshold_floating: float | int | None = None,
    spacing_x: float | int | None = None,
    spacing_y: float | int | None = None,
    spacing_z: float | int | None = None,
    bending_energy: float | int | None = None,
    linear_elasticity: list[float | int] = None,
    l2_norm_displacement: float | int | None = None,
    jacobian_determinant: float | int | None = None,
    no_approx_jl: bool = False,
    no_conj: bool = False,
    ssd: bool = False,
    kld: bool = False,
    amc: bool = False,
    max_iterations: float | int | None = None,
    num_levels: float | int | None = None,
    first_levels: float | int | None = None,
    no_pyramid: bool = False,
    symmetric: bool = False,
    floating_mask: InputPathType | None = None,
    inverse_consistency: float | int | None = None,
    velocity_field: bool = False,
    composition_steps: float | int | None = None,
    smooth_gradient: float | int | None = None,
    padding_value: float | int | None = None,
    verbose_off: bool = False,
    runner: Runner = None,
) -> RegF3dOutputs:
    """
    reg_f3d by Marc Modat.
    
    Fast Free-Form Deformation algorithm for non-rigid registration based on
    Rueckert's 99 TMI work.
    
    More information: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
    
    Args:
        reference_image: Filename of the reference image
        floating_image: Filename of the floating image
        affine_transform: Filename which contains an affine transformation
        flirt_affine_transform: Filename which contains a flirt affine
            transformation
        control_point_grid_input: Filename of control point grid input
        output_cpp: Filename of control point grid
        output_resampled_image: Filename of the resampled image
        reference_mask: Filename of a mask image in the reference space
        smooth_reference: Smooth the reference image using the specified sigma
            (mm)
        smooth_floating: Smooth the floating image using the specified sigma
            (mm)
        num_bins_joint_histogram: Number of bins to use for the joint histogram
            (reference)
        num_bins_floating_joint_histogram: Number of bins to use for the joint
            histogram (floating)
        lower_threshold_reference: Lower threshold to apply to the reference
            image intensities
        upper_threshold_reference: Upper threshold to apply to the reference
            image intensities
        lower_threshold_floating: Lower threshold to apply to the floating image
            intensities
        upper_threshold_floating: Upper threshold to apply to the floating image
            intensities
        spacing_x: Final grid spacing along the x axis in mm (or in voxel if
            negative value)
        spacing_y: Final grid spacing along the y axis in mm (or in voxel if
            negative value)
        spacing_z: Final grid spacing along the z axis in mm (or in voxel if
            negative value)
        bending_energy: Weight of the bending energy penalty term
        linear_elasticity: Weights of linear elasticity penalty term
        l2_norm_displacement: Weight of L2 norm displacement penalty term
        jacobian_determinant: Weight of log of the Jacobian determinant penalty
            term
        no_approx_jl: Do not approximate the JL value only at the control point
            position
        no_conj: Do not use the conjugate gradient optimization but a simple
            gradient ascent
        ssd: Use the SSD as the similarity measure instead of NMI
        kld: Use the KL divergence as the similarity measure instead of NMI
        amc: Use the additive NMI for multichannel data
        max_iterations: Maximal number of iterations per level
        num_levels: Number of levels to perform
        first_levels: Only perform the first levels
        no_pyramid: Do not use a pyramidal approach
        symmetric: Use symmetric approach
        floating_mask: Filename of a mask image in the floating space
        inverse_consistency: Weight of the inverse consistency penalty term
        velocity_field: Use velocity field integration to generate the
            deformation
        composition_steps: Number of composition steps
        smooth_gradient: Smooth the metric derivative (in mm)
        padding_value: Padding value
        verbose_off: Turn verbose off
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `RegF3dOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(REG_F3D_METADATA)
    cargs = []
    cargs.append("reg_f3d")
    cargs.append("-ref")
    cargs.extend(["-ref", execution.input_file(reference_image)])
    cargs.append("-flo")
    cargs.extend(["-flo", execution.input_file(floating_image)])
    cargs.append("[OPTIONS]")
    ret = RegF3dOutputs(
        root=execution.output_file("."),
        output_cpp_file=execution.output_file(f"{output_cpp}", optional=True) if output_cpp is not None else None,
        output_resampled_image_file=execution.output_file(f"{output_resampled_image}", optional=True) if output_resampled_image is not None else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "REG_F3D_METADATA",
    "RegF3dOutputs",
    "reg_f3d",
]
