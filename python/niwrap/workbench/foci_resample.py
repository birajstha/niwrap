# This file was auto generated by styx
# Do not edit this file directly

import pathlib
import typing

from styxdefs import *


FOCI_RESAMPLE_METADATA = Metadata(
    id="5add8110ed00ce93d382bea83c4b0ecaa912e15a",
    name="foci-resample",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class FociResampleOutputs(typing.NamedTuple):
    """
    Output object returned when calling `foci_resample(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    foci_out: OutputPathType
    """the output foci file"""


def foci_resample(
    foci_in: InputPathType,
    foci_out: InputPathType,
    opt_discard_distance_from_surface: bool = False,
    opt_restore_xyz: bool = False,
    runner: Runner = None,
) -> FociResampleOutputs:
    """
    foci-resample by Washington University School of Medicin.
    
    PROJECT FOCI TO A DIFFERENT SURFACE.
    
    Unprojects foci from the <current-surf> for the structure, then projects
    them to <new-surf>. If the foci have meaningful distances above or below the
    surface, use anatomical surfaces. If the foci should be on the surface, use
    registered spheres and the options -discard-distance-from-surface and
    -restore-xyz.
    
    Args:
        foci_in: the input foci file
        foci_out: the output foci file
        opt_discard_distance_from_surface: ignore the distance the foci are
            above or below the current surface
        opt_restore_xyz: put the original xyz coordinates into the foci, rather
            than the coordinates obtained from unprojection
        runner: Command runner
    Returns:
        NamedTuple of outputs (described in `FociResampleOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FOCI_RESAMPLE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-foci-resample")
    cargs.append(execution.input_file(foci_in))
    cargs.append(execution.input_file(foci_out))
    if opt_discard_distance_from_surface:
        cargs.append("-discard-distance-from-surface")
    if opt_restore_xyz:
        cargs.append("-restore-xyz")
    ret = FociResampleOutputs(
        root=execution.output_file("."),
        foci_out=execution.output_file(f"{pathlib.Path(foci_out).stem}"),
    )
    execution.run(cargs)
    return ret
